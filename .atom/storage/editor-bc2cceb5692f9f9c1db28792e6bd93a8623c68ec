{"mode":"editor","version":1,"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/anas/projects/heroku-buildpack-meteor"],"buffers":[{"text":"error() {\n  echo \" !     $*\" >&2\n  exit 1\n}\n\nhead() {\n  echo \"\"\n  echo \"-----> $*\"\n}\n\ndebug() {\n  # Uncomment this when you need to debug things during the build\n  # echo \"DEBUG $*\"\n  : # null command to prevent bash syntax error when not using\n}\n\ninfo() {\n  #echo \"`date +\\\"%M:%S\\\"`  $*\"\n  echo \"       $*\"\n}\n\nbuild_failed() {\n  head \"Build failed\"\n}\n\nprotip() {\n  tip=$1\n  url=$2\n  echo\n  echo \"PRO TIP: $tip\" | indent\n  echo \"See ${url:-https://devcenter.heroku.com/articles/nodejs-support}\" | indent\n}\n\nfile_contents() {\n  if test -f $1; then\n    echo \"$(cat $1)\"\n  else\n    echo \"\"\n  fi\n}\n\npackage_json() {\n  if test -f $build_dir/package.json; then\n    local result=\"$(cat $build_dir/package.json | $bp_dir/vendor/jq -r $1)\"\n    if [ \"$result\" == \"null\" ]; then echo \"\"\n    else echo \"$result\"\n    fi\n  else\n    echo \"\"\n  fi\n}\n\n# sed -l basically makes sed replace and buffer through stdin to stdout\n# so you get updates while the command runs and dont wait for the end\n# e.g. npm install | indent\nindent() {\n  c='s/^/       /'\n  case $(uname) in\n    Darwin) sed -l \"$c\";; # mac/bsd sed: -l buffers on line boundaries\n    *)      sed -u \"$c\";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data\n  esac\n}\n\ncat_npm_debug_log() {\n  test -f $build_dir/npm-debug.log && cat $build_dir/npm-debug.log\n}\n\nexport_env_dir() {\n  env_dir=$1\n  if [ -d \"$env_dir\" ]; then\n    whitelist_regex=${2:-''}\n    blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}\n    if [ -d \"$env_dir\" ]; then\n      for e in $(ls $env_dir); do\n        echo \"$e\" | grep -E \"$whitelist_regex\" | grep -qvE \"$blacklist_regex\" &&\n        export \"$e=$(cat $env_dir/$e)\"\n        :\n      done\n    fi\n  fi\n}\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/anas/projects/heroku-buildpack-meteor/bin/common.sh","digestWhenLastPersisted":"a9faa7cb27ff1448db9c389216048d3ec3c4c05d","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"#!/usr/bin/env bash\n# USAGE: bin/compile <build-dir> <cache-dir> <env-dir>\n\nbp_dir=$(cd $(dirname $0); cd ..; pwd)\n\n# Load some convenience functions like status(), echo(), and indent()\nsource $bp_dir/bin/common.sh\n\n# Move the Meteor's app source into a subdirectory\n(\n  head \"Moving app source into a subdirectory\"\n  cd $1\n  mkdir ../app_src\n  # the shopt makes the * glob catch .files\n  shopt -s dotglob nullglob\n  mv * ../app_src\n  mv ../app_src ./app_src\n)\n\n\n# Install node first, as a dependency, then install meteor & build app\n$bp_dir/bin/compile_node \"$1\" \"$2\"\n$bp_dir/bin/compile_meteor \"$1\" \"$2\"\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/anas/projects/heroku-buildpack-meteor/bin/compile","digestWhenLastPersisted":"c7f10f9e0b7a6617f0219573ae3f158a54d6141d","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"#!/usr/bin/env bash\n# USAGE: bin/compile_node <build-dir> <cache-dir> <env-dir>\n\n####### Configure environment\n\nset -e            # fail fast\nset -o pipefail   # don't ignore exit codes when piping output\n# set -x          # enable debugging\n\n# Configure directories\nbuild_dir=$1\ncache_dir=$2\nenv_dir=$3\nbp_dir=$(cd $(dirname $0); cd ..; pwd)\nheroku_dir=$build_dir/.heroku\nmkdir -p $heroku_dir/node\n\n# Load some convenience functions like status(), echo(), and indent()\nsource $bp_dir/bin/common.sh\n\n# Avoid GIT_DIR leak from previous build steps\nunset GIT_DIR\n\n# Provide hook to deal with errors\ntrap build_failed ERR\n\n# Load config vars into environment; start with defaults\nexport NPM_CONFIG_PRODUCTION=true\nexport NODE_MODULES_CACHE=true\nexport_env_dir $env_dir\n\n####### Determine current state\n\n# What's the requested semver range for node?\n#node_engine=$(package_json \".engines.node\")\n# Node version is locked for now: newer ones don't work with Meteor.\nnode_engine=\"0.10.40\"\nnode_previous=$(file_contents \"$cache_dir/node/node-version\")\n\n# What's the requested semver range for npm?\nnpm_engine=$(package_json \".engines.npm\")\nnpm_previous=$(file_contents \"$cache_dir/node/npm-version\")\n\n# How does this app start?\nif test -f $build_dir/Procfile; then start_method=\"Procfile\"\nelif [[ $(package_json \".scripts.start\") != \"\" ]]; then start_method=\"npm start\"\nelif [ -f $build_dir/server.js ]; then start_method=\"server.js\"\nelse start_method=\"\"\nfi\n\n# What's the source-of-truth for node_modules?\nif test -d $build_dir/node_modules; then modules_source=\"prebuilt\"\nelif test -f $build_dir/npm-shrinkwrap.json; then modules_source=\"npm-shrinkwrap.json\"\nelif test -f $build_dir/package.json; then modules_source=\"package.json\"\nelse modules_source=\"\"\nfi\n\n# What does our cache look like?\ntest -d $cache_dir/node/node_modules && modules_cached=true || modules_cached=false\n\n####### Provide debugging info and feedback\n\necho \"\"\ninfo \"Node engine:         ${node_engine:-unspecified}\"\ninfo \"Npm engine:          ${npm_engine:-unspecified}\"\ninfo \"Start mechanism:     ${start_method:-none}\"\ninfo \"node_modules source: ${modules_source:-none}\"\ninfo \"node_modules cached: $modules_cached\"\n\necho \"\"\n\nprintenv | grep ^NPM_CONFIG_ | indent\ninfo \"NODE_MODULES_CACHE=$NODE_MODULES_CACHE\"\n\nsource $bp_dir/bin/warnings.sh\n\n####### Vendor in binaries\n\nhead \"Installing binaries\"\n\n# Resolve non-specific node versions using semver.herokuapp.com\nif ! [[ \"$node_engine\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n  info \"Resolving node version ${node_engine:-(latest stable)} via semver.io...\"\n  node_engine=$(curl --silent --get --data-urlencode \"range=${node_engine}\" https://semver.herokuapp.com/node/resolve)\nfi\n\n# Download node from Heroku's S3 mirror of nodejs.org/dist\ninfo \"Downloading and installing node $node_engine...\"\nnode_url=\"http://s3pository.heroku.com/node/v$node_engine/node-v$node_engine-linux-x64.tar.gz\"\ncurl $node_url -s -o - | tar xzf - -C /tmp\n\n# Move node (and npm) into .heroku/node and make them executable\nmv /tmp/node-v$node_engine-linux-x64/* $heroku_dir/node\nchmod +x $heroku_dir/node/bin/*\nPATH=$heroku_dir/node/bin:$PATH\n\n# Optionally bootstrap a different npm version\nif [ \"$npm_engine\" != \"\" ]; then\n  if ! [[ \"$npm_engine\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n    info \"Resolving npm version ${npm_engine} via semver.io...\"\n    npm_engine=$(curl --silent --get --data-urlencode \"range=${npm_engine}\" https://semver.herokuapp.com/npm/resolve)\n  fi\n  info \"Downloading and installing npm $npm_engine (replacing version `npm --version`)...\"\n  npm install --quiet -g npm@$npm_engine > /dev/null 2>&1 | indent\nfi\n\n# Run subsequent commands from the build directory\ncd $build_dir\n\n####### Build the project's dependencies\n\nhead \"Building dependencies\"\n\n# Did we bust the cache?\nif ! $modules_cached; then\n  use_cache=false\nelif ! $NODE_MODULES_CACHE; then\n  info \"Cache disabled with NODE_MODULES_CACHE\"\n  use_cache=false\nelif [ \"$node_previous\" != \"\" ] && [ \"$node_engine\" != \"$node_previous\" ]; then\n  info \"Node version changed ($node_previous => $node_engine); invalidating cache\"\n  use_cache=false\nelif [ \"$npm_previous\" != \"\" ] && [ \"$npm_engine\" != \"$npm_previous\" ]; then\n  info \"Npm version changed ($npm_previous => $npm_engine); invalidating cache\"\n  use_cache=false\nelse\n  use_cache=true\nfi\n\nif [ \"$modules_source\" == \"\" ]; then\n  info \"Skipping dependencies (no source for node_modules)\"\n\nelif [ $modules_source == \"prebuilt\" ]; then\n  info \"Rebuilding any native modules for this architecture\"\n  npm rebuild 2>&1 | indent\n  info \"Installing any new modules\"\n  npm install --quiet --userconfig $build_dir/.npmrc 2>&1 | indent\n\nelif $use_cache; then\n  info \"Restoring node modules from cache\"\n  cp -r $cache_dir/node/node_modules $build_dir/\n  info \"Pruning unused dependencies\"\n  npm prune 2>&1 | indent\n  info \"Installing any new modules\"\n  npm install --quiet --userconfig $build_dir/.npmrc 2>&1 | indent\n\nelse\n  info \"Installing node modules\"\n  touch $build_dir/.npmrc\n  npm install --quiet --userconfig $build_dir/.npmrc 2>&1 | indent\nfi\n\n####### Create a Procfile if possible\n\nhead \"Checking startup method\"\n\nif [ \"$start_method\" == \"Procfile\" ]; then\n  info \"Found Procfile\"\nelif [ \"$start_method\" == \"npm start\" ]; then\n  info \"No Procfile; Adding 'web: npm start' to new Procfile\"\n  echo \"web: npm start\" > $build_dir/Procfile\nelif [ \"$start_method\" == \"server.js\" ]; then\n  info \"No Procfile; Adding 'web: node server.js' to new Procfile\"\n  echo \"web: node server.js\" > $build_dir/Procfile\nfi\n\n####### Create the runtime environment (profile.d)\n\nhead \"Finalizing build\"\n\n# Runtime & Multi-buildpack exports\ninfo \"Creating runtime environment\"\nmkdir -p $build_dir/.profile.d\necho \"export PATH=\\\"\\$HOME/.heroku/node/bin:\\$HOME/bin:\\$HOME/node_modules/.bin:\\$PATH\\\"\" > $build_dir/.profile.d/nodejs.sh\necho \"export NODE_HOME=\\\"\\$HOME/.heroku/node\\\"\" >> $build_dir/.profile.d/nodejs.sh\n\ninfo \"Exporting binary paths\"\necho \"export PATH=\\\"$build_dir/.heroku/node/bin:$build_dir/node_modules/.bin:\\$PATH\\\"\" > $bp_dir/export\necho \"export NODE_HOME=\\\"$build_dir/.heroku/node\\\"\" >> $bp_dir/export\n\n####### Clean up\n\ninfo \"Cleaning up build artifacts\"\n\n# Clean up after npm\nrm -rf \"$build_dir/.node-gyp\"\nrm -rf \"$build_dir/.npm\"\n\n# Clear the cache\nrm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)\nrm -rf $cache_dir/node\n\n####### Build successful! Store results in cache\n\n# Create the cache\nmkdir -p $cache_dir/node\n\necho $node_engine > $cache_dir/node/node-version\necho $npm_engine > $cache_dir/node/npm-version\n\nif test -d $build_dir/node_modules; then\n  info \"Caching node_modules for future builds\"\n  cp -r $build_dir/node_modules $cache_dir/node\nfi\n\n# Show the final dependency tree\ninfo \"Build successful!\"\n(npm ls --depth=0 || true) 2>/dev/null | indent\n","markerStore":{"nextMarkerId":7,"markersById":{"0":{"range":{"start":{"row":36,"column":19},"end":{"row":36,"column":19}},"properties":{"type":"selection","editorId":16,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":6,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[36,18],[36,20]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[36,18],[36,20]],"newRange":[[36,18],[36,18]],"oldText":"36","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[36,18],[36,18]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":2,"snapshot":{"0":{"range":[[36,18],[36,18]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[36,18],[36,18]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[36,18],[36,18]],"newRange":[[36,18],[36,19]],"oldText":"","newText":"4"}},{"type":"change","content":{"oldRange":[[36,19],[36,19]],"newRange":[[36,19],[36,20]],"oldText":"","newText":"0"}},{"type":"group-end","snapshot":{"0":{"range":[[36,20],[36,20]],"properties":{"type":"selection","editorId":16,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/anas/projects/heroku-buildpack-meteor/bin/compile_node","digestWhenLastPersisted":"e93f79705ad3fc65ca4ec109c82405dff5ca8121","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"# Heroku buildpack for meteor\n\n## Usage\n\n```\n% heroku create --buildpack https://github.com/AnasFullStack/heroku-buildpack-meteor\n```\n\n## Example\n\nCreate a sample app with 'meteor'\n\n```\n% meteor create --example todos\ntodos: created.\n\nTo run your new app:\n   cd todos\n   meteor\n```\n\nPut it in git.\n\n```\n% cd todos\n% git init\nInitialized empty Git repository in /tmp/a/todos/.git/\n% git add .\n% git commit -m \"Sample todos app!\"\n```\n\nCreate your heroku app\n\n```\n% heroku create --buildpack https://github.com/AnasFullStack/heroku-buildpack-meteor\n```\n\nOr if your Heroku app already exists\n\n```\n% heroku buildpacks:set https://github.com/AnasFullStack/heroku-buildpack-meteor\n```\n\nConfigure your plugins & settings\n\n```\n% heroku addons:create mongolab:sandbox  # optional: use whatever mongo provider you prefer\n% heroku config:add MONGO_URL=<insert_value_of_MONGOLAB_URI_here>\n% heroku config:add ROOT_URL=<insert_url_created_above_here>\n```\n\nAdd [session affinity](https://devcenter.heroku.com/articles/session-affinity) so your app will still work with more than one dyno\n```\n% heroku labs:enable http-session-affinity\n```\n\nOptional step, if you are using a ```settings.json``` file to configure your Meteor application\n\n```\n% heroku config:add METEOR_SETTINGS=\"$(cat settings.json)\"\n```\n\nDeploy it\n\n```\n% git push heroku master\n```\n\nEnjoy!\n","markerStore":{"nextMarkerId":66,"markersById":{"0":{"range":{"start":{"row":59,"column":57},"end":{"row":59,"column":57}},"properties":{"type":"selection","editorId":46,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"44":{"range":{"start":{"row":59,"column":56},"end":{"row":59,"column":57}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"45":{"range":{"start":{"row":59,"column":38},"end":{"row":59,"column":39}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"46":{"range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"47":{"range":{"start":{"row":34,"column":0},"end":{"row":35,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"48":{"range":{"start":{"row":40,"column":0},"end":{"row":41,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":3,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[59,57],[59,57]],"properties":{"type":"selection","editorId":46,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[5,28],[5,87]],"newRange":[[5,28],[5,84]],"oldText":"https://github.com/jordansissel/heroku-buildpack-meteor.git","newText":"https://github.com/AnasFullStack/heroku-buildpack-meteor"}},{"type":"change","content":{"oldRange":[[34,28],[34,87]],"newRange":[[34,28],[34,84]],"oldText":"https://github.com/jordansissel/heroku-buildpack-meteor.git","newText":"https://github.com/AnasFullStack/heroku-buildpack-meteor"}},{"type":"change","content":{"oldRange":[[40,24],[40,83]],"newRange":[[40,24],[40,80]],"oldText":"https://github.com/jordansissel/heroku-buildpack-meteor.git","newText":"https://github.com/AnasFullStack/heroku-buildpack-meteor"}},{"type":"group-end","snapshot":{"0":{"range":[[59,57],[59,57]],"properties":{"type":"selection","editorId":46,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/anas/projects/heroku-buildpack-meteor/README.md","digestWhenLastPersisted":"6d591a85901686fccb08191b5451a21b9af7bce5","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"scrollTop":714,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/anas/projects/heroku-buildpack-meteor/bin/common.sh","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/anas/projects/heroku-buildpack-meteor/bin/compile","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/anas/projects/heroku-buildpack-meteor/bin/compile_node","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":46,"softTabs":true,"displayBuffer":{"id":47,"softWrapped":true,"scrollTop":480,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/anas/projects/heroku-buildpack-meteor/README.md","tabLength":3,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/anas/projects/heroku-buildpack-meteor/README.md","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-shellscript","language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"local-history":{"localHistoryViewState":""},"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2015-10-13T12:59:56.593Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"8":{"id":8,"path":"/Users/anas/projects/heroku-buildpack-meteor/bin/common.sh","colorMarkers":[]},"12":{"id":12,"path":"/Users/anas/projects/heroku-buildpack-meteor/bin/compile","colorMarkers":[]},"16":{"id":16,"path":"/Users/anas/projects/heroku-buildpack-meteor/bin/compile_node","colorMarkers":[]},"46":{"id":46,"path":"/Users/anas/projects/heroku-buildpack-meteor/README.md","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"find-and-replace":{"findOptions":{"findPattern":"https://github.com/jordansissel/heroku-buildpack-meteor.git","replacePattern":"https://github.com/AnasFullStack/heroku-buildpack-meteor","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["https://github.com/jordansissel/heroku-buildpack-meteor.git"],"replaceHistory":["https://github.com/AnasFullStack/heroku-buildpack-meteor"],"pathsHistory":["https://github.com/AnasFullStack/heroku-buildpack-meteor"]},"fuzzy-finder":{"/Users/anas/projects/heroku-buildpack-meteor/bin/common.sh":1444735539838,"/Users/anas/projects/heroku-buildpack-meteor/bin/compile":1444735545909,"/Users/anas/projects/heroku-buildpack-meteor/bin/compile_node":1444735548370,"/Users/anas/projects/heroku-buildpack-meteor/README.md":1444735786090},"metrics":{"sessionLength":5670941},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/anas/projects/heroku-buildpack-meteor":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":true,"entries":{}},"vendor":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/anas/projects/heroku-buildpack-meteor/README.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}