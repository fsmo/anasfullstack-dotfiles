/*tslint:disable unused*/
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"/Users/anas/.atom/packages/atom-typescript/lib/typings/codemirror.d.ts","sources":["/Users/anas/.atom/packages/atom-typescript/lib/typings/codemirror.d.ts"],"names":[],"mappings":"AAAA,yBAAyB;AAg1BxB","sourcesContent":["/*tslint:disable unused*/\n\ndeclare function CodeMirror(host: HTMLElement, options?: CodeMirror.EditorConfiguration): CodeMirror.Editor;\ndeclare function CodeMirror(callback: (host: HTMLElement) => void , options?: CodeMirror.EditorConfiguration): CodeMirror.Editor;\n\ndeclare module CodeMirror {\n    \n    interface CodeMirrorStream {\n        eol(): boolean;\n        sol(): boolean;\n        peek(): string;\n        next(): string;\n        eat(match: string): string;\n        eat(match: RegExp): string;\n        eat(match: (char: string) => boolean): string;\n        eatWhile(match: string): string;\n        eatWhile(match: RegExp): string;\n        eatWhile(match: (char: string) => boolean): string;\n        eatSpace(): boolean;\n        skipToEnd(): void;\n        skipTo(ch: string): boolean;\n        match(pattern: string, consume?: boolean, caseFold?: boolean): boolean;\n        match(pattern: RegExp, consume?: boolean): string[];\n        backUp(n: number): void;\n        column(): number;\n        indentation(): number;\n        current(): string;\n    \n        pos: number;\n        string: string;\n    }\n    \n    interface CodeMirrorMode<T> {\n        token(stream: CodeMirrorStream, state: T): void;\n        \n        startState?: () => T;\n        blankLine?: (state: T) => void;\n        copyState?: (state: T) => T;\n        \n        indent?: (state: T, textAfter: string) => number;\n  \n        lineComment?: string;\n        blockCommentStart?: string;\n        blockCommentEnd?: string;\n        blockCommentLead?: string;\n    \n        electricChars?: string\n        \n    }\n    \n    \n    interface CodeMirrorModeOptions  {\n    \n    }\n    \n    interface CodeMirrorModeFactory<T> {\n        (options: CodeMirror.EditorConfiguration, spec: any): CodeMirrorMode<T>\n    }\n\n    function defineMode(id: string, modefactory: CodeMirrorModeFactory<any>): void;\n    function defineMIME(mime: string, modeId: string): void;\n    \n    var Pass: any;\n\n    function fromTextArea(host: HTMLTextAreaElement, options?: EditorConfiguration): CodeMirror.Editor;\n\n    var version: string;\n\n    /** If you want to define extra methods in terms of the CodeMirror API, it is possible to use defineExtension.\n    This will cause the given value(usually a method) to be added to all CodeMirror instances created from then on. */\n    function defineExtension(name: string, value: any): void;\n\n    /** Like defineExtension, but the method will be added to the interface for Doc objects instead. */\n    function defineDocExtension(name: string, value: any): void;\n\n    /** Similarly, defineOption can be used to define new options for CodeMirror.\n    The updateFunc will be called with the editor instance and the new value when an editor is initialized,\n    and whenever the option is modified through setOption. */\n    function defineOption(name: string, default_: any, updateFunc: Function): void;\n\n    /** If your extention just needs to run some code whenever a CodeMirror instance is initialized, use CodeMirror.defineInitHook.\n    Give it a function as its only argument, and from then on, that function will be called (with the instance as argument)\n    whenever a new CodeMirror instance is initialized. */\n    function defineInitHook(func: Function): void;\n\n\n\n    function on(element: any, eventName: string, handler: Function): void;\n    function off(element: any, eventName: string, handler: Function): void;\n\n    /** Fired whenever a change occurs to the document. changeObj has a similar type as the object passed to the editor's \"change\" event,\n    but it never has a next property, because document change events are not batched (whereas editor change events are). */\n    function on(doc: Doc, eventName: 'change', handler: (instance: Doc, change: EditorChange) => void ): void;\n    function off(doc: Doc, eventName: 'change', handler: (instance: Doc, change: EditorChange) => void ): void;\n\n    /** See the description of the same event on editor instances. */\n    function on(doc: Doc, eventName: 'beforeChange', handler: (instance: Doc, change: EditorChangeCancellable) => void ): void;\n    function off(doc: Doc, eventName: 'beforeChange', handler: (instance: Doc, change: EditorChangeCancellable) => void ): void;\n\n    /** Fired whenever the cursor or selection in this document changes. */\n    function on(doc: Doc, eventName: 'cursorActivity', handler: (instance: CodeMirror.Editor) => void ): void;\n    function off(doc: Doc, eventName: 'cursorActivity', handler: (instance: CodeMirror.Editor) => void ): void;\n\n    /** Equivalent to the event by the same name as fired on editor instances. */\n    function on(doc: Doc, eventName: 'beforeSelectionChange', \n        handler: (instance: CodeMirror.Editor, selection: { head: Position; anchor: Position; }) => void ): void;\n    function off(doc: Doc, eventName: 'beforeSelectionChange', \n        handler: (instance: CodeMirror.Editor, selection: { head: Position; anchor: Position; }) => void ): void;\n\n    /** Will be fired when the line object is deleted. A line object is associated with the start of the line.\n    Mostly useful when you need to find out when your gutter markers on a given line are removed. */\n    function on(line: LineHandle, eventName: 'delete', handler: () => void ): void;\n    function off(line: LineHandle, eventName: 'delete', handler: () => void ): void;\n\n    /** Fires when the line's text content is changed in any way (but the line is not deleted outright).\n    The change object is similar to the one passed to change event on the editor object. */\n    function on(line: LineHandle, eventName: 'change', handler: (line: LineHandle, change: EditorChange) => void ): void;\n    function off(line: LineHandle, eventName: 'change', handler: (line: LineHandle, change: EditorChange) => void ): void;\n\n    /** Fired when the cursor enters the marked range. From this event handler, the editor state may be inspected but not modified,\n    with the exception that the range on which the event fires may be cleared. */\n    function on(marker: TextMarker, eventName: 'beforeCursorEnter', handler: () => void ): void;\n    function off(marker: TextMarker, eventName: 'beforeCursorEnter', handler: () => void ): void;\n\n    /** Fired when the range is cleared, either through cursor movement in combination with clearOnEnter or \n     * through a call to its clear() method.\n     * Will only be fired once per handle. Note that deleting the range through text editing does not fire this event,\n     * because an undo action might bring the range back into existence. \n     */\n    function on(marker: TextMarker, eventName: 'clear', handler: () => void ): void;\n    function off(marker: TextMarker, eventName: 'clear', handler: () => void ): void;\n\n    /** Fired when the last part of the marker is removed from the document by editing operations. */\n    function on(marker: TextMarker, eventName: 'hide', handler: () => void ): void;\n    function off(marker: TextMarker, eventName: 'hide', handler: () => void ): void;\n\n    /** Fired when, after the marker was removed by editing, a undo operation brought the marker back. */\n    function on(marker: TextMarker, eventName: 'unhide', handler: () => void ): void;\n    function off(marker: TextMarker, eventName: 'unhide', handler: () => void ): void;\n\n    /** Fired whenever the editor re-adds the widget to the DOM. This will happen once right after the widget is added (if it is scrolled into view),\n    and then again whenever it is scrolled out of view and back in again, or when changes to the editor options\n    or the line the widget is on require the widget to be redrawn. */\n    function on(line: LineWidget, eventName: 'redraw', handler: () => void ): void;\n    function off(line: LineWidget, eventName: 'redraw', handler: () => void ): void;\n\n    interface Editor {\n    \n        /** Tells you whether the editor currently has focus. */\n        hasFocus(): boolean;\n    \n        /** Used to find the target position for horizontal cursor motion.start is a { line , ch } object,\n        amount an integer(may be negative), and unit one of the string \"char\", \"column\", or \"word\".\n        Will return a position that is produced by moving amount times the distance specified by unit.\n        When visually is true , motion in right - to - left text will be visual rather than logical.\n        When the motion was clipped by hitting the end or start of the document, the returned value will have a hitSide property set to true. */\n        findPosH(start: CodeMirror.Position, amount: number, unit: string, visually: boolean): { line: number; ch: number; hitSide?: boolean; };\n    \n        /** Similar to findPosH , but used for vertical motion.unit may be \"line\" or \"page\".\n        The other arguments and the returned value have the same interpretation as they have in findPosH. */\n        findPosV(start: CodeMirror.Position, amount: number, unit: string): { line: number; ch: number; hitSide?: boolean; };\n    \n    \n        /** Change the configuration of the editor. option should the name of an option, and value should be a valid value for that option. */\n        setOption(option: string, value: any): void;\n    \n        /** Retrieves the current value of the given option for this editor instance. */\n        getOption(option: string): any;\n    \n        /** Attach an additional keymap to the editor.\n        This is mostly useful for add - ons that need to register some key handlers without trampling on the extraKeys option.\n        Maps added in this way have a higher precedence than the extraKeys and keyMap options, and between them,\n        the maps added earlier have a lower precedence than those added later, unless the bottom argument was passed,\n        in which case they end up below other keymaps added with this method. */\n        addKeyMap(map: any, bottom?: boolean): void;\n    \n        /** Disable a keymap added with addKeyMap.Either pass in the keymap object itself , or a string,\n        which will be compared against the name property of the active keymaps. */\n        removeKeyMap(map: any): void;\n    \n        /** Enable a highlighting overlay.This is a stateless mini - mode that can be used to add extra highlighting.\n        For example, the search add - on uses it to highlight the term that's currently being searched.\n        mode can be a mode spec or a mode object (an object with a token method). The options parameter is optional. If given, it should be an object.\n        Currently, only the opaque option is recognized. This defaults to off, but can be given to allow the overlay styling, when not null,\n        to override the styling of the base mode entirely, instead of the two being applied together. */\n        addOverlay(mode: any, options?: any): void;\n    \n        /** Pass this the exact argument passed for the mode parameter to addOverlay to remove an overlay again. */\n        removeOverlay(mode: any): void;\n    \n    \n        /** Retrieve the currently active document from an editor. */\n        getDoc(): CodeMirror.Doc;\n    \n        /** Attach a new document to the editor. Returns the old document, which is now no longer associated with an editor. */\n        swapDoc(doc: CodeMirror.Doc): CodeMirror.Doc;\n    \n    \n    \n        /** Sets the gutter marker for the given gutter (identified by its CSS class, see the gutters option) to the given value.\n        Value can be either null, to clear the marker, or a DOM element, to set it. The DOM element will be shown in the specified gutter next to the specified line. */\n        setGutterMarker(line: any, gutterID: string, value: HTMLElement): CodeMirror.LineHandle;\n    \n        /** Remove all gutter markers in the gutter with the given ID. */\n        clearGutter(gutterID: string): void;\n    \n        /** Set a CSS class name for the given line.line can be a number or a line handle.\n        where determines to which element this class should be applied, can can be one of \"text\" (the text element, which lies in front of the selection),\n        \"background\"(a background element that will be behind the selection),\n        or \"wrap\" (the wrapper node that wraps all of the line's elements, including gutter elements).\n        class should be the name of the class to apply. */\n        addLineClass(line: any, where: string, _class_: string): CodeMirror.LineHandle;\n    \n        /** Remove a CSS class from a line.line can be a line handle or number.\n        where should be one of \"text\", \"background\", or \"wrap\"(see addLineClass).\n        class can be left off to remove all classes for the specified node, or be a string to remove only a specific class. */\n        removeLineClass(line: any, where: string, class_: string): CodeMirror.LineHandle;\n    \n        /** Returns the line number, text content, and marker status of the given line, which can be either a number or a line handle. */\n        lineInfo(line: any): {\n            line: any;\n            handle: any;\n            text: string;\n            /** Object mapping gutter IDs to marker elements. */\n            gutterMarks: any;\n            textClass: string;\n            bgClass: string;\n            wrapClass: string;\n            /** Array of line widgets attached to this line. */\n            widgets: any;\n        };\n    \n        /** Puts node, which should be an absolutely positioned DOM node, into the editor, positioned right below the given { line , ch } position.\n        When scrollIntoView is true, the editor will ensure that the entire node is visible (if possible).\n        To remove the widget again, simply use DOM methods (move it somewhere else, or call removeChild on its parent). */\n        addWidget(pos: CodeMirror.Position, node: HTMLElement, scrollIntoView: boolean):  void;\n    \n        /** Adds a line widget, an element shown below a line, spanning the whole of the editor's width, and moving the lines below it downwards.\n        line should be either an integer or a line handle, and node should be a DOM node, which will be displayed below the given line.\n        options, when given, should be an object that configures the behavior of the widget.\n        Note that the widget node will become a descendant of nodes with CodeMirror-specific CSS classes, and those classes might in some cases affect it. */\n        addLineWidget(line: any, node: HTMLElement, options?: {\n            /** Whether the widget should cover the gutter. */\n            coverGutter: boolean;\n            /** Whether the widget should stay fixed in the face of horizontal scrolling. */\n            noHScroll: boolean;\n            /** Causes the widget to be placed above instead of below the text of the line. */\n            above: boolean;\n            /** When true, will cause the widget to be rendered even if the line it is associated with is hidden. */\n            showIfHidden: boolean;\n        }): CodeMirror.LineWidget;\n    \n    \n        /** Programatically set the size of the editor (overriding the applicable CSS rules).\n        width and height height can be either numbers(interpreted as pixels) or CSS units (\"100%\", for example).\n        You can pass null for either of them to indicate that that dimension should not be changed. */\n        setSize(width: any, height: any):  void;\n    \n        /** Scroll the editor to a given(pixel) position.Both arguments may be left as null or undefined to have no effect. */\n        scrollTo(x: number, y: number):  void;\n    \n        /** Get an { left , top , width , height , clientWidth , clientHeight } object that represents the current scroll position, the size of the scrollable area,\n        and the size of the visible area(minus scrollbars). */\n        getScrollInfo(): {\n            left: any;\n            top: any;\n            width: any;\n            height: any;\n            clientWidth: any;\n            clientHeight: any;\n        };\n    \n        /** Scrolls the given element into view. pos is a { line , ch } position, referring to a given character, null, to refer to the cursor.\n        The margin parameter is optional. When given, it indicates the amount of pixels around the given area that should be made visible as well. */\n        scrollIntoView(pos: CodeMirror.Position, margin?: number):  void;\n    \n        /** Scrolls the given element into view. pos is a { left , top , right , bottom } object, in editor-local coordinates.\n        The margin parameter is optional. When given, it indicates the amount of pixels around the given area that should be made visible as well. */\n        scrollIntoView(pos: { left: number; top: number; right: number; bottom: number; }, margin: number):  void;\n    \n        /** Returns an { left , top , bottom } object containing the coordinates of the cursor position.\n        If mode is \"local\" , they will be relative to the top-left corner of the editable document.\n        If it is \"page\" or not given, they are relative to the top-left corner of the page.\n        where is a boolean indicating whether you want the start(true) or the end(false) of the selection. */\n        cursorCoords(where: boolean, mode: string): { left: number; top: number; bottom: number; };\n    \n        /** Returns an { left , top , bottom } object containing the coordinates of the cursor position.\n        If mode is \"local\" , they will be relative to the top-left corner of the editable document.\n        If it is \"page\" or not given, they are relative to the top-left corner of the page.\n        where specifies the precise position at which you want to measure. */\n        cursorCoords(where: CodeMirror.Position, mode: string): { left: number; top: number; bottom: number; };\n    \n        /** Returns the position and dimensions of an arbitrary character.pos should be a { line , ch } object.\n        This differs from cursorCoords in that it'll give the size of the whole character,\n        rather than just the position that the cursor would have when it would sit at that position. */\n        charCoords(pos: CodeMirror.Position, mode: string): { left: number; right: number; top: number; bottom: number; };\n    \n        /** Given an { left , top } object , returns the { line , ch } position that corresponds to it.\n        The optional mode parameter determines relative to what the coordinates are interpreted. It may be \"window\" , \"page\"(the default) , or \"local\". */\n        coordsChar(object: { left: number; top: number; }, mode?: string): CodeMirror.Position;\n    \n        /** Returns the line height of the default font for the editor. */\n        defaultTextHeight(): number;\n    \n        /** Returns the pixel width of an 'x' in the default font for the editor.\n        (Note that for non - monospace fonts , this is mostly useless, and even for monospace fonts, non - ascii characters might have a different width). */\n        defaultCharWidth(): number;\n    \n        /** Returns a { from , to } object indicating the start (inclusive) and end (exclusive) of the currently rendered part of the document.\n        In big documents, when most content is scrolled out of view, CodeMirror will only render the visible part, and a margin around it.\n        See also the viewportChange event. */\n        getViewport(): { from: number; to: number };\n    \n        /** If your code does something to change the size of the editor element (window resizes are already listened for), or unhides it,\n        you should probably follow up by calling this method to ensure CodeMirror is still looking as intended. */\n        refresh():  void;\n    \n    \n        /** Retrieves information about the token the current mode found before the given position (a {line, ch} object). */\n        getTokenAt(pos: CodeMirror.Position): {\n            /** The character(on the given line) at which the token starts. */\n            start: number;\n            /** The character at which the token ends. */\n            end: number;\n            /** The token's string. */\n            string: string;\n            /** The token type the mode assigned to the token, such as \"keyword\" or \"comment\" (may also be null). */\n            type: string;\n            /** The mode's state at the end of this token. */\n            state: any;            \n        };\n    \n        /** Returns the mode's parser state, if any, at the end of the given line number.\n        If no line number is given, the state at the end of the document is returned.\n        This can be useful for storing parsing errors in the state, or getting other kinds of contextual information for a line. */\n        getStateAfter(line?: number): any;\n    \n        /** CodeMirror internally buffers changes and only updates its DOM structure after it has finished performing some operation.\n        If you need to perform a lot of operations on a CodeMirror instance, you can call this method with a function argument.\n        It will call the function, buffering up all changes, and only doing the expensive update after the function returns.\n        This can be a lot faster. The return value from this method will be the return value of your function. */\n        operation<T>(fn: ()=> T): T;\n    \n        /** Adjust the indentation of the given line.\n        The second argument (which defaults to \"smart\") may be one of:\n        \"prev\" Base indentation on the indentation of the previous line.\n        \"smart\" Use the mode's smart indentation if available, behave like \"prev\" otherwise.\n        \"add\" Increase the indentation of the line by one indent unit.\n        \"subtract\" Reduce the indentation of the line. */\n        indentLine(line: number, dir?: string):  void;\n    \n    \n        /** Give the editor focus. */\n        focus():  void;\n    \n        /** Returns the hidden textarea used to read input. */\n        getInputField(): HTMLTextAreaElement;\n    \n        /** Returns the DOM node that represents the editor, and controls its size. Remove this from your tree to delete an editor instance. */\n        getWrapperElement(): HTMLElement;\n    \n        /** Returns the DOM node that is responsible for the scrolling of the editor. */\n        getScrollerElement(): HTMLElement;\n    \n        /** Fetches the DOM node that contains the editor gutters. */\n        getGutterElement(): HTMLElement;\n    \n    \n    \n        /** Events are registered with the on method (and removed with the off method).\n        These are the events that fire on the instance object. The name of the event is followed by the arguments that will be passed to the handler.\n        The instance argument always refers to the editor instance. */\n        on(eventName: string, handler: (instance: CodeMirror.Editor) => void ):  void;\n        off(eventName: string, handler: (instance: CodeMirror.Editor) => void ):  void;\n    \n        /** Fires every time the content of the editor is changed. */\n        on(eventName: 'change', handler: (instance: CodeMirror.Editor, change: CodeMirror.EditorChangeLinkedList) => void ):  void;\n        off(eventName: 'change', handler: (instance: CodeMirror.Editor, change: CodeMirror.EditorChangeLinkedList) => void ):  void;\n    \n        /** This event is fired before a change is applied, and its handler may choose to modify or cancel the change.\n        The changeObj never has a next property, since this is fired for each individual change, and not batched per operation.\n        Note: you may not do anything from a \"beforeChange\" handler that would cause changes to the document or its visualization.\n        Doing so will, since this handler is called directly from the bowels of the CodeMirror implementation,\n        probably cause the editor to become corrupted. */\n        on(eventName: 'beforeChange', handler: (instance: CodeMirror.Editor, change: CodeMirror.EditorChangeCancellable) => void ):  void;\n        off(eventName: 'beforeChange', handler: (instance: CodeMirror.Editor, change: CodeMirror.EditorChangeCancellable) => void ):  void;\n    \n        /** Will be fired when the cursor or selection moves, or any change is made to the editor content. */\n        on(eventName: 'cursorActivity', handler: (instance: CodeMirror.Editor) => void ):  void;\n        off(eventName: 'cursorActivity', handler: (instance: CodeMirror.Editor) => void ):  void;\n    \n        /** This event is fired before the selection is moved. Its handler may modify the resulting selection head and anchor.\n        Handlers for this event have the same restriction as \"beforeChange\" handlers � they should not do anything to directly update the state of the editor. */\n        on(eventName: 'beforeSelectionChange', handler: (instance: CodeMirror.Editor, selection: { head: CodeMirror.Position; anchor: CodeMirror.Position; }) => void ):  void;\n        off(eventName: 'beforeSelectionChange', handler: (instance: CodeMirror.Editor, selection: { head: CodeMirror.Position; anchor: CodeMirror.Position; }) => void ):  void;\n    \n        /** Fires whenever the view port of the editor changes (due to scrolling, editing, or any other factor).\n        The from and to arguments give the new start and end of the viewport. */\n        on(eventName: 'viewportChange', handler: (instance: CodeMirror.Editor, from: number, to: number) => void ):  void;\n        off(eventName: 'viewportChange', handler: (instance: CodeMirror.Editor, from: number, to: number) => void ):  void;\n    \n        /** Fires when the editor gutter (the line-number area) is clicked. Will pass the editor instance as first argument,\n        the (zero-based) number of the line that was clicked as second argument, the CSS class of the gutter that was clicked as third argument,\n        and the raw mousedown event object as fourth argument. */\n        on(eventName: 'gutterClick', handler: (instance: CodeMirror.Editor, line: number, gutter: string, clickEvent: Event) => void ):  void;\n        off(eventName: 'gutterClick', handler: (instance: CodeMirror.Editor, line: number, gutter: string, clickEvent: Event) => void ):  void;\n    \n        /** Fires whenever the editor is focused. */\n        on(eventName: 'focus', handler: (instance: CodeMirror.Editor) => void ):  void;\n        off(eventName: 'focus', handler: (instance: CodeMirror.Editor) => void ):  void;\n    \n        /** Fires whenever the editor is unfocused. */\n        on(eventName: 'blur', handler: (instance: CodeMirror.Editor) => void ):  void;\n        off(eventName: 'blur', handler: (instance: CodeMirror.Editor) => void ):  void;\n    \n        /** Fires when the editor is scrolled. */\n        on(eventName: 'scroll', handler: (instance: CodeMirror.Editor) => void ):  void;\n        off(eventName: 'scroll', handler: (instance: CodeMirror.Editor) => void ):  void;\n    \n        /** Will be fired whenever CodeMirror updates its DOM display. */\n        on(eventName: 'update', handler: (instance: CodeMirror.Editor) => void ):  void;\n        off(eventName: 'update', handler: (instance: CodeMirror.Editor) => void ):  void;\n    \n        /** Fired whenever a line is (re-)rendered to the DOM. Fired right after the DOM element is built, before it is added to the document.\n        The handler may mess with the style of the resulting element, or add event handlers, but should not try to change the state of the editor. */\n        on(eventName: 'renderLine', handler: (instance: CodeMirror.Editor, line: number, element: HTMLElement) => void ):  void;\n        off(eventName: 'renderLine', handler: (instance: CodeMirror.Editor, line: number, element: HTMLElement) => void ): void;\n    }\n\n    class Doc {\n        constructor (text: string, mode?: any, firstLineNumber?: number);\n\n        /** Get the current editor content. You can pass it an optional argument to specify the string to be used to separate lines (defaults to \"\\n\"). */\n        getValue(seperator?: string): string;\n\n        /** Set the editor content. */\n        setValue(content: string): void;\n\n        /** Get the text between the given points in the editor, which should be {line, ch} objects.\n        An optional third argument can be given to indicate the line separator string to use (defaults to \"\\n\"). */\n        getRange(from: Position, to: CodeMirror.Position, seperator?: string): string;\n\n        /** Replace the part of the document between from and to with the given string.\n        from and to must be {line, ch} objects. to can be left off to simply insert the string at position from. */\n        replaceRange(replacement: string, from: CodeMirror.Position, to: CodeMirror.Position): void;\n\n        /** Get the content of line n. */\n        getLine(n: number): string;\n\n        /** Set the content of line n. */\n        setLine(n: number, text: string): void;\n\n        /** Remove the given line from the document. */\n        removeLine(n: number): void;\n\n        /** Get the number of lines in the editor. */\n        lineCount(): number;\n\n        /** Get the first line of the editor. This will usually be zero but for linked sub-views,\n        or documents instantiated with a non-zero first line, it might return other values. */\n        firstLine(): number;\n\n        /** Get the last line of the editor. This will usually be lineCount() - 1, but for linked sub-views, it might return other values. */\n        lastLine(): number;\n\n        /** Fetches the line handle for the given line number. */\n        getLineHandle(num: number): CodeMirror.LineHandle;\n\n        /** Given a line handle, returns the current position of that line (or null when it is no longer in the document). */\n        getLineNumber(handle: CodeMirror.LineHandle): number;\n\n        /** Iterate over the whole document, and call f for each line, passing the line handle.\n        This is a faster way to visit a range of line handlers than calling getLineHandle for each of them.\n        Note that line handles have a text property containing the line's content (as a string). */\n        eachLine(f: (line: CodeMirror.LineHandle) => void ): void;\n\n        /** Iterate over the range from start up to (not including) end, and call f for each line, passing the line handle.\n        This is a faster way to visit a range of line handlers than calling getLineHandle for each of them.\n        Note that line handles have a text property containing the line's content (as a string). */\n        eachLine(start: number, end: number, f: (line: CodeMirror.LineHandle) => void ): void;\n\n        /** Set the editor content as 'clean', a flag that it will retain until it is edited, and which will be set again when such an edit is undone again.\n        Useful to track whether the content needs to be saved. */\n        markClean(): void;\n\n        /** Returns whether the document is currently clean (not modified since initialization or the last call to markClean). */\n        isClean(): boolean;\n\n\n\n        /** Get the currently selected code. */\n        getSelection(): string;\n\n        /** Replace the selection with the given string. By default, the new selection will span the inserted text.\n        The optional collapse argument can be used to change this � passing \"start\" or \"end\" will collapse the selection to the start or end of the inserted text. */\n        replaceSelection(replacement: string, collapse?: string): void;\n\n        /** start is a an optional string indicating which end of the selection to return.\n        It may be \"start\" , \"end\" , \"head\"(the side of the selection that moves when you press shift + arrow),\n        or \"anchor\"(the fixed side of the selection).Omitting the argument is the same as passing \"head\".A { line , ch } object will be returned. */\n        getCursor(start?: string): CodeMirror.Position;\n\n        /** Return true if any text is selected. */\n        somethingSelected(): boolean;\n\n        /** Set the cursor position.You can either pass a single { line , ch } object , or the line and the character as two separate parameters. */\n        setCursor(pos: CodeMirror.Position): void;\n\n        /** Set the selection range.anchor and head should be { line , ch } objects.head defaults to anchor when not given. */\n        setSelection(anchor: CodeMirror.Position, head: CodeMirror.Position): void;\n\n        /** Similar to setSelection , but will, if shift is held or the extending flag is set,\n        move the head of the selection while leaving the anchor at its current place.\n        pos2 is optional , and can be passed to ensure a region (for example a word or paragraph) will end up selected\n        (in addition to whatever lies between that region and the current anchor). */\n        extendSelection(from: CodeMirror.Position, to?: CodeMirror.Position): void;\n\n        /** Sets or clears the 'extending' flag , which acts similar to the shift key,\n        in that it will cause cursor movement and calls to extendSelection to leave the selection anchor in place. */\n        setExtending(value: boolean): void;\n\n\n        /** Retrieve the editor associated with a document. May return null. */\n        getEditor(): CodeMirror.Editor;\n\n\n        /** Create an identical copy of the given doc. When copyHistory is true , the history will also be copied.Can not be called directly on an editor. */\n        copy(copyHistory: boolean): CodeMirror.Doc;\n\n        /** Create a new document that's linked to the target document. Linked documents will stay in sync (changes to one are also applied to the other) until unlinked. */\n        linkedDoc(options: {\n            /** When turned on, the linked copy will share an undo history with the original.\n            Thus, something done in one of the two can be undone in the other, and vice versa. */\n            sharedHist?: boolean;\n            from?: number;\n            /** Can be given to make the new document a subview of the original. Subviews only show a given range of lines.\n            Note that line coordinates inside the subview will be consistent with those of the parent,\n            so that for example a subview starting at line 10 will refer to its first line as line 10, not 0. */\n            to?: number;\n            /** By default, the new document inherits the mode of the parent. This option can be set to a mode spec to give it a different mode. */\n            mode: any;\n        }): CodeMirror.Doc;\n\n        /** Break the link between two documents. After calling this , changes will no longer propagate between the documents,\n        and, if they had a shared history, the history will become separate. */\n        unlinkDoc(doc: CodeMirror.Doc): void;\n\n        /** Will call the given function for all documents linked to the target document. It will be passed two arguments,\n        the linked document and a boolean indicating whether that document shares history with the target. */\n        iterLinkedDocs(fn: (doc: CodeMirror.Doc, sharedHist: boolean) => void ): void;\n\n        /** Undo one edit (if any undo events are stored). */\n        undo(): void;\n\n        /** Redo one undone edit. */\n        redo(): void;\n\n        /** Returns an object with {undo, redo } properties , both of which hold integers , indicating the amount of stored undo and redo operations. */\n        historySize(): { undo: number; redo: number; };\n\n        /** Clears the editor's undo history. */\n        clearHistory(): void;\n\n        /** Get a(JSON - serializeable) representation of the undo history. */\n        getHistory(): any;\n\n        /** Replace the editor's undo history with the one provided, which must be a value as returned by getHistory.\n        Note that this will have entirely undefined results if the editor content isn't also the same as it was when getHistory was called. */\n        setHistory(history: any): void;\n\n\n        /** Can be used to mark a range of text with a specific CSS class name. from and to should be { line , ch } objects. */\n        markText(from: CodeMirror.Position, to: CodeMirror.Position, options?: CodeMirror.TextMarkerOptions): TextMarker;\n\n        /** Inserts a bookmark, a handle that follows the text around it as it is being edited, at the given position.\n        A bookmark has two methods find() and clear(). The first returns the current position of the bookmark, if it is still in the document,\n        and the second explicitly removes the bookmark. */\n        setBookmark(pos: CodeMirror.Position, options?: {\n            /** Can be used to display a DOM node at the current location of the bookmark (analogous to the replacedWith option to markText). */\n            widget?: HTMLElement;\n\n            /** By default, text typed when the cursor is on top of the bookmark will end up to the right of the bookmark.\n            Set this option to true to make it go to the left instead. */\n            insertLeft?: boolean;\n        }): CodeMirror.TextMarker;\n\n        /** Returns an array of all the bookmarks and marked ranges present at the given position. */\n        findMarksAt(pos: CodeMirror.Position): TextMarker[];\n        \n        /** Returns an array containing all marked ranges in the document. */\n        getAllMarks(): CodeMirror.TextMarker[];\n\n\n        /** Gets the mode object for the editor. Note that this is distinct from getOption(\"mode\"), which gives you the mode specification,\n        rather than the resolved, instantiated mode object. */\n        getMode(): any;\n\n        /** Calculates and returns a { line , ch } object for a zero-based index whose value is relative to the start of the editor's text.\n        If the index is out of range of the text then the returned object is clipped to start or end of the text respectively. */\n        posFromIndex(index: number): CodeMirror.Position;\n\n        /** The reverse of posFromIndex. */\n        indexFromPos(object: CodeMirror.Position): number;\n\n    }\n\n    interface LineHandle {\n        text: string;\n    }\n\n    interface TextMarker {\n        /** Remove the mark. */\n        clear(): void;\n\n        /** Returns a {from, to} object (both holding document positions), indicating the current position of the marked range,\n        or undefined if the marker is no longer in the document. */\n        find(): CodeMirror.Position;\n\n        /**  Returns an object representing the options for the marker. If copyWidget is given true, it will clone the value of the replacedWith option, if any. */\n        getOptions(copyWidget: boolean): CodeMirror.TextMarkerOptions;\n    }\n\n    interface LineWidget {\n        /** Removes the widget. */\n        clear(): void;\n\n        /** Call this if you made some change to the widget's DOM node that might affect its height.\n        It'll force CodeMirror to update the height of the line that contains the widget. */\n        changed(): void;\n    }\n\n    interface EditorChange {\n        /** Position (in the pre-change coordinate system) where the change started. */\n        from: CodeMirror.Position;\n        /** Position (in the pre-change coordinate system) where the change ended. */\n        to: CodeMirror.Position;\n        /** Array of strings representing the text that replaced the changed range (split by line). */\n        text: string[];\n        /**  Text that used to be between from and to, which is overwritten by this change. */\n        removed: string[];\n    }\n\n    interface EditorChangeLinkedList extends CodeMirror.EditorChange {\n        /** Points to another change object (which may point to another, etc). */\n        next?: CodeMirror.EditorChangeLinkedList;\n    }\n\n    interface EditorChangeCancellable extends CodeMirror.EditorChange {\n        /** may be used to modify the change. All three arguments to update are optional, and can be left off to leave the existing value for that field intact. */\n        update(from?: CodeMirror.Position, to?: CodeMirror.Position, text?: string): void;\n\n        cancel(): void;\n    }\n\n    interface Position {\n        ch: number;\n        line: number;\n    }\n\n    interface EditorConfiguration {\n        /** string| The starting value of the editor. Can be a string, or a document object. */\n        value?: any;\n\n        /** string|object. The mode to use. When not given, this will default to the first mode that was loaded.\n        It may be a string, which either simply names the mode or is a MIME type associated with the mode.\n        Alternatively, it may be an object containing configuration options for the mode,\n        with a name property that names the mode (for example {name: \"javascript\", json: true}). */\n        mode?: any;\n\n        /** The theme to style the editor with. You must make sure the CSS file defining the corresponding .cm-s-[name] styles is loaded.\n        The default is \"default\". */\n        theme?: string;\n\n        /** How many spaces a block (whatever that means in the edited language) should be indented. The default is 2. */\n        indentUnit?: number;\n\n        /** Whether to use the context-sensitive indentation that the mode provides (or just indent the same as the line before). Defaults to true. */\n        smartIndent?: boolean;\n\n        /** The width of a tab character. Defaults to 4. */\n        tabSize?: number;\n\n        /** Whether, when indenting, the first N*tabSize spaces should be replaced by N tabs. Default is false. */\n        indentWithTabs?: boolean;\n\n        /** Configures whether the editor should re-indent the current line when a character is typed\n        that might change its proper indentation (only works if the mode supports indentation). Default is true. */\n        electricChars?: boolean;\n        \n        /** Determines whether horizontal cursor movement through right-to-left (Arabic, Hebrew) text\n        is visual (pressing the left arrow moves the cursor left)\n        or logical (pressing the left arrow moves to the next lower index in the string, which is visually right in right-to-left text).\n        The default is false on Windows, and true on other platforms. */\n        rtlMoveVisually?: boolean;\n\n        /** Configures the keymap to use. The default is \"default\", which is the only keymap defined in codemirror.js itself.\n        Extra keymaps are found in the keymap directory. See the section on keymaps for more information. */\n        keyMap?: string;\n        \n        /** Can be used to specify extra keybindings for the editor, alongside the ones defined by keyMap. Should be either null, or a valid keymap value. */\n        extraKeys?: any;\n        \n        /** Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll). */\n        lineWrapping?: boolean;\n        \n        /** Whether to show line numbers to the left of the editor. */\n        lineNumbers?: boolean;\n        \n        /** At which number to start counting lines. Default is 1. */\n        firstLineNumber?: number;\n\n        /** A function used to format line numbers. The function is passed the line number, and should return a string that will be shown in the gutter. */\n        lineNumberFormatter?: (line: number) => string;\n\n        /** Can be used to add extra gutters (beyond or instead of the line number gutter).\n        Should be an array of CSS class names, each of which defines a width (and optionally a background),\n        and which will be used to draw the background of the gutters.\n        May include the CodeMirror-linenumbers class, in order to explicitly set the position of the line number gutter\n        (it will default to be to the right of all other gutters). These class names are the keys passed to setGutterMarker. */\n        gutters?: string[];\n        \n        /** Determines whether the gutter scrolls along with the content horizontally (false)\n        or whether it stays fixed during horizontal scrolling (true, the default). */\n        fixedGutter?: boolean;\n        \n        /** boolean|string. This disables editing of the editor content by the user. If the special value \"nocursor\" is given (instead of simply true), focusing of the editor is also disallowed. */\n        readOnly?: any;\n        \n        /**Whether the cursor should be drawn when a selection is active. Defaults to false. */\n        showCursorWhenSelecting?: boolean;\n        \n        /** The maximum number of undo levels that the editor stores. Defaults to 40. */\n        undoDepth?: number;\n        \n        /** The period of inactivity (in milliseconds) that will cause a new history event to be started when typing or deleting. Defaults to 500. */\n        historyEventDelay?: number;\n        \n        /** The tab index to assign to the editor. If not given, no tab index will be assigned. */\n        tabindex?: number;\n\n        /** Can be used to make CodeMirror focus itself on initialization. Defaults to off.\n        When fromTextArea is used, and no explicit value is given for this option, it will be set to true when either the source textarea is focused,\n        or it has an autofocus attribute and no other element is focused. */\n        autofocus?: boolean;\n\n        /** Controls whether drag-and - drop is enabled. On by default. */\n        dragDrop?: boolean;\n\n        /** When given , this will be called when the editor is handling a dragenter , dragover , or drop event.\n        It will be passed the editor instance and the event object as arguments.\n        The callback can choose to handle the event itself , in which case it should return true to indicate that CodeMirror should not do anything further. */\n        onDragEvent?: (instance: CodeMirror.Editor, event: Event) => boolean;\n\n        /** This provides a rather low - level hook into CodeMirror's key handling.\n        If provided, this function will be called on every keydown, keyup, and keypress event that CodeMirror captures.\n        It will be passed two arguments, the editor instance and the key event.\n        This key event is pretty much the raw key event, except that a stop() method is always added to it.\n        You could feed it to, for example, jQuery.Event to further normalize it.\n        This function can inspect the key event, and handle it if it wants to.\n        It may return true to tell CodeMirror to ignore the event.\n        Be wary that, on some browsers, stopping a keydown does not stop the keypress from firing, whereas on others it does.\n        If you respond to an event, you should probably inspect its type property and only do something when it is keydown\n        (or keypress for actions that need character data). */\n        onKeyEvent?: (instance: CodeMirror.Editor, event: Event) => boolean;\n\n        /** Half - period in milliseconds used for cursor blinking. The default blink rate is 530ms. */\n        cursorBlinkRate?: number;\n\n        /** Determines the height of the cursor. Default is 1 , meaning it spans the whole height of the line.\n        For some fonts (and by some tastes) a smaller height (for example 0.85),\n        which causes the cursor to not reach all the way to the bottom of the line, looks better */\n        cursorHeight?: number;\n\n        /** Highlighting is done by a pseudo background - thread that will work for workTime milliseconds,\n        and then use timeout to sleep for workDelay milliseconds.\n        The defaults are 200 and 300, you can change these options to make the highlighting more or less aggressive. */\n        workTime?: number;\n\n        /** See workTime. */\n        workDelay?: number;\n\n        /** Indicates how quickly CodeMirror should poll its input textarea for changes(when focused).\n        Most input is captured by events, but some things, like IME input on some browsers, don't generate events that allow CodeMirror to properly detect it.\n        Thus, it polls. Default is 100 milliseconds. */\n        pollInterval?: number;\n\n        /** By default, CodeMirror will combine adjacent tokens into a single span if they have the same class.\n        This will result in a simpler DOM tree, and thus perform better. With some kinds of styling(such as rounded corners),\n        this will change the way the document looks. You can set this option to false to disable this behavior. */\n        flattenSpans?: boolean;\n\n        /** When highlighting long lines, in order to stay responsive, the editor will give up and simply style\n        the rest of the line as plain text when it reaches a certain position. The default is 10000.\n        You can set this to Infinity to turn off this behavior. */\n        maxHighlightLength?: number;\n\n        /** Specifies the amount of lines that are rendered above and below the part of the document that's currently scrolled into view.\n        This affects the amount of updates needed when scrolling, and the amount of work that such an update does.\n        You should usually leave it at its default, 10. Can be set to Infinity to make sure the whole document is always rendered,\n        and thus the browser's text search works on it. This will have bad effects on performance of big documents. */\n        viewportMargin?: number;\n    }\n\n    interface TextMarkerOptions {\n        /** Assigns a CSS class to the marked stretch of text. */\n        className?: string;\n        \n        /** Determines whether text inserted on the left of the marker will end up inside or outside of it. */\n        inclusiveLeft?: boolean;\n        \n        /** Like inclusiveLeft , but for the right side. */\n        inclusiveRight?: boolean;\n        \n        /** Atomic ranges act as a single unit when cursor movement is concerned � i.e. it is impossible to place the cursor inside of them.\n        In atomic ranges, inclusiveLeft and inclusiveRight have a different meaning � they will prevent the cursor from being placed\n        respectively directly before and directly after the range. */\n        atomic?: boolean;\n        \n        /** Collapsed ranges do not show up in the display.Setting a range to be collapsed will automatically make it atomic. */\n        collapsed?: boolean;\n        \n        /** When enabled, will cause the mark to clear itself whenever the cursor enters its range.\n        This is mostly useful for text - replacement widgets that need to 'snap open' when the user tries to edit them.\n        The \"clear\" event fired on the range handle can be used to be notified when this happens. */\n        clearOnEnter?: boolean;\n        \n        /** Use a given node to display this range.Implies both collapsed and atomic.\n        The given DOM node must be an inline element(as opposed to a block element). */\n        replacedWith?: HTMLElement;\n        \n        /** A read - only span can, as long as it is not cleared, not be modified except by calling setValue to reset the whole document.\n        Note: adding a read - only span currently clears the undo history of the editor,\n        because existing undo events being partially nullified by read - only spans would corrupt the history (in the current implementation). */\n        readOnly?: boolean;\n        \n        /** When set to true (default is false), adding this marker will create an event in the undo history that can be individually undone(clearing the marker). */\n        addToHistory?: boolean;\n        \n        /** Can be used to specify an extra CSS class to be applied to the leftmost span that is part of the marker. */\n        startStyle?: string;\n        \n        /** Equivalent to startStyle, but for the rightmost span. */\n        endStyle?: string;\n        \n        /** When the target document is linked to other documents, you can set shared to true to make the marker appear in all documents.\n        By default, a marker appears only in its target document. */\n        shared?: boolean;\n    }\n}\n"]}
//# sourceURL=/Users/anas/.atom/packages/atom-typescript/lib/typings/codemirror.d.ts
