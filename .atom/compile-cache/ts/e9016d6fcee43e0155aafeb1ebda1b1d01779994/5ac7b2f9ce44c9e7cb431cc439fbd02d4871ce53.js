/// Not useful for user input validation
// But great for simple config validation 
// works only by "n" valid options
exports.types = {
    string: 'string',
    boolean: 'boolean',
    number: 'number'
};
var SimpleValidator = (function () {
    function SimpleValidator(validationInfo) {
        var _this = this;
        this.validationInfo = validationInfo;
        this.potentialLowerCaseMatch = {};
        Object.keys(validationInfo).forEach(function (k) { return _this.potentialLowerCaseMatch[k.toLowerCase()] = k; });
    }
    SimpleValidator.prototype.validate = function (config) {
        var _this = this;
        var keys = Object.keys(config);
        var errors = { invalidValues: [], extraKeys: [], errorMessage: '' };
        keys.forEach(function (k) {
            // Check extra keys
            if (!_this.validationInfo[k]) {
                if (_this.potentialLowerCaseMatch[k]) {
                    errors.extraKeys.push("Key: '" + k + "' is a potential lower case match for '" + _this.potentialLowerCaseMatch[k] + "'. Fix the casing.");
                }
                else {
                    errors.extraKeys.push("Unknown Option: " + k);
                }
            }
            else {
                var validationInfo = _this.validationInfo[k];
                var value = config[k];
                if (validationInfo.validValues && validationInfo.validValues.length) {
                    var validValues = validationInfo.validValues;
                    if (!validValues.some(function (valid) { return valid.toLowerCase() === value.toLowerCase(); })) {
                        errors.invalidValues.push("Key: '" + k + "' has an invalid value: " + value);
                    }
                }
                if (validationInfo.type && typeof value !== validationInfo.type) {
                    errors.invalidValues.push("Key: '" + k + "' has an invalid type: " + typeof value);
                }
            }
        });
        var total = errors.invalidValues.concat(errors.extraKeys);
        if (total.length) {
            errors.errorMessage = total.join("\n");
        }
        return errors;
    };
    return SimpleValidator;
})();
exports.SimpleValidator = SimpleValidator;
function createMap(arr) {
    return arr.reduce(function (result, key) {
        result[key] = true;
        return result;
    }, {});
}
exports.createMap = createMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2FuYXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2xpYi9tYWluL3RzY29uZmlnL3NpbXBsZVZhbGlkYXRvci50cyIsInNvdXJjZXMiOlsiL1VzZXJzL2FuYXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2xpYi9tYWluL3RzY29uZmlnL3NpbXBsZVZhbGlkYXRvci50cyJdLCJuYW1lcyI6WyJTaW1wbGVWYWxpZGF0b3IiLCJTaW1wbGVWYWxpZGF0b3IuY29uc3RydWN0b3IiLCJTaW1wbGVWYWxpZGF0b3IudmFsaWRhdGUiLCJjcmVhdGVNYXAiXSwibWFwcGluZ3MiOiJBQUFBLHdDQUF3QztBQUN4QywwQ0FBMEM7QUFDMUMsa0NBQWtDO0FBRXZCLGFBQUssR0FBRztJQUNmLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLE1BQU0sRUFBRSxRQUFRO0NBQ25CLENBQUE7QUFlRCxJQUFhLGVBQWU7SUFHeEJBLFNBSFNBLGVBQWVBLENBR0xBLGNBQThCQTtRQUhyREMsaUJBNENDQTtRQXpDc0JBLG1CQUFjQSxHQUFkQSxjQUFjQSxDQUFnQkE7UUFDN0NBLElBQUlBLENBQUNBLHVCQUF1QkEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDbENBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLFVBQUFBLENBQUNBLElBQUdBLE9BQUFBLEtBQUlBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBakRBLENBQWlEQSxDQUFDQSxDQUFDQTtJQUMvRkEsQ0FBQ0E7SUFFREQsa0NBQVFBLEdBQVJBLFVBQVNBLE1BQVdBO1FBQXBCRSxpQkFtQ0NBO1FBbENHQSxJQUFJQSxJQUFJQSxHQUFHQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUMvQkEsSUFBSUEsTUFBTUEsR0FB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Q0EsVUFBQ0EsTUFBa0NBLEVBQUVBLEdBQVdBO1FBQzlEQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNuQkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDbEJBLENBQUNBLEVBQThCQSxFQUFFQSxDQUFDQSxDQUFDQTtBQUN2Q0EsQ0FBQ0E7QUFMZSxpQkFBUyxHQUFULFNBS2YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyBOb3QgdXNlZnVsIGZvciB1c2VyIGlucHV0IHZhbGlkYXRpb25cbi8vIEJ1dCBncmVhdCBmb3Igc2ltcGxlIGNvbmZpZyB2YWxpZGF0aW9uIFxuLy8gd29ya3Mgb25seSBieSBcIm5cIiB2YWxpZCBvcHRpb25zXG5cbmV4cG9ydCB2YXIgdHlwZXMgPSB7XG4gICAgc3RyaW5nOiAnc3RyaW5nJyxcbiAgICBib29sZWFuOiAnYm9vbGVhbicsXG4gICAgbnVtYmVyOiAnbnVtYmVyJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25JbmZvIHtcbiAgICBbbmFtZTogc3RyaW5nXToge1xuICAgICAgICB2YWxpZFZhbHVlcz86IHN0cmluZ1tdO1xuICAgICAgICB0eXBlPzogc3RyaW5nO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvcnMge1xuICAgIGludmFsaWRWYWx1ZXM6IHN0cmluZ1tdO1xuICAgIGV4dHJhS2V5czogc3RyaW5nW107XG4gICAgZXJyb3JNZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVWYWxpZGF0b3Ige1xuXG4gICAgcHJpdmF0ZSBwb3RlbnRpYWxMb3dlckNhc2VNYXRjaDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsaWRhdGlvbkluZm86IFZhbGlkYXRpb25JbmZvKSB7XG4gICAgICAgIHRoaXMucG90ZW50aWFsTG93ZXJDYXNlTWF0Y2ggPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXModmFsaWRhdGlvbkluZm8pLmZvckVhY2goaz0+IHRoaXMucG90ZW50aWFsTG93ZXJDYXNlTWF0Y2hbay50b0xvd2VyQ2FzZSgpXSA9IGspO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKGNvbmZpZzogYW55KTogRXJyb3JzIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhjb25maWcpO1xuICAgICAgICB2YXIgZXJyb3JzID0geyBpbnZhbGlkVmFsdWVzOiBbXSwgZXh0cmFLZXlzOiBbXSwgZXJyb3JNZXNzYWdlOiAnJyB9O1xuICAgICAgICBrZXlzLmZvckVhY2goaz0+IHtcbiAgICAgICAgICAgIC8vIENoZWNrIGV4dHJhIGtleXNcbiAgICAgICAgICAgIGlmICghdGhpcy52YWxpZGF0aW9uSW5mb1trXSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvdGVudGlhbExvd2VyQ2FzZU1hdGNoW2tdKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5leHRyYUtleXMucHVzaChgS2V5OiAnJHtrfScgaXMgYSBwb3RlbnRpYWwgbG93ZXIgY2FzZSBtYXRjaCBmb3IgJyR7dGhpcy5wb3RlbnRpYWxMb3dlckNhc2VNYXRjaFtrXX0nLiBGaXggdGhlIGNhc2luZy5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5leHRyYUtleXMucHVzaChgVW5rbm93biBPcHRpb246ICR7a31gKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICAgIFxuICAgICAgICAgICAgLy8gRG8gdmFsaWRhdGlvblxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRpb25JbmZvID0gdGhpcy52YWxpZGF0aW9uSW5mb1trXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU6IGFueSA9IGNvbmZpZ1trXTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkluZm8udmFsaWRWYWx1ZXMgJiYgdmFsaWRhdGlvbkluZm8udmFsaWRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZFZhbHVlcyA9IHZhbGlkYXRpb25JbmZvLnZhbGlkVmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkVmFsdWVzLnNvbWUodmFsaWQgPT4gdmFsaWQudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5pbnZhbGlkVmFsdWVzLnB1c2goYEtleTogJyR7a30nIGhhcyBhbiBpbnZhbGlkIHZhbHVlOiAke3ZhbHVlfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uSW5mby50eXBlICYmIHR5cGVvZiB2YWx1ZSAhPT0gdmFsaWRhdGlvbkluZm8udHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMuaW52YWxpZFZhbHVlcy5wdXNoKGBLZXk6ICcke2t9JyBoYXMgYW4gaW52YWxpZCB0eXBlOiAke3R5cGVvZiB2YWx1ZX1gKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHRvdGFsID0gZXJyb3JzLmludmFsaWRWYWx1ZXMuY29uY2F0KGVycm9ycy5leHRyYUtleXMpO1xuICAgICAgICBpZiAodG90YWwubGVuZ3RoKSB7XG4gICAgICAgICAgICBlcnJvcnMuZXJyb3JNZXNzYWdlID0gdG90YWwuam9pbihcIlxcblwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYXAoYXJyOiBzdHJpbmdbXSk6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9IHtcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgocmVzdWx0OiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIDx7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfT57fSk7XG59XG4iXX0=
//# sourceURL=/Users/anas/.atom/packages/atom-typescript/lib/main/tsconfig/simpleValidator.ts
