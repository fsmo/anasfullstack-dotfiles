var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var view = require('./view');
var $ = view.$;
var LineMessageView = (function (_super) {
    __extends(LineMessageView, _super);
    function LineMessageView() {
        _super.apply(this, arguments);
    }
    LineMessageView.content = function () {
        var _this = this;
        return this.div({
            class: 'line-message'
        }, function () {
            _this.div({
                class: 'text-subtle inline-block',
                outlet: 'position',
                click: 'goToLine',
                style: 'cursor: pointer;'
            });
            _this.div({
                class: 'message inline-block',
                outlet: 'contents'
            });
            _this.pre({
                class: 'preview',
                outlet: 'code',
                click: 'goToLine',
                style: 'cursor: pointer;'
            });
        });
    };
    LineMessageView.prototype.init = function () {
        var message = 'at line ' + this.options.line;
        if (this.options.file !== undefined) {
            message += ', file ' + this.options.file;
        }
        this.position.text(message);
        this.contents.text(this.options.message);
        if (this.options.preview) {
            this.code.text(this.options.preview);
        }
        else {
            this.code.remove();
        }
    };
    LineMessageView.prototype.goToLine = function () {
        this.options.goToLine(this.options.file, this.options.line, this.options.col);
    };
    LineMessageView.prototype.getSummary = function () {
        var pos = this.options.line.toString();
        if (this.options.file !== undefined) {
            pos += ', ' + this.options.file;
        }
        return {
            summary: pos + ' ' + this.options.message,
            rawSummary: true,
            handler: function (element) {
                $(element).css('cursor', 'pointer').click(this.goToLine.bind(this));
            }.bind(this)
        };
    };
    return LineMessageView;
})(view.View);
exports.LineMessageView = LineMessageView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2FuYXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2xpYi9tYWluL2F0b20vdmlld3MvbGluZU1lc3NhZ2VWaWV3LnRzIiwic291cmNlcyI6WyIvVXNlcnMvYW5hcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vYXRvbS92aWV3cy9saW5lTWVzc2FnZVZpZXcudHMiXSwibmFtZXMiOlsiTGluZU1lc3NhZ2VWaWV3IiwiTGluZU1lc3NhZ2VWaWV3LmNvbnN0cnVjdG9yIiwiTGluZU1lc3NhZ2VWaWV3LmNvbnRlbnQiLCJMaW5lTWVzc2FnZVZpZXcuaW5pdCIsIkxpbmVNZXNzYWdlVmlldy5nb1RvTGluZSIsIkxpbmVNZXNzYWdlVmlldy5nZXRTdW1tYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLElBQUksV0FBVyxRQUFRLENBQUMsQ0FBQztBQUNoQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBb0JmLElBQWEsZUFBZTtJQUFTQSxVQUF4QkEsZUFBZUEsVUFBK0JBO0lBQTNEQSxTQUFhQSxlQUFlQTtRQUFTQyw4QkFBc0JBO0lBa0UzREEsQ0FBQ0E7SUE1RFVELHVCQUFPQSxHQUFkQTtRQUFBRSxpQkFzQkNBO1FBckJHQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQTtZQUNaQSxLQUFLQSxFQUFFQSxjQUFjQTtTQUN4QkEsRUFBRUE7WUFDQ0EsS0FBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7Z0JBQ0xBLEtBQUtBLEVBQUVBLDBCQUEwQkE7Z0JBQ2pDQSxNQUFNQSxFQUFFQSxVQUFVQTtnQkFDbEJBLEtBQUtBLEVBQUVBLFVBQVVBO2dCQUNqQkEsS0FBS0EsRUFBRUEsa0JBQWtCQTthQUM1QkEsQ0FBQ0EsQ0FBQ0E7WUFDSEEsS0FBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7Z0JBQ0xBLEtBQUtBLEVBQUVBLHNCQUFzQkE7Z0JBQzdCQSxNQUFNQSxFQUFFQSxVQUFVQTth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dycpO1xudmFyICQgPSB2aWV3LiQ7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuZXhwb3J0IGludGVyZmFjZSBWaWV3T3B0aW9ucyB7XG4gICAgLyoqIFRoaXMgaXMgbmVlZGVkIHRvIHN1cHBvcnQgZ29vZCBnb3RvIG5leHQgLyBnb3RvIHByZXZpb3VzIGxvZ2ljXG4gICAgICogIFdlIGluZm9ybSB0aGUgcGFyZW50IGFib3V0IG91ciBuYXZpZ2F0aW9uXG4gICAgICovXG4gICAgZ29Ub0xpbmU6IChmaWxlUGF0aDogc3RyaW5nLCBsaW5lOiBudW1iZXIsIGNvbDogbnVtYmVyKSA9PiBhbnk7XG4gICAgLyoqIHlvdXIgbWVzc2FnZSB0byB0aGUgcGVvcGxlICovXG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIC8qKiB3aGF0IGxpbmUgYXJlIHdlIHRhbGtpbmcgYWJvdXQ/ICovXG4gICAgbGluZTogbnVtYmVyO1xuICAgIC8qKiB3aGljaCBjb2x1bW4gKi9cbiAgICBjb2w6IG51bWJlcjtcbiAgICAvKiogc28sIHdhcyB0aGF0IGluIHNvbWUgb3RoZXIgZmlsZT8gKi9cbiAgICBmaWxlOiBzdHJpbmc7XG4gICAgLyoqIGxldHMgeW91IGRpc3BsYXkgYSBjb2RlIHNuaXBwZXQgaW5zaWRlIGEgcHJlIHRhZyAqL1xuICAgIHByZXZpZXc6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIExpbmVNZXNzYWdlVmlldyBleHRlbmRzIHZpZXcuVmlldzxWaWV3T3B0aW9ucz4ge1xuXG4gICAgcHVibGljIGluZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBwb3NpdGlvbjogSlF1ZXJ5O1xuICAgIHByaXZhdGUgY29udGVudHM6IEpRdWVyeTtcbiAgICBwcml2YXRlIGNvZGU6IEpRdWVyeTtcbiAgICBzdGF0aWMgY29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGl2KHtcbiAgICAgICAgICAgIGNsYXNzOiAnbGluZS1tZXNzYWdlJ1xuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpdih7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICd0ZXh0LXN1YnRsZSBpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgICAgIG91dGxldDogJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAgICAgICBjbGljazogJ2dvVG9MaW5lJyxcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2N1cnNvcjogcG9pbnRlcjsnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZGl2KHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ21lc3NhZ2UgaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgICAgICBvdXRsZXQ6ICdjb250ZW50cydcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnByZSh7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdwcmV2aWV3JyxcbiAgICAgICAgICAgICAgICBvdXRsZXQ6ICdjb2RlJyxcbiAgICAgICAgICAgICAgICBjbGljazogJ2dvVG9MaW5lJyxcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2N1cnNvcjogcG9pbnRlcjsnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSAnYXQgbGluZSAnICsgdGhpcy5vcHRpb25zLmxpbmU7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gJywgZmlsZSAnICsgdGhpcy5vcHRpb25zLmZpbGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3NpdGlvbi50ZXh0KG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmNvbnRlbnRzLnRleHQodGhpcy5vcHRpb25zLm1lc3NhZ2UpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJldmlldykge1xuICAgICAgICAgICAgdGhpcy5jb2RlLnRleHQodGhpcy5vcHRpb25zLnByZXZpZXcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb2RlLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ29Ub0xpbmUoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5nb1RvTGluZSh0aGlzLm9wdGlvbnMuZmlsZSwgdGhpcy5vcHRpb25zLmxpbmUsIHRoaXMub3B0aW9ucy5jb2wpO1xuICAgIH1cblxuICAgIGdldFN1bW1hcnkoKSB7XG4gICAgICAgIHZhciBwb3MgPSB0aGlzLm9wdGlvbnMubGluZS50b1N0cmluZygpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcG9zICs9ICcsICcgKyB0aGlzLm9wdGlvbnMuZmlsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VtbWFyeTogcG9zICsgJyAnICsgdGhpcy5vcHRpb25zLm1lc3NhZ2UsXG4gICAgICAgICAgICByYXdTdW1tYXJ5OiB0cnVlLFxuICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgLmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKVxuICAgICAgICAgICAgICAgICAgICAuY2xpY2sodGhpcy5nb1RvTGluZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICB9O1xuICAgIH1cblxufVxuIl19
//# sourceURL=/Users/anas/.atom/packages/atom-typescript/lib/main/atom/views/lineMessageView.ts
