// Type definitions for d3JS
// Project: http://d3js.org/
// Definitions by: Boris Yankov <https://github.com/borisyankov>
// Definitions: https://github.com/borisyankov/DefinitelyTyped
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2FuYXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2xpYi90eXBpbmdzL2QzL2QzLmQudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmFzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9saWIvdHlwaW5ncy9kMy9kMy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsZ0VBQWdFO0FBQ2hFLDhEQUE4RDtBQSszRzdEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVHlwZSBkZWZpbml0aW9ucyBmb3IgZDNKU1xuLy8gUHJvamVjdDogaHR0cDovL2QzanMub3JnL1xuLy8gRGVmaW5pdGlvbnMgYnk6IEJvcmlzIFlhbmtvdiA8aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzeWFua292PlxuLy8gRGVmaW5pdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9ib3Jpc3lhbmtvdi9EZWZpbml0ZWx5VHlwZWRcblxuZGVjbGFyZSBtb2R1bGUgRDMge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0b3JzIHtcbiAgICAgICAgLyoqXG4gICAgICAgICogU2VsZWN0IGFuIGVsZW1lbnQgZnJvbSB0aGUgY3VycmVudCBkb2N1bWVudFxuICAgICAgICAqL1xuICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBlbXB0eSBzZWxlY3Rpb25cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAoKTogX1NlbGVjdGlvbjxhbnk+O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFNlbGVjdHMgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzcGVjaWZpZWQgc2VsZWN0b3Igc3RyaW5nXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3Rpb24gU3RyaW5nIHRvIG1hdGNoXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKHNlbGVjdG9yOiBzdHJpbmcpOiBfU2VsZWN0aW9uPGFueT47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogU2VsZWN0cyB0aGUgc3BlY2lmaWVkIG5vZGVcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIGVsZW1lbnQgTm9kZSBlbGVtZW50IHRvIHNlbGVjdFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChlbGVtZW50OiBFdmVudFRhcmdldCk6IF9TZWxlY3Rpb248YW55PjtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgKiBTZWxlY3QgbXVsdGlwbGUgZWxlbWVudHMgZnJvbSB0aGUgY3VycmVudCBkb2N1bWVudFxuICAgICAgICAqL1xuICAgICAgICBzZWxlY3RBbGw6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBTZWxlY3RzIGFsbCBlbGVtZW50cyB0aGF0IG1hdGNoIHRoZSBzcGVjaWZpZWQgc2VsZWN0b3JcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIHNlbGVjdG9yIFNlbGVjdGlvbiBTdHJpbmcgdG8gbWF0Y2hcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAoc2VsZWN0b3I6IHN0cmluZyk6IF9TZWxlY3Rpb248YW55PjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBTZWxlY3RzIHRoZSBzcGVjaWZpZWQgYXJyYXkgb2YgZWxlbWVudHNcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIGVsZW1lbnRzIEFycmF5IG9mIG5vZGUgZWxlbWVudHMgdG8gc2VsZWN0XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKGVsZW1lbnRzOiBFdmVudFRhcmdldFtdKTogX1NlbGVjdGlvbjxhbnk+O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRDNFdmVudCBleHRlbmRzIEV2ZW50e1xuICAgICAgICBkeDogbnVtYmVyO1xuICAgICAgICBkeTogbnVtYmVyO1xuICAgICAgICBjbGllbnRYOiBudW1iZXI7XG4gICAgICAgIGNsaWVudFk6IG51bWJlcjtcbiAgICAgICAgdHJhbnNsYXRlOiBudW1iZXJbXTtcbiAgICAgICAgc2NhbGU6IG51bWJlcjtcbiAgICAgICAgc291cmNlRXZlbnQ6IEQzRXZlbnQ7XG4gICAgICAgIHg6IG51bWJlcjtcbiAgICAgICAgeTogbnVtYmVyO1xuICAgICAgICBrZXlDb2RlOiBudW1iZXI7XG4gICAgICAgIGFsdEtleTogYW55O1xuICAgICAgICB0eXBlOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBCYXNlIGV4dGVuZHMgU2VsZWN0b3JzIHtcbiAgICAgICAgLyoqXG4gICAgICAgICogQ3JlYXRlIGEgYmVoYXZpb3JcbiAgICAgICAgKi9cbiAgICAgICAgYmVoYXZpb3I6IEJlaGF2aW9yLkJlaGF2aW9yO1xuICAgICAgICAvKipcbiAgICAgICAgKiBBY2Nlc3MgdGhlIGN1cnJlbnQgdXNlciBldmVudCBmb3IgaW50ZXJhY3Rpb25cbiAgICAgICAgKi9cbiAgICAgICAgZXZlbnQ6IEQzRXZlbnQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogQ29tcGFyZSB0d28gdmFsdWVzIGZvciBzb3J0aW5nLlxuICAgICAgICAqIFJldHVybnMgLTEgaWYgYSBpcyBsZXNzIHRoYW4gYiwgb3IgMSBpZiBhIGlzIGdyZWF0ZXIgdGhhbiBiLCBvciAwXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYSBGaXJzdCB2YWx1ZVxuICAgICAgICAqIEBwYXJhbSBiIFNlY29uZCB2YWx1ZVxuICAgICAgICAqL1xuICAgICAgICBhc2NlbmRpbmc8VD4oYTogVCwgYjogVCk6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogQ29tcGFyZSB0d28gdmFsdWVzIGZvciBzb3J0aW5nLlxuICAgICAgICAqIFJldHVybnMgLTEgaWYgYSBpcyBncmVhdGVyIHRoYW4gYiwgb3IgMSBpZiBhIGlzIGxlc3MgdGhhbiBiLCBvciAwXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYSBGaXJzdCB2YWx1ZVxuICAgICAgICAqIEBwYXJhbSBiIFNlY29uZCB2YWx1ZVxuICAgICAgICAqL1xuICAgICAgICBkZXNjZW5kaW5nPFQ+KGE6IFQsIGI6IFQpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAqIEZpbmQgdGhlIG1pbmltdW0gdmFsdWUgaW4gYW4gYXJyYXlcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnIgQXJyYXkgdG8gc2VhcmNoXG4gICAgICAgICogQHBhcmFtIG1hcCBBY2NzZXNzb3IgZnVuY3Rpb25cbiAgICAgICAgKi9cbiAgICAgICAgbWluPFQsIFU+KGFycjogVFtdLCBtYXA6ICh2PzogVCwgaT86IG51bWJlcikgPT4gVSk6IFU7XG4gICAgICAgIC8qKlxuICAgICAgICAqIEZpbmQgdGhlIG1pbmltdW0gdmFsdWUgaW4gYW4gYXJyYXlcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnIgQXJyYXkgdG8gc2VhcmNoXG4gICAgICAgICovXG4gICAgICAgIG1pbjxUPihhcnI6IFRbXSk6IFQ7XG4gICAgICAgIC8qKlxuICAgICAgICAqIEZpbmQgdGhlIG1heGltdW0gdmFsdWUgaW4gYW4gYXJyYXlcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnIgQXJyYXkgdG8gc2VhcmNoXG4gICAgICAgICogQHBhcmFtIG1hcCBBY2NzZXNzb3IgZnVuY3Rpb25cbiAgICAgICAgKi9cbiAgICAgICAgbWF4PFQsIFU+KGFycjogVFtdLCBtYXA6ICh2PzogVCwgaT86IG51bWJlcikgPT4gVSk6IFU7XG4gICAgICAgIC8qKlxuICAgICAgICAqIEZpbmQgdGhlIG1heGltdW0gdmFsdWUgaW4gYW4gYXJyYXlcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnIgQXJyYXkgdG8gc2VhcmNoXG4gICAgICAgICovXG4gICAgICAgIG1heDxUPihhcnI6IFRbXSk6IFQ7XG4gICAgICAgIC8qKlxuICAgICAgICAqIEZpbmQgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWUgaW4gYW4gYXJyYXlcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnIgQXJyYXkgdG8gc2VhcmNoXG4gICAgICAgICogQHBhcmFtIG1hcCBBY2NzZXNzb3IgZnVuY3Rpb25cbiAgICAgICAgKi9cbiAgICAgICAgZXh0ZW50PFQsIFU+KGFycjogVFtdLCBtYXA6ICh2OiBUKSA9PiBVKTogVVtdO1xuICAgICAgICAvKipcbiAgICAgICAgKiBGaW5kIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlIGluIGFuIGFycmF5XG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYXJyIEFycmF5IHRvIHNlYXJjaFxuICAgICAgICAqL1xuICAgICAgICBleHRlbnQ8VD4oYXJyOiBUW10pOiBUW107XG4gICAgICAgIC8qKlxuICAgICAgICAqIENvbXB1dGUgdGhlIHN1bSBvZiBhbiBhcnJheSBvZiBudW1iZXJzXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYXJyIEFycmF5IHRvIHNlYXJjaFxuICAgICAgICAqIEBwYXJhbSBtYXAgQWNjc2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICovXG4gICAgICAgIHN1bTxUPihhcnI6IFRbXSwgbWFwOiAodjogVCkgPT4gbnVtYmVyKTogbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgKiBDb21wdXRlIHRoZSBzdW0gb2YgYW4gYXJyYXkgb2YgbnVtYmVyc1xuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIGFyciBBcnJheSB0byBzZWFyY2hcbiAgICAgICAgKi9cbiAgICAgICAgc3VtKGFycjogbnVtYmVyW10pOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAqIENvbXB1dGUgdGhlIGFyaXRobWV0aWMgbWVhbiBvZiBhbiBhcnJheSBvZiBudW1iZXJzXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYXJyIEFycmF5IHRvIHNlYXJjaFxuICAgICAgICAqIEBwYXJhbSBtYXAgQWNjc2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICovXG4gICAgICAgIG1lYW48VD4oYXJyOiBUW10sIG1hcDogKHY6IFQpID0+IG51bWJlcik6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogQ29tcHV0ZSB0aGUgYXJpdGhtZXRpYyBtZWFuIG9mIGFuIGFycmF5IG9mIG51bWJlcnNcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnIgQXJyYXkgdG8gc2VhcmNoXG4gICAgICAgICovXG4gICAgICAgIG1lYW4oYXJyOiBudW1iZXJbXSk6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogQ29tcHV0ZSB0aGUgbWVkaWFuIG9mIGFuIGFycmF5IG9mIG51bWJlcnMgKHRoZSAwLjUtcXVhbnRpbGUpLlxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIGFyciBBcnJheSB0byBzZWFyY2hcbiAgICAgICAgKiBAcGFyYW0gbWFwIEFjY3Nlc3NvciBmdW5jdGlvblxuICAgICAgICAqL1xuICAgICAgICBtZWRpYW48VD4oYXJyOiBUW10sIG1hcDogKHY6IFQpID0+IG51bWJlcik6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogQ29tcHV0ZSB0aGUgbWVkaWFuIG9mIGFuIGFycmF5IG9mIG51bWJlcnMgKHRoZSAwLjUtcXVhbnRpbGUpLlxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIGFyciBBcnJheSB0byBzZWFyY2hcbiAgICAgICAgKi9cbiAgICAgICAgbWVkaWFuKGFycjogbnVtYmVyW10pOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAqIENvbXB1dGUgYSBxdWFudGlsZSBmb3IgYSBzb3J0ZWQgYXJyYXkgb2YgbnVtYmVycy5cbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnIgQXJyYXkgdG8gc2VhcmNoXG4gICAgICAgICogQHBhcmFtIHAgVGhlIHF1YW50aWxlIHRvIHJldHVyblxuICAgICAgICAqL1xuICAgICAgICBxdWFudGlsZTogKGFycjogbnVtYmVyW10sIHA6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgKiBMb2NhdGUgdGhlIGluc2VydGlvbiBwb2ludCBmb3IgeCBpbiBhcnJheSB0byBtYWludGFpbiBzb3J0ZWQgb3JkZXJcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnIgQXJyYXkgdG8gc2VhcmNoXG4gICAgICAgICogQHBhcmFtIHggVmFsdWUgdG8gc2VhcmNoIGZvciBpbnNlcnRpb24gcG9pbnRcbiAgICAgICAgKiBAcGFyYW0gbG93IE1pbmltdW0gdmFsdWUgb2YgYXJyYXkgc3Vic2V0XG4gICAgICAgICogQHBhcmFtIGhpaGcgTWF4aW11bSB2YWx1ZSBvZiBhcnJheSBzdWJzZXRcbiAgICAgICAgKi9cbiAgICAgICAgYmlzZWN0PFQ+KGFycjogVFtdLCB4OiBULCBsb3c/OiBudW1iZXIsIGhpZ2g/OiBudW1iZXIpOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAqIExvY2F0ZSB0aGUgaW5zZXJ0aW9uIHBvaW50IGZvciB4IGluIGFycmF5IHRvIG1haW50YWluIHNvcnRlZCBvcmRlclxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIGFyciBBcnJheSB0byBzZWFyY2hcbiAgICAgICAgKiBAcGFyYW0geCBWYWx1ZSB0byBzZXJjaCBmb3IgaW5zZXJ0aW9uIHBvaW50XG4gICAgICAgICogQHBhcmFtIGxvdyBNaW5pbXVtIHZhbHVlIG9mIGFycmF5IHN1YnNldFxuICAgICAgICAqIEBwYXJhbSBoaWdoIE1heGltdW0gdmFsdWUgb2YgYXJyYXkgc3Vic2V0XG4gICAgICAgICovXG4gICAgICAgIGJpc2VjdExlZnQ8VD4oYXJyOiBUW10sIHg6IFQsIGxvdz86IG51bWJlciwgaGlnaD86IG51bWJlcik6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogTG9jYXRlIHRoZSBpbnNlcnRpb24gcG9pbnQgZm9yIHggaW4gYXJyYXkgdG8gbWFpbnRhaW4gc29ydGVkIG9yZGVyXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYXJyIEFycmF5IHRvIHNlYXJjaFxuICAgICAgICAqIEBwYXJhbSB4IFZhbHVlIHRvIHNlcmNoIGZvciBpbnNlcnRpb24gcG9pbnRcbiAgICAgICAgKiBAcGFyYW0gbG93IE1pbmltdW0gdmFsdWUgb2YgYXJyYXkgc3Vic2V0XG4gICAgICAgICogQHBhcmFtIGhpZ2ggTWF4aW11bSB2YWx1ZSBvZiBhcnJheSBzdWJzZXRcbiAgICAgICAgKi9cbiAgICAgICAgYmlzZWN0UmlnaHQ8VD4oYXJyOiBUW10sIHg6IFQsIGxvdz86IG51bWJlciwgaGlnaD86IG51bWJlcik6IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogQmlzZWN0IHVzaW5nIGFuIGFjY2Vzc29yLlxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIGFjY2Vzc29yIEFjY2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICovXG4gICAgICAgIGJpc2VjdG9yKGFjY2Vzc29yOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBhbnkpOiBhbnk7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFJhbmRvbWl6ZSB0aGUgb3JkZXIgb2YgYW4gYXJyYXkuXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYXJyIEFycmF5IHRvIHJhbmRvbWl6ZVxuICAgICAgICAqL1xuICAgICAgICBzaHVmZmxlPFQ+KGFycjogVFtdKTogVFtdO1xuICAgICAgICAvKipcbiAgICAgICAgKiBSZW9yZGVyIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFjY29yZGluZyB0byBhbiBhcnJheSBvZiBpbmRleGVzXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYXJyIEFycmF5IHRvIHJlb3JkZXJcbiAgICAgICAgKiBAcGFyYW0gaW5kZXhlcyBBcnJheSBjb250YWluaW5nIHRoZSBvcmRlciB0aGUgZWxlbWVudHMgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICAgICovXG4gICAgICAgIHBlcm11dGUoYXJyOiBhbnlbXSwgaW5kZXhlczogYW55W10pOiBhbnlbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICogVHJhbnNwb3NlIGEgdmFyaWFibGUgbnVtYmVyIG9mIGFycmF5cy5cbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBhcnJzIEFycmF5cyB0byB0cmFuc3Bvc2VcbiAgICAgICAgKi9cbiAgICAgICAgemlwKC4uLmFycnM6IGFueVtdKTogYW55W107XG4gICAgICAgIC8qKlxuICAgICAgICAqIFBhcnNlIHRoZSBnaXZlbiAyRCBhZmZpbmUgdHJhbnNmb3JtIHN0cmluZywgYXMgZGVmaW5lZCBieSBTVkcncyB0cmFuc2Zvcm0gYXR0cmlidXRlLlxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIGRlZmluaXRpb24gMkQgYWZmaW5lIHRyYW5zZm9ybSBzdHJpbmdcbiAgICAgICAgKi9cbiAgICAgICAgdHJhbnNmb3JtKGRlZmluaXRpb246IHN0cmluZyk6IGFueTtcbiAgICAgICAgLyoqXG4gICAgICAgICogVHJhbnNwb3NlIGFuIGFycmF5IG9mIGFycmF5cy5cbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBtYXRyaXggVHdvIGRpbWVuc2lvbmFsIGFycmF5IHRvIHRyYW5zcG9zZVxuICAgICAgICAqL1xuICAgICAgICB0cmFuc3Bvc2UobWF0cml4OiBhbnlbXSk6IGFueVtdO1xuICAgICAgICAvKipcbiAgICAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdHVwbGVzIG9mIGFkamFjZW50IHBhaXJzXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gYXJyIEFuIGFycmF5IGNvbnRhaW5pbmcgZW50cmllcyB0byBwYWlyXG4gICAgICAgICogQHJldHVybnMgYW55W11bXSBBbiBhcnJheSBvZiAyLWVsZW1lbnQgdHVwbGVzIGZvciBlYWNoIHBhaXJcbiAgICAgICAgKi9cbiAgICAgICAgcGFpcnMoYXJyOiBhbnlbXSk6IGFueVtdW107XG4gICAgICAgIC8qKlxuICAgICAgICAqIExpc3QgdGhlIGtleXMgb2YgYW4gYXNzb2NpYXRpdmUgYXJyYXkuXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gbWFwIEFycmF5IG9mIG9iamVjdHMgdG8gZ2V0IHRoZSBrZXkgdmFsdWVzIGZyb21cbiAgICAgICAgKi9cbiAgICAgICAga2V5cyhtYXA6IGFueSk6IHN0cmluZ1tdO1xuICAgICAgICAvKipcbiAgICAgICAgKiBMaXN0IHRoZSB2YWx1ZXMgb2YgYW4gYXNzb2NpYXRpdmUgYXJyYXkuXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gbWFwIEFycmF5IG9mIG9iamVjdHMgdG8gZ2V0IHRoZSB2YWx1ZXMgZnJvbVxuICAgICAgICAqL1xuICAgICAgICB2YWx1ZXMobWFwOiBhbnkpOiBhbnlbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICogTGlzdCB0aGUga2V5LXZhbHVlIGVudHJpZXMgb2YgYW4gYXNzb2NpYXRpdmUgYXJyYXkuXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gbWFwIEFycmF5IG9mIG9iamVjdHMgdG8gZ2V0IHRoZSBrZXktdmFsdWUgcGFpcnMgZnJvbVxuICAgICAgICAqL1xuICAgICAgICBlbnRyaWVzKG1hcDogYW55KTogYW55W107XG4gICAgICAgIC8qKlxuICAgICAgICAqIG1lcmdlIG11bHRpcGxlIGFycmF5cyBpbnRvIG9uZSBhcnJheVxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIG1hcCBBcnJheXMgdG8gbWVyZ2VcbiAgICAgICAgKi9cbiAgICAgICAgbWVyZ2UoLi4ubWFwOiBhbnlbXSk6IGFueVtdO1xuICAgICAgICAvKipcbiAgICAgICAgKiBHZW5lcmF0ZSBhIHJhbmdlIG9mIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICAqL1xuICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdlbmVyYXRlIGEgcmFuZ2Ugb2YgbnVtZXJpYyB2YWx1ZXMgZnJvbSAwLlxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBAcGFyYW0gc3RvcCBWYWx1ZSB0byBnZW5lcmF0ZSB0aGUgcmFuZ2UgdG9cbiAgICAgICAgICAgICogQHBhcmFtIHN0ZXAgU3RlcCBiZXR3ZWVuIGVhY2ggdmFsdWVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAoc3RvcDogbnVtYmVyLCBzdGVwPzogbnVtYmVyKTogbnVtYmVyW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2VuZXJhdGUgYSByYW5nZSBvZiBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIHN0YXJ0IFZhbHVlIHRvIHN0YXJ0XG4gICAgICAgICAgICAqIEBwYXJhbSBzdG9wIFZhbHVlIHRvIGdlbmVyYXRlIHRoZSByYW5nZSB0b1xuICAgICAgICAgICAgKiBAcGFyYW0gc3RlcCBTdGVwIGJldHdlZW4gZWFjaCB2YWx1ZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChzdGFydDogbnVtYmVyLCBzdG9wPzogbnVtYmVyLCBzdGVwPzogbnVtYmVyKTogbnVtYmVyW107XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAqIENyZWF0ZSBuZXcgbmVzdCBvcGVyYXRvclxuICAgICAgICAqL1xuICAgICAgICBuZXN0KCk6IE5lc3Q7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFJlcXVlc3QgYSByZXNvdXJjZSB1c2luZyBYTUxIdHRwUmVxdWVzdC5cbiAgICAgICAgKi9cbiAgICAgICAgeGhyOiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ3JlYXRlcyBhbiBhc3luY2hyb25vdXMgcmVxdWVzdCBmb3Igc3BlY2lmaWVkIHVybFxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBAcGFyYW0gdXJsIFVybCB0byByZXF1ZXN0XG4gICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBGdW5jdGlvbiB0byBpbnZva2Ugd2hlbiByZXNvdXJjZSBpcyBsb2FkZWQgb3IgdGhlIHJlcXVlc3QgZmFpbHNcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAodXJsOiBzdHJpbmcsIGNhbGxiYWNrPzogKHhocjogWE1MSHR0cFJlcXVlc3QpID0+IHZvaWQgKTogWGhyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENyZWF0ZXMgYW4gYXN5bmNocm9ub3VzIHJlcXVlc3QgZm9yIHNwZWNpZmllZCB1cmxcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIHVybCBVcmwgdG8gcmVxdWVzdFxuICAgICAgICAgICAgKiBAcGFyYW0gbWltZSBNSU1FIHR5cGUgdG8gcmVxdWVzdFxuICAgICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gcmVzb3VyY2UgaXMgbG9hZGVkIG9yIHRoZSByZXF1ZXN0IGZhaWxzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKHVybDogc3RyaW5nLCBtaW1lOiBzdHJpbmcsIGNhbGxiYWNrPzogKHhocjogWE1MSHR0cFJlcXVlc3QpID0+IHZvaWQgKTogWGhyO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgKiBSZXF1ZXN0IGEgdGV4dCBmaWxlXG4gICAgICAgICovXG4gICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBSZXF1ZXN0IGEgdGV4dCBmaWxlXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSB1cmwgVXJsIHRvIHJlcXVlc3RcbiAgICAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHJlc291cmNlIGlzIGxvYWRlZCBvciB0aGUgcmVxdWVzdCBmYWlsc1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICh1cmw6IHN0cmluZywgY2FsbGJhY2s/OiAocmVzcG9uc2U6IHN0cmluZykgPT4gdm9pZCApOiBYaHI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogUmVxdWVzdCBhIHRleHQgZmlsZVxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBAcGFyYW0gdXJsIFVybCB0byByZXF1ZXN0XG4gICAgICAgICAgICAqIEBwYXJhbSBtaW1lIE1JTUUgdHlwZSB0byByZXF1ZXN0XG4gICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBGdW5jdGlvbiB0byBpbnZva2Ugd2hlbiByZXNvdXJjZSBpcyBsb2FkZWQgb3IgdGhlIHJlcXVlc3QgZmFpbHNcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAodXJsOiBzdHJpbmcsIG1pbWU6IHN0cmluZywgY2FsbGJhY2s/OiAocmVzcG9uc2U6IHN0cmluZykgPT4gdm9pZCApOiBYaHI7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAqIFJlcXVlc3QgYSBKU09OIGJsb2JcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSB1cmwgVXJsIHRvIHJlcXVlc3RcbiAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gcmVzb3VyY2UgaXMgbG9hZGVkIG9yIHRoZSByZXF1ZXN0IGZhaWxzXG4gICAgICAgICovXG4gICAgICAgIGpzb246ICh1cmw6IHN0cmluZywgY2FsbGJhY2s/OiAoZXJyb3I6IGFueSwgZGF0YTogYW55KSA9PiB2b2lkICkgPT4gWGhyO1xuICAgICAgICAvKipcbiAgICAgICAgKiBSZXF1ZXN0IGFuIEhUTUwgZG9jdW1lbnQgZnJhZ21lbnQuXG4gICAgICAgICovXG4gICAgICAgIHhtbDoge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFJlcXVlc3QgYW4gSFRNTCBkb2N1bWVudCBmcmFnbWVudC5cbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIHVybCBVcmwgdG8gcmVxdWVzdFxuICAgICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gcmVzb3VyY2UgaXMgbG9hZGVkIG9yIHRoZSByZXF1ZXN0IGZhaWxzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKHVybDogc3RyaW5nLCBjYWxsYmFjaz86IChyZXNwb25zZTogRG9jdW1lbnQpID0+IHZvaWQgKTogWGhyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFJlcXVlc3QgYW4gSFRNTCBkb2N1bWVudCBmcmFnbWVudC5cbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIHVybCBVcmwgdG8gcmVxdWVzdFxuICAgICAgICAgICAgKiBAcGFyYW0gbWltZSBNSU1FIHR5cGUgdG8gcmVxdWVzdFxuICAgICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gcmVzb3VyY2UgaXMgbG9hZGVkIG9yIHRoZSByZXF1ZXN0IGZhaWxzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKHVybDogc3RyaW5nLCBtaW1lOiBzdHJpbmcsIGNhbGxiYWNrPzogKHJlc3BvbnNlOiBEb2N1bWVudCkgPT4gdm9pZCApOiBYaHI7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAqIFJlcXVlc3QgYW4gWE1MIGRvY3VtZW50IGZyYWdtZW50LlxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIHVybCBVcmwgdG8gcmVxdWVzdFxuICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBGdW5jdGlvbiB0byBpbnZva2Ugd2hlbiByZXNvdXJjZSBpcyBsb2FkZWQgb3IgdGhlIHJlcXVlc3QgZmFpbHNcbiAgICAgICAgKi9cbiAgICAgICAgaHRtbDogKHVybDogc3RyaW5nLCBjYWxsYmFjaz86IChyZXNwb25zZTogRG9jdW1lbnRGcmFnbWVudCkgPT4gdm9pZCApID0+IFhocjtcbiAgICAgICAgLyoqXG4gICAgICAgICogUmVxdWVzdCBhIGNvbW1hLXNlcGFyYXRlZCB2YWx1ZXMgKENTVikgZmlsZS5cbiAgICAgICAgKi9cbiAgICAgICAgY3N2OiBEc3Y7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFJlcXVlc3QgYSB0YWItc2VwYXJhdGVkIHZhbHVlcyAoVFNWKSBmaWxlXG4gICAgICAgICovXG4gICAgICAgIHRzdjogRHN2O1xuICAgICAgICAvKipcbiAgICAgICAgKiBUaW1lIEZ1bmN0aW9uc1xuICAgICAgICAqL1xuICAgICAgICB0aW1lOiBUaW1lLlRpbWU7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFNjYWxlc1xuICAgICAgICAqL1xuICAgICAgICBzY2FsZTogU2NhbGUuU2NhbGVCYXNlO1xuICAgICAgICAvKlxuICAgICAgICAqIEludGVycG9sYXRlIHR3byB2YWx1ZXNcbiAgICAgICAgKi9cbiAgICAgICAgaW50ZXJwb2xhdGU6IFRyYW5zaXRpb24uQmFzZUludGVycG9sYXRlO1xuICAgICAgICAvKlxuICAgICAgICAqIEludGVycG9sYXRlIHR3byBudW1iZXJzXG4gICAgICAgICovXG4gICAgICAgIGludGVycG9sYXRlTnVtYmVyOiBUcmFuc2l0aW9uLkJhc2VJbnRlcnBvbGF0ZTtcbiAgICAgICAgLypcbiAgICAgICAgKiBJbnRlcnBvbGF0ZSB0d28gaW50ZWdlcnNcbiAgICAgICAgKi9cbiAgICAgICAgaW50ZXJwb2xhdGVSb3VuZDogVHJhbnNpdGlvbi5CYXNlSW50ZXJwb2xhdGU7XG4gICAgICAgIC8qXG4gICAgICAgICogSW50ZXJwb2xhdGUgdHdvIHN0cmluZ3NcbiAgICAgICAgKi9cbiAgICAgICAgaW50ZXJwb2xhdGVTdHJpbmc6IFRyYW5zaXRpb24uQmFzZUludGVycG9sYXRlO1xuICAgICAgICAvKlxuICAgICAgICAqIEludGVycG9sYXRlIHR3byBSR0IgY29sb3JzXG4gICAgICAgICovXG4gICAgICAgIGludGVycG9sYXRlUmdiOiBUcmFuc2l0aW9uLkJhc2VJbnRlcnBvbGF0ZTtcbiAgICAgICAgLypcbiAgICAgICAgKiBJbnRlcnBvbGF0ZSB0d28gSFNMIGNvbG9yc1xuICAgICAgICAqL1xuICAgICAgICBpbnRlcnBvbGF0ZUhzbDogVHJhbnNpdGlvbi5CYXNlSW50ZXJwb2xhdGU7XG4gICAgICAgIC8qXG4gICAgICAgICogSW50ZXJwb2xhdGUgdHdvIEhDTCBjb2xvcnNcbiAgICAgICAgKi9cbiAgICAgICAgaW50ZXJwb2xhdGVIY2w6IFRyYW5zaXRpb24uQmFzZUludGVycG9sYXRlO1xuICAgICAgICAvKlxuICAgICAgICAqIEludGVycG9sYXRlIHR3byBMKmEqYiogY29sb3JzXG4gICAgICAgICovXG4gICAgICAgIGludGVycG9sYXRlTGFiOiBUcmFuc2l0aW9uLkJhc2VJbnRlcnBvbGF0ZTtcbiAgICAgICAgLypcbiAgICAgICAgKiBJbnRlcnBvbGF0ZSB0d28gYXJyYXlzIG9mIHZhbHVlc1xuICAgICAgICAqL1xuICAgICAgICBpbnRlcnBvbGF0ZUFycmF5OiBUcmFuc2l0aW9uLkJhc2VJbnRlcnBvbGF0ZTtcbiAgICAgICAgLypcbiAgICAgICAgKiBJbnRlcnBvbGF0ZSB0d28gYXJiaXRhcnkgb2JqZWN0c1xuICAgICAgICAqL1xuICAgICAgICBpbnRlcnBvbGF0ZU9iamVjdDogVHJhbnNpdGlvbi5CYXNlSW50ZXJwb2xhdGU7XG4gICAgICAgIC8qXG4gICAgICAgICogSW50ZXJwb2xhdGUgdHdvIDJEIG1hdHJpeCB0cmFuc2Zvcm1zXG4gICAgICAgICovXG4gICAgICAgIGludGVycG9sYXRlVHJhbnNmb3JtOiBUcmFuc2l0aW9uLkJhc2VJbnRlcnBvbGF0ZTtcbiAgICAgICAgLypcbiAgICAgICAgKiBUaGUgYXJyYXkgb2YgYnVpbHQtaW4gaW50ZXJwb2xhdG9yIGZhY3Rvcmllc1xuICAgICAgICAqL1xuICAgICAgICBpbnRlcnBvbGF0b3JzOiBUcmFuc2l0aW9uLkludGVycG9sYXRlRmFjdG9yeVtdO1xuICAgICAgICAvKipcbiAgICAgICAgKiBMYXlvdXRzXG4gICAgICAgICovXG4gICAgICAgIGxheW91dDogTGF5b3V0LkxheW91dDtcbiAgICAgICAgLyoqXG4gICAgICAgICogU3ZnJ3NcbiAgICAgICAgKi9cbiAgICAgICAgc3ZnOiBTdmcuU3ZnO1xuICAgICAgICAvKipcbiAgICAgICAgKiBSYW5kb20gbnVtYmVyIGdlbmVyYXRvcnNcbiAgICAgICAgKi9cbiAgICAgICAgcmFuZG9tOiBSYW5kb207XG4gICAgICAgIC8qKlxuICAgICAgICAqIENyZWF0ZSBhIGZ1bmN0aW9uIHRvIGZvcm1hdCBhIG51bWJlciBhcyBhIHN0cmluZ1xuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIHNwZWNpZmllciBUaGUgZm9ybWF0IHNwZWNpZmllciB0byB1c2VcbiAgICAgICAgKi9cbiAgICAgICAgZm9ybWF0KHNwZWNpZmllcjogc3RyaW5nKTogKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICogUmV0dXJucyB0aGUgU0kgcHJlZml4IGZvciB0aGUgc3BlY2lmaWVkIHZhbHVlIGF0IHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uXG4gICAgICAgICovXG4gICAgICAgIGZvcm1hdFByZWZpeCh2YWx1ZTogbnVtYmVyLCBwcmVjaXNpb24/OiBudW1iZXIpOiBNZXRyaWNQcmVmaXg7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBkMyBsaWJyYXJ5XG4gICAgICAgICovXG4gICAgICAgIHZlcnNpb246IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICogUmV0dXJucyB0aGUgcm9vdCBzZWxlY3Rpb25cbiAgICAgICAgKi9cbiAgICAgICAgc2VsZWN0aW9uKCk6IF9TZWxlY3Rpb248YW55PjtcbiAgICAgICAgbnM6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBUaGUgbWFwIG9mIHJlZ2lzdGVyZWQgbmFtZXNwYWNlIHByZWZpeGVzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJlZml4OiB7XG4gICAgICAgICAgICAgICAgc3ZnOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgeGh0bWw6IHN0cmluZztcbiAgICAgICAgICAgICAgICB4bGluazogc3RyaW5nO1xuICAgICAgICAgICAgICAgIHhtbDogc3RyaW5nO1xuICAgICAgICAgICAgICAgIHhtbG5zOiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFF1YWxpZmllcyB0aGUgc3BlY2lmaWVkIG5hbWVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBxdWFsaWZ5KG5hbWU6IHN0cmluZyk6IHsgc3BhY2U6IHN0cmluZzsgbG9jYWw6IHN0cmluZzsgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICogUmV0dXJucyBhIGJ1aWx0LWluIGVhc2luZyBmdW5jdGlvbiBvZiB0aGUgc3BlY2lmaWVkIHR5cGVcbiAgICAgICAgKi9cbiAgICAgICAgZWFzZTogKHR5cGU6IHN0cmluZywgLi4uYXJyczogYW55W10pID0+IEQzLlRyYW5zaXRpb24uVHJhbnNpdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSR0IgY29sb3IuXG4gICAgICAgICovXG4gICAgICAgIHJnYjoge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUkdCIGNvbG9yIHdpdGggdGhlIHNwZWNpZmllZCByLCBnIGFuZCBiIGNoYW5uZWwgdmFsdWVzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIpOiBEMy5Db2xvci5SR0JDb2xvcjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJHQiBjb2xvciBieSBwYXJzaW5nIHRoZSBzcGVjaWZpZWQgY29sb3Igc3RyaW5nXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKGNvbG9yOiBzdHJpbmcpOiBEMy5Db2xvci5SR0JDb2xvcjtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBIQ0wgY29sb3IuXG4gICAgICAgICovXG4gICAgICAgIGhjbDoge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgSENMIGNvbG9yLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChoOiBudW1iZXIsIGM6IG51bWJlciwgbDogbnVtYmVyKTogQ29sb3IuSENMQ29sb3I7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBIQ0wgY29sb3IgYnkgcGFyc2luZyB0aGUgc3BlY2lmaWVkIGNvbG9yIHN0cmluZ1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChjb2xvcjogc3RyaW5nKTogQ29sb3IuSENMQ29sb3I7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgSFNMIGNvbG9yLlxuICAgICAgICAqL1xuICAgICAgICBoc2w6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEhTTCBjb2xvciB3aXRoIHRoZSBzcGVjaWZpZWQgaHVlIGgsIHNhdHVyYXRpb24gcyBhbmQgbGlnaHRuZXNzIGxcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAoaDogbnVtYmVyLCBzOiBudW1iZXIsIGw6IG51bWJlcik6IENvbG9yLkhTTENvbG9yO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgSFNMIGNvbG9yIGJ5IHBhcnNpbmcgdGhlIHNwZWNpZmllZCBjb2xvciBzdHJpbmdcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAoY29sb3I6IHN0cmluZyk6IENvbG9yLkhTTENvbG9yO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJHQiBjb2xvci5cbiAgICAgICAgKi9cbiAgICAgICAgbGFiOiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBMQUIgY29sb3IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKGw6IG51bWJlciwgYTogbnVtYmVyLCBiOiBudW1iZXIpOiBDb2xvci5MQUJDb2xvcjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IExBQiBjb2xvciBieSBwYXJzaW5nIHRoZSBzcGVjaWZpZWQgY29sb3Igc3RyaW5nXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKGNvbG9yOiBzdHJpbmcpOiBDb2xvci5MQUJDb2xvcjtcbiAgICAgICAgfTtcbiAgICAgICAgZ2VvOiBHZW8uR2VvO1xuICAgICAgICBnZW9tOiBHZW9tLkdlb207XG4gICAgICAgIC8qKlxuICAgICAgICAqIGdldHMgdGhlIG1vdXNlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIGEgc3BlY2lmaWVkIGNvbnRhaW5lci5cbiAgICAgICAgKi9cbiAgICAgICAgbW91c2UoY29udGFpbmVyOiBhbnkpOiBudW1iZXJbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICogZ2V0cyB0aGUgdG91Y2ggcG9zaXRpb25zIHJlbGF0aXZlIHRvIGEgc3BlY2lmaWVkIGNvbnRhaW5lci5cbiAgICAgICAgKi9cbiAgICAgICAgdG91Y2hlcyhjb250YWluZXI6IGFueSk6IG51bWJlcltdW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogSWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCByZXR1cm5zIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAgICAgICogT3RoZXJ3aXNlLCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAgICAgICovXG4gICAgICAgIGZ1bmN0b3I8UixUPih2YWx1ZTogKHAgOiBSKSA9PiBUKTogKHAgOiBSKSA9PiBUO1xuICAgICAgICBmdW5jdG9yPFQ+KHZhbHVlOiBUKTogKHAgOiBhbnkpID0+IFQ7XG5cbiAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICAoKTogTWFwPGFueT47XG4gICAgICAgICAgICA8VD4ob2JqZWN0OiB7W2tleTogc3RyaW5nXTogVDsgfSk6IE1hcDxUPjtcbiAgICAgICAgICAgIDxUPihtYXA6IE1hcDxUPik6IE1hcDxUPjtcbiAgICAgICAgICAgIDxUPihhcnJheTogVFtdKTogTWFwPFQ+O1xuICAgICAgICAgICAgPFQ+KGFycmF5OiBUW10sIGtleUZuOiAob2JqZWN0OiBULCBpbmRleD86IG51bWJlcikgPT4gc3RyaW5nKTogTWFwPFQ+O1xuICAgICAgICB9O1xuICAgICAgICBzZXQ6IHtcbiAgICAgICAgICAgICgpOiBTZXQ8YW55PjtcbiAgICAgICAgICAgIDxUPihhcnJheTogVFtdKTogU2V0PFQ+O1xuICAgICAgICB9O1xuICAgICAgICBkaXNwYXRjaCguLi50eXBlczogc3RyaW5nW10pOiBEaXNwYXRjaDtcbiAgICAgICAgcmViaW5kKHRhcmdldDogYW55LCBzb3VyY2U6IGFueSwgLi4ubmFtZXM6IGFueVtdKTogYW55O1xuICAgICAgICByZXF1b3RlKHN0cjogc3RyaW5nKTogc3RyaW5nO1xuICAgICAgICB0aW1lcjoge1xuICAgICAgICAgICAgKGZ1bmN0OiAoKSA9PiBib29sZWFuLCBkZWxheT86IG51bWJlciwgbWFyaz86IG51bWJlcik6IHZvaWQ7XG4gICAgICAgICAgICBmbHVzaCgpOiB2b2lkO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zaXRpb24oKTogVHJhbnNpdGlvbi5UcmFuc2l0aW9uO1xuXG4gICAgICAgIHJvdW5kKHg6IG51bWJlciwgbjogbnVtYmVyKTogbnVtYmVyO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRGlzcGF0Y2gge1xuICAgICAgICBbZXZlbnQ6IHN0cmluZ106IGFueTtcbiAgICAgICAgb246IHtcbiAgICAgICAgICAgICh0eXBlOiBzdHJpbmcpOiBhbnk7XG4gICAgICAgICAgICAodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogYW55KTogYW55O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBNZXRyaWNQcmVmaXgge1xuICAgICAgICAvKipcbiAgICAgICAgKiB0aGUgc2NhbGUgZnVuY3Rpb24sIGZvciBjb252ZXJ0aW5nIG51bWJlcnMgdG8gdGhlIGFwcHJvcHJpYXRlIHByZWZpeGVkIHNjYWxlLlxuICAgICAgICAqL1xuICAgICAgICBzY2FsZTogKGQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAvKipcbiAgICAgICAgKiB0aGUgcHJlZml4IHN5bWJvbFxuICAgICAgICAqL1xuICAgICAgICBzeW1ib2w6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFhociB7XG4gICAgICAgIC8qKlxuICAgICAgICAqIEdldCBvciBzZXQgcmVxdWVzdCBoZWFkZXJcbiAgICAgICAgKi9cbiAgICAgICAgaGVhZGVyOiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0IHRoZSB2YWx1ZSBvZiBzcGVjaWZpZWQgcmVxdWVzdCBoZWFkZXJcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiBoZWFkZXIgdG8gZ2V0IHRoZSB2YWx1ZSBmb3JcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAobmFtZTogc3RyaW5nKTogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFNldCB0aGUgdmFsdWUgb2Ygc3BlY2lmaWVkIHJlcXVlc3QgaGVhZGVyXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgaGVhZGVyIHRvIHNldCB0aGUgdmFsdWUgZm9yXG4gICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBzZXQgdGhlIGhlYWRlciB0b1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBYaHI7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAqIEdldCBvciBzZXQgTUlNRSBUeXBlXG4gICAgICAgICovXG4gICAgICAgIG1pbWVUeXBlOiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0IHRoZSBjdXJyZW50IE1JTUUgVHlwZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICgpOiBzdHJpbmc7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogU2V0IHRoZSBNSU1FIFR5cGUgZm9yIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSB0eXBlIFRoZSBNSU1FIHR5cGUgZm9yIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKHR5cGU6IHN0cmluZyk6IFhocjtcbiAgICAgICAgfTtcbiAgICAgICAgLypcbiAgICAgICAgKiBHZXQgb3IgU2V0IHRoZSBmdW5jdGlvbiB1c2VkIHRvIG1hcCB0aGUgcmVzcG9uc2UgdG8gdGhlIGFzc29jaWF0ZWQgZGF0YSB2YWx1ZVxuICAgICAgICAqL1xuICAgICAgICByZXNwb25zZToge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBmdW5jdGlvbiB1c2VkIHRvIG1hcCB0aGUgcmVzcG9uc2UgdG8gdGhlIGFzc29jaWF0ZWQgZGF0YSB2YWx1ZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICgpOiAoeGhyOiBYTUxIdHRwUmVxdWVzdCkgPT4gYW55O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFNldCBmdW5jdGlvbiB1c2VkIHRvIG1hcCB0aGUgcmVzcG9uc2UgdG8gdGhlIGFzc29jaWF0ZWQgZGF0YSB2YWx1ZVxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gbWFwIHRoZSByZXNwb25zZSB0byBhIGRhdGEgdmFsdWVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAodmFsdWU6ICh4aHI6IFhNTEh0dHBSZXF1ZXN0KSA9PiBhbnkpOiBYaHI7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAqIElzc3VlIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBHRVQgbWV0aG9kXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gaW52b2tlIG9uIGNvbXBsZXRpb24gb2YgcmVxdWVzdFxuICAgICAgICAqL1xuICAgICAgICBnZXQoY2FsbGJhY2s/OiAoeGhyOiBYTUxIdHRwUmVxdWVzdCkgPT4gdm9pZCApOiBYaHI7XG4gICAgICAgIC8qKlxuICAgICAgICAqIElzc3VlIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBQT1NUIG1ldGhvZFxuICAgICAgICAqL1xuICAgICAgICBwb3N0OiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogSXNzdWUgdGhlIHJlcXVlc3QgdXNpbmcgdGhlIFBPU1QgbWV0aG9kXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBGdW5jdGlvbiB0byBpbnZva2Ugb24gY29tcGxldGlvbiBvZiByZXF1ZXN0XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKGNhbGxiYWNrPzogKHhocjogWE1MSHR0cFJlcXVlc3QpID0+IHZvaWQgKTogWGhyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIElzc3VlIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBQT1NUIG1ldGhvZFxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIHBvc3QgYmFjayBpbiB0aGUgcmVxdWVzdFxuICAgICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gaW52b2tlIG9uIGNvbXBsZXRpb24gb2YgcmVxdWVzdFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChkYXRhOiBhbnksIGNhbGxiYWNrPzogKHhocjogWE1MSHR0cFJlcXVlc3QpID0+IHZvaWQgKTogWGhyO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgKiBJc3N1ZXMgdGhpcyByZXF1ZXN0IHVzaW5nIHRoZSBzcGVjaWZpZWQgbWV0aG9kXG4gICAgICAgICovXG4gICAgICAgIHNlbmQ6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBJc3N1ZXMgdGhpcyByZXF1ZXN0IHVzaW5nIHRoZSBzcGVjaWZpZWQgbWV0aG9kXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSBtZXRob2QgTWV0aG9kIHRvIHVzZSB0byBtYWtlIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBGdW5jdGlvbiB0byBpbnZva2Ugb24gY29tcGxldGlvbiBvZiByZXF1ZXN0XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKG1ldGhvZDogc3RyaW5nLCBjYWxsYmFjaz86ICh4aHI6IFhNTEh0dHBSZXF1ZXN0KSA9PiB2b2lkICk6IFhocjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBJc3N1ZXMgdGhpcyByZXF1ZXN0IHVzaW5nIHRoZSBzcGVjaWZpZWQgbWV0aG9kXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSBtZXRob2QgTWV0aG9kIHRvIHVzZSB0byBtYWtlIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICAqIEBwYXJhbSBkYXRhIERhdGEgdG8gcG9zdCBiYWNrIGluIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBGdW5jdGlvbiB0byBpbnZva2Ugb24gY29tcGxldGlvbiBvZiByZXF1ZXN0XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKG1ldGhvZDogc3RyaW5nLCBkYXRhOiBhbnksIGNhbGxiYWNrPzogKHhocjogWE1MSHR0cFJlcXVlc3QpID0+IHZvaWQgKTogWGhyO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgKiBBYm9ydHMgdGhpcyByZXF1ZXN0LCBpZiBpdCBpcyBjdXJyZW50bHkgaW4tZmxpZ2h0XG4gICAgICAgICovXG4gICAgICAgIGFib3J0KCk6IFhocjtcbiAgICAgICAgLyoqXG4gICAgICAgICogUmVnaXN0ZXJzIGEgbGlzdGVuZXIgdG8gcmVjZWl2ZSBldmVudHNcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSB0eXBlIEVuZW50IG5hbWUgdG8gYXR0YWNoIHRoZSBsaXN0ZW5lciB0b1xuICAgICAgICAqIEBwYXJhbSBsaXN0ZW5lciBGdW5jdGlvbiB0byBhdHRhY2ggdG8gZXZlbnRcbiAgICAgICAgKi9cbiAgICAgICAgb246ICh0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiAoZGF0YTogYW55LCBpbmRleD86IG51bWJlcikgPT4gYW55KSA9PiBYaHI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBEc3Yge1xuICAgICAgICAvKipcbiAgICAgICAgKiBSZXF1ZXN0IGEgZGVsaW1pdGVkIHZhbHVlcyBmaWxlXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gdXJsIFVybCB0byByZXF1ZXN0XG4gICAgICAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHJlc291cmNlIGlzIGxvYWRlZCBvciB0aGUgcmVxdWVzdCBmYWlsc1xuICAgICAgICAqL1xuICAgICAgICAodXJsOiBzdHJpbmcsIGNhbGxiYWNrPzogKGVycm9yOiBhbnksIHJlc3BvbnNlOiBhbnlbXSkgPT4gdm9pZCApOiBYaHI7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFBhcnNlIGEgZGVsaW1pdGVkIHN0cmluZyBpbnRvIG9iamVjdHMgdXNpbmcgdGhlIGhlYWRlciByb3cuXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gc3RyaW5nIGRlbGltaXRlZCBmb3JtYXR0ZWQgc3RyaW5nIHRvIHBhcnNlXG4gICAgICAgICogQHBhcmFtIGFjY2Vzc29yIHRvIG1vZGlmeSBwcm9wZXJ0aWVzIG9mIGVhY2ggcm93XG4gICAgICAgICovXG4gICAgICAgIHBhcnNlKHN0cmluZzogc3RyaW5nLCBhY2Nlc3Nvcj86IChyb3c6IGFueSwgaW5kZXg/OiBudW1iZXIpID0+IGFueSk6IGFueVtdO1xuICAgICAgICAvKipcbiAgICAgICAgKiBQYXJzZSBhIGRlbGltaXRlZCBzdHJpbmcgaW50byB0dXBsZXMsIGlnbm9yaW5nIHRoZSBoZWFkZXIgcm93LlxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIHN0cmluZyBkZWxpbWl0ZWQgZm9ybWF0dGVkIHN0cmluZyB0byBwYXJzZVxuICAgICAgICAqL1xuICAgICAgICBwYXJzZVJvd3Moc3RyaW5nOiBzdHJpbmcsIGFjY2Vzc29yOiAocm93OiBhbnlbXSwgaW5kZXg6IG51bWJlcikgPT4gYW55KTogYW55O1xuICAgICAgICAvKipcbiAgICAgICAgKiBGb3JtYXQgYW4gYXJyYXkgb2YgdHVwbGVzIGludG8gYSBkZWxpbWl0ZWQgc3RyaW5nLlxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIHJvd3MgQXJyYXkgdG8gY29udmVydCB0byBhIGRlbGltaXRlZCBzdHJpbmdcbiAgICAgICAgKi9cbiAgICAgICAgZm9ybWF0KHJvd3M6IGFueVtdKTogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgX1NlbGVjdGlvbjxUPiBleHRlbmRzIFNlbGVjdG9ycywgQXJyYXk8YW55PiB7XG4gICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgIChuYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgICAgICAgICAobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlRnVuY3Rpb246IChkYXRhOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnkpOiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICAgICAgKGF0dHJWYWx1ZU1hcDogT2JqZWN0KTogX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgfTtcblxuICAgICAgICBjbGFzc2VkOiB7XG4gICAgICAgICAgICAobmFtZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICAgICAgKG5hbWU6IHN0cmluZywgdmFsdWVGdW5jdGlvbjogKGRhdGE6IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSk6IF9TZWxlY3Rpb248VD47XG4gICAgICAgICAgICAoY2xhc3NWYWx1ZU1hcDogT2JqZWN0KTogX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgfTtcblxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgKG5hbWU6IHN0cmluZyk6IHN0cmluZztcbiAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIHByaW9yaXR5Pzogc3RyaW5nKTogX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlRnVuY3Rpb246IChkYXRhOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnksIHByaW9yaXR5Pzogc3RyaW5nKTogX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgICAgIChzdHlsZVZhbHVlTWFwOiBPYmplY3QpOiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICB9O1xuXG4gICAgICAgIHByb3BlcnR5OiB7XG4gICAgICAgICAgICAobmFtZTogc3RyaW5nKTogdm9pZDtcbiAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICAgICAgKG5hbWU6IHN0cmluZywgdmFsdWVGdW5jdGlvbjogKGRhdGE6IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSk6IF9TZWxlY3Rpb248VD47XG4gICAgICAgICAgICAocHJvcGVydHlWYWx1ZU1hcDogT2JqZWN0KTogX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgfTtcblxuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAoKTogc3RyaW5nO1xuICAgICAgICAgICAgKHZhbHVlOiBhbnkpOiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICAgICAgKHZhbHVlRnVuY3Rpb246IChkYXRhOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnkpOiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICB9O1xuXG4gICAgICAgIGh0bWw6IHtcbiAgICAgICAgICAgICgpOiBzdHJpbmc7XG4gICAgICAgICAgICAodmFsdWU6IGFueSk6IF9TZWxlY3Rpb248VD47XG4gICAgICAgICAgICAodmFsdWVGdW5jdGlvbjogKGRhdGE6IFQsIGluZGV4OiBudW1iZXIpID0+IGFueSk6IF9TZWxlY3Rpb248VD47XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBwZW5kOiAobmFtZTogc3RyaW5nKSA9PiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICBpbnNlcnQ6IChuYW1lOiBzdHJpbmcsIGJlZm9yZTogc3RyaW5nKSA9PiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICByZW1vdmU6ICgpID0+IF9TZWxlY3Rpb248VD47XG4gICAgICAgIGVtcHR5OiAoKSA9PiBib29sZWFuO1xuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIDxVPih2YWx1ZXM6IChkYXRhOiBULCBpbmRleD86IG51bWJlcikgPT4gVVtdLCBrZXk/OiAoZGF0YTogVSwgaW5kZXg/OiBudW1iZXIpID0+IGFueSk6IF9VcGRhdGVTZWxlY3Rpb248VT47XG4gICAgICAgICAgICA8VT4odmFsdWVzOiBVW10sIGtleT86IChkYXRhOiBVLCBpbmRleD86IG51bWJlcikgPT4gYW55KTogX1VwZGF0ZVNlbGVjdGlvbjxVPjtcbiAgICAgICAgICAgICgpOiBUW107XG4gICAgICAgIH07XG5cbiAgICAgICAgZGF0dW06IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB0aGUgZWxlbWVudCdzIGJvdW5kIGRhdGEgdG8gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIGV2YWx1YXRlZFxuICAgICAgICAgICAgICogZm9yIGVhY2ggc2VsZWN0ZWQgZWxlbWVudC5cbiAgICAgICAgICAgICAqIFVubGlrZSB0aGUgRDMuU2VsZWN0aW9uLmRhdGEgbWV0aG9kLCB0aGlzIG1ldGhvZCBkb2VzIG5vdCBjb21wdXRlIGEgam9pbiAoYW5kIHRodXNcbiAgICAgICAgICAgICAqIGRvZXMgbm90IGNvbXB1dGUgZW50ZXIgYW5kIGV4aXQgc2VsZWN0aW9ucykuXG4gICAgICAgICAgICAgKiBAcGFyYW0gdmFsdWVzIFRoZSBmdW5jdGlvbiB0byBiZSBldmFsdWF0ZWQgZm9yIGVhY2ggc2VsZWN0ZWQgZWxlbWVudCwgYmVpbmcgcGFzc2VkIHRoZVxuICAgICAgICAgICAgICogcHJldmlvdXMgZGF0dW0gZCBhbmQgdGhlIGN1cnJlbnQgaW5kZXggaSwgd2l0aCB0aGUgdGhpcyBjb250ZXh0IGFzIHRoZSBjdXJyZW50IERPTVxuICAgICAgICAgICAgICogZWxlbWVudC4gVGhlIGZ1bmN0aW9uIGlzIHRoZW4gdXNlZCB0byBzZXQgZWFjaCBlbGVtZW50J3MgZGF0YS4gQSBudWxsIHZhbHVlIHdpbGxcbiAgICAgICAgICAgICAqIGRlbGV0ZSB0aGUgYm91bmQgZGF0YS4gVGhpcyBvcGVyYXRvciBoYXMgbm8gZWZmZWN0IG9uIHRoZSBpbmRleC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgPFU+KHZhbHVlczogKGRhdGE6IFUsIGluZGV4OiBudW1iZXIpID0+IGFueSk6IF9VcGRhdGVTZWxlY3Rpb248VT47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldHMgdGhlIGVsZW1lbnQncyBib3VuZCBkYXRhIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUgb24gYWxsIHNlbGVjdGVkIGVsZW1lbnRzLlxuICAgICAgICAgICAgICogVW5saWtlIHRoZSBEMy5TZWxlY3Rpb24uZGF0YSBtZXRob2QsIHRoaXMgbWV0aG9kIGRvZXMgbm90IGNvbXB1dGUgYSBqb2luIChhbmQgdGh1c1xuICAgICAgICAgICAgICogZG9lcyBub3QgY29tcHV0ZSBlbnRlciBhbmQgZXhpdCBzZWxlY3Rpb25zKS5cbiAgICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZXMgVGhlIHNhbWUgZGF0YSB0byBiZSBnaXZlbiB0byBhbGwgZWxlbWVudHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIDxVPih2YWx1ZXM6IFUpOiBfVXBkYXRlU2VsZWN0aW9uPFU+O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBib3VuZCBkYXR1bSBmb3IgdGhlIGZpcnN0IG5vbi1udWxsIGVsZW1lbnQgaW4gdGhlIHNlbGVjdGlvbi5cbiAgICAgICAgICAgICAqIFRoaXMgaXMgZ2VuZXJhbGx5IHVzZWZ1bCBvbmx5IGlmIHlvdSBrbm93IHRoZSBzZWxlY3Rpb24gY29udGFpbnMgZXhhY3RseSBvbmUgZWxlbWVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgKCk6IFQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAoZmlsdGVyOiAoZGF0YTogVCwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbiwgdGhpc0FyZz86IGFueSk6IF9VcGRhdGVTZWxlY3Rpb248VD47XG4gICAgICAgICAgICAoZmlsdGVyOiBzdHJpbmcpOiBfVXBkYXRlU2VsZWN0aW9uPFQ+O1xuICAgICAgICB9O1xuXG4gICAgICAgIGNhbGwoY2FsbGJhY2s6IChzZWxlY3Rpb246IF9TZWxlY3Rpb248VD4sIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkLCAuLi5hcmdzOiBhbnlbXSk6IF9TZWxlY3Rpb248VD47XG4gICAgICAgIGVhY2goZWFjaEZ1bmN0aW9uOiAoZGF0YTogVCwgaW5kZXg6IG51bWJlcikgPT4gYW55KTogX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgb246IHtcbiAgICAgICAgICAgICh0eXBlOiBzdHJpbmcpOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBhbnk7XG4gICAgICAgICAgICAodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gYW55LCBjYXB0dXJlPzogYm9vbGVhbik6IF9TZWxlY3Rpb248VD47XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAgICAgICAgKi9cbiAgICAgICAgc2l6ZSgpOiBudW1iZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogU3RhcnRzIGEgdHJhbnNpdGlvbiBmb3IgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLiBUcmFuc2l0aW9ucyBiZWhhdmUgbXVjaCBsaWtlIHNlbGVjdGlvbnMsXG4gICAgICAgICogZXhjZXB0IG9wZXJhdG9ycyBhbmltYXRlIHNtb290aGx5IG92ZXIgdGltZSByYXRoZXIgdGhhbiBhcHBseWluZyBpbnN0YW50YW5lb3VzbHkuXG4gICAgICAgICovXG4gICAgICAgIHRyYW5zaXRpb24oKTogVHJhbnNpdGlvbi5UcmFuc2l0aW9uO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAqIFNvcnRzIHRoZSBlbGVtZW50cyBpbiB0aGUgY3VycmVudCBzZWxlY3Rpb24gYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgY29tcGFyYXRvclxuICAgICAgICAqIGZ1bmN0aW9uLlxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIGNvbXBhcmF0b3IgYSBjb21wYXJpc29uIGZ1bmN0aW9uLCB3aGljaCB3aWxsIGJlIHBhc3NlZCB0d28gZGF0YSBlbGVtZW50cyBhIGFuZCBiXG4gICAgICAgICogdG8gY29tcGFyZSwgYW5kIHNob3VsZCByZXR1cm4gZWl0aGVyIGEgbmVnYXRpdmUsIHBvc2l0aXZlLCBvciB6ZXJvIHZhbHVlIHRvIGluZGljYXRlXG4gICAgICAgICogdGhlaXIgcmVsYXRpdmUgb3JkZXIuXG4gICAgICAgICovXG4gICAgICAgIHNvcnQoY29tcGFyYXRvcj86IChhOiBULCBiOiBUKSA9PiBudW1iZXIpOiBfU2VsZWN0aW9uPFQ+O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAqIFJlLWluc2VydHMgZWxlbWVudHMgaW50byB0aGUgZG9jdW1lbnQgc3VjaCB0aGF0IHRoZSBkb2N1bWVudCBvcmRlciBtYXRjaGVzIHRoZSBzZWxlY3Rpb25cbiAgICAgICAgKiBvcmRlci4gVGhpcyBpcyBlcXVpdmFsZW50IHRvIGNhbGxpbmcgc29ydCgpIGlmIHRoZSBkYXRhIGlzIGFscmVhZHkgc29ydGVkLCBidXQgbXVjaFxuICAgICAgICAqIGZhc3Rlci5cbiAgICAgICAgKi9cbiAgICAgICAgb3JkZXI6ICgpID0+IF9TZWxlY3Rpb248VD47XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogUmV0dXJucyB0aGUgZmlyc3Qgbm9uLW51bGwgZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZWxlY3Rpb24uIElmIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHksXG4gICAgICAgICogcmV0dXJucyBudWxsLlxuICAgICAgICAqL1xuICAgICAgICBub2RlOiA8RSBleHRlbmRzIEVsZW1lbnQ+KCkgPT4gRTtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNlbGVjdGlvbiBleHRlbmRzIF9TZWxlY3Rpb248YW55PiB7IH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgX0VudGVyU2VsZWN0aW9uPFQ+IHtcbiAgICAgICAgYXBwZW5kOiAobmFtZTogc3RyaW5nKSA9PiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICBpbnNlcnQ6IChuYW1lOiBzdHJpbmcsIGJlZm9yZT86IHN0cmluZykgPT4gX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgc2VsZWN0OiAoc2VsZWN0b3I6IHN0cmluZykgPT4gX1NlbGVjdGlvbjxUPjtcbiAgICAgICAgZW1wdHk6ICgpID0+IGJvb2xlYW47XG4gICAgICAgIG5vZGU6ICgpID0+IEVsZW1lbnQ7XG4gICAgICAgIGNhbGw6IChjYWxsYmFjazogKHNlbGVjdGlvbjogX0VudGVyU2VsZWN0aW9uPFQ+KSA9PiB2b2lkKSA9PiBfRW50ZXJTZWxlY3Rpb248VD47XG4gICAgICAgIHNpemU6ICgpID0+IG51bWJlcjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEVudGVyU2VsZWN0aW9uIGV4dGVuZHMgX0VudGVyU2VsZWN0aW9uPGFueT4geyB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIF9VcGRhdGVTZWxlY3Rpb248VD4gZXh0ZW5kcyBfU2VsZWN0aW9uPFQ+IHtcbiAgICAgICAgZW50ZXI6ICgpID0+IF9FbnRlclNlbGVjdGlvbjxUPjtcbiAgICAgICAgdXBkYXRlOiAoKSA9PiBfU2VsZWN0aW9uPFQ+O1xuICAgICAgICBleGl0OiAoKSA9PiBfU2VsZWN0aW9uPFQ+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlU2VsZWN0aW9uIGV4dGVuZHMgX1VwZGF0ZVNlbGVjdGlvbjxhbnk+IHsgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBOZXN0S2V5VmFsdWUge1xuICAgICAgICBrZXk6IHN0cmluZztcbiAgICAgICAgdmFsdWVzOiBhbnk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBOZXN0IHtcbiAgICAgICAga2V5KGtleUZ1bmN0aW9uOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBzdHJpbmcpOiBOZXN0O1xuICAgICAgICBzb3J0S2V5cyhjb21wYXJhdG9yOiAoZDE6IGFueSwgZDI6IGFueSkgPT4gbnVtYmVyKTogTmVzdDtcbiAgICAgICAgc29ydFZhbHVlcyhjb21wYXJhdG9yOiAoZDE6IGFueSwgZDI6IGFueSkgPT4gbnVtYmVyKTogTmVzdDtcbiAgICAgICAgcm9sbHVwKHJvbGx1cEZ1bmN0aW9uOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBhbnkpOiBOZXN0O1xuICAgICAgICBtYXAodmFsdWVzOiBhbnlbXSwgbWFwVHlwZT86IGFueSk6IGFueTtcbiAgICAgICAgZW50cmllcyh2YWx1ZXM6IGFueVtdKTogTmVzdEtleVZhbHVlW107XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBNYXBLZXlWYWx1ZTxUPiB7XG4gICAgICAgIGtleTogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogVDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIE1hcDxUPiB7XG4gICAgICAgIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgICAgIGdldChrZXk6IHN0cmluZyk6IFQ7XG4gICAgICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU6IFQpOiBUO1xuICAgICAgICByZW1vdmUoa2V5OiBzdHJpbmcpOiBib29sZWFuO1xuICAgICAgICBrZXlzKCk6IHN0cmluZ1tdO1xuICAgICAgICB2YWx1ZXMoKTogVFtdO1xuICAgICAgICBlbnRyaWVzKCk6IE1hcEtleVZhbHVlPFQ+W107XG4gICAgICAgIGZvckVhY2goZnVuYzogKGtleTogc3RyaW5nLCB2YWx1ZTogVCkgPT4gdm9pZCApOiB2b2lkO1xuICAgICAgICBlbXB0eSgpOiBib29sZWFuO1xuICAgICAgICBzaXplKCk6IG51bWJlcjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNldDxUPiB7XG4gICAgICAgIGhhcyh2YWx1ZTogVCk6IGJvb2xlYW47XG4gICAgICAgIGFkZCh2YWx1ZTogVCk6IFQ7XG4gICAgICAgIHJlbW92ZSh2YWx1ZTogVCk6IGJvb2xlYW47XG4gICAgICAgIHZhbHVlcygpOiBzdHJpbmdbXTtcbiAgICAgICAgZm9yRWFjaChmdW5jOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZCApOiB2b2lkO1xuICAgICAgICBlbXB0eSgpOiBib29sZWFuO1xuICAgICAgICBzaXplKCk6IG51bWJlcjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFJhbmRvbSB7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiBmb3IgZ2VuZXJhdGluZyByYW5kb20gbnVtYmVycyB3aXRoIGEgbm9ybWFsIGRpc3RyaWJ1dGlvblxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIG1lYW4gVGhlIGV4cGVjdGVkIHZhbHVlIG9mIHRoZSBnZW5lcmF0ZWQgcHNldWRvcmFuZG9tIG51bWJlcnNcbiAgICAgICAgKiBAcGFyYW0gZGV2aWF0aW9uIFRoZSBnaXZlbiBzdGFuZGFyZCBkZXZpYXRpb25cbiAgICAgICAgKi9cbiAgICAgICAgbm9ybWFsKG1lYW4/OiBudW1iZXIsIGRldmlhdGlvbj86IG51bWJlcik6ICgpID0+IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogUmV0dXJucyBhIGZ1bmN0aW9uIGZvciBnZW5lcmF0aW5nIHJhbmRvbSBudW1iZXJzIHdpdGggYSBsb2ctbm9ybWFsIGRpc3RyaWJ1dGlvblxuICAgICAgICAqXG4gICAgICAgICogQHBhcmFtIG1lYW4gVGhlIGV4cGVjdGVkIHZhbHVlIG9mIHRoZSBnZW5lcmF0ZWQgcHNldWRvcmFuZG9tIG51bWJlcnNcbiAgICAgICAgKiBAcGFyYW0gZGV2aWF0aW9uIFRoZSBnaXZlbiBzdGFuZGFyZCBkZXZpYXRpb25cbiAgICAgICAgKi9cbiAgICAgICAgbG9nTm9ybWFsKG1lYW4/OiBudW1iZXIsIGRldmlhdGlvbj86IG51bWJlcik6ICgpID0+IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogUmV0dXJucyBhIGZ1bmN0aW9uIGZvciBnZW5lcmF0aW5nIHJhbmRvbSBudW1iZXJzIHdpdGggYW4gSXJ3aW4tSGFsbCBkaXN0cmlidXRpb25cbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSBjb3VudCBUaGUgbnVtYmVyIG9mIGluZGVwZW5kZW50IHZhcmlhYmxlc1xuICAgICAgICAqL1xuICAgICAgICBpcndpbkhhbGwoY291bnQ6IG51bWJlcik6ICgpID0+IG51bWJlcjtcbiAgICB9XG5cbiAgICAvLyBUcmFuc2l0aW9uc1xuICAgIGV4cG9ydCBtb2R1bGUgVHJhbnNpdGlvbiB7XG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgVHJhbnNpdGlvbiB7XG4gICAgICAgICAgICBkdXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIChkdXJhdGlvbjogbnVtYmVyKTogVHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAoZHVyYXRpb246IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IGFueSk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVsYXk6IHtcbiAgICAgICAgICAgICAgICAoZGVsYXk6IG51bWJlcik6IFRyYW5zaXRpb247XG4gICAgICAgICAgICAgICAgKGRlbGF5OiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBhbnkpOiBUcmFuc2l0aW9uO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICAobmFtZTogc3RyaW5nKTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBUcmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlRnVuY3Rpb246IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IGFueSk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICAgICAgKGF0dHJWYWx1ZU1hcCA6IGFueSk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAobmFtZTogc3RyaW5nKTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIHByaW9yaXR5Pzogc3RyaW5nKTogVHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAobmFtZTogc3RyaW5nLCB2YWx1ZUZ1bmN0aW9uOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBhbnksIHByaW9yaXR5Pzogc3RyaW5nKTogVHJhbnNpdGlvbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYWxsKGNhbGxiYWNrOiAodHJhbnNpdGlvbjogVHJhbnNpdGlvbiwgLi4uYXJnczogYW55W10pID0+IHZvaWQsIC4uLmFyZ3M6IGFueVtdKTogVHJhbnNpdGlvbjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBTZWxlY3QgYW4gZWxlbWVudCBmcm9tIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZWxlY3RzIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIHNlbGVjdG9yIHN0cmluZ1xuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3Rpb24gU3RyaW5nIHRvIG1hdGNoXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoc2VsZWN0b3I6IHN0cmluZyk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZWxlY3RzIHRoZSBzcGVjaWZpZWQgbm9kZVxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBlbGVtZW50IE5vZGUgZWxlbWVudCB0byBzZWxlY3RcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChlbGVtZW50OiBFdmVudFRhcmdldCk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogU2VsZWN0IG11bHRpcGxlIGVsZW1lbnRzIGZyb20gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZWxlY3RBbGw6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNlbGVjdHMgYWxsIGVsZW1lbnRzIHRoYXQgbWF0Y2ggdGhlIHNwZWNpZmllZCBzZWxlY3RvclxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3Rpb24gU3RyaW5nIHRvIG1hdGNoXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoc2VsZWN0b3I6IHN0cmluZyk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZWxlY3RzIHRoZSBzcGVjaWZpZWQgYXJyYXkgb2YgZWxlbWVudHNcbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gZWxlbWVudHMgQXJyYXkgb2Ygbm9kZSBlbGVtZW50cyB0byBzZWxlY3RcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChlbGVtZW50czogRXZlbnRUYXJnZXRbXSk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlYWNoOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSW1tZWRpYXRlbHkgaW52b2tlcyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAgKiB0cmFuc2l0aW9uLCBwYXNzaW5nIGluIHRoZSBjdXJyZW50IGRhdHVtIGFuZCBpbmRleCwgd2l0aCB0aGUgdGhpcyBjb250ZXh0XG4gICAgICAgICAgICAgICAgICogb2YgdGhlIGN1cnJlbnQgRE9NIGVsZW1lbnQuIFNpbWlsYXIgdG8gRDMuU2VsZWN0aW9uLmVhY2guXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gZWFjaEZ1bmN0aW9uIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlXG4gICAgICAgICAgICAgICAgICogY3VycmVudCB0cmFuc2l0aW9uLCBwYXNzaW5nIGluIHRoZSBjdXJyZW50IGRhdHVtIGFuZCBpbmRleCwgd2l0aCB0aGUgdGhpc1xuICAgICAgICAgICAgICAgICAqIGNvbnRleHQgb2YgdGhlIGN1cnJlbnQgRE9NIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGVhY2hGdW5jdGlvbjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gYW55KTogVHJhbnNpdGlvbjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBBZGRzIGEgbGlzdGVuZXIgZm9yIHRyYW5zaXRpb24gZXZlbnRzLCBzdXBwb3J0aW5nIFwic3RhcnRcIiwgXCJlbmRcIiBhbmRcbiAgICAgICAgICAgICAgICAgKiBcImludGVycnVwdFwiIGV2ZW50cy4gVGhlIGxpc3RlbmVyIHdpbGwgYmUgaW52b2tlZCBmb3IgZWFjaCBpbmRpdmlkdWFsXG4gICAgICAgICAgICAgICAgICogZWxlbWVudCBpbiB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB0eXBlIFR5cGUgb2YgdHJhbnNpdGlvbiBldmVudC4gU3VwcG9ydGVkIHZhbHVlcyBhcmUgXCJzdGFydFwiLCBcImVuZFwiXG4gICAgICAgICAgICAgICAgICogYW5kIFwiaW50ZXJydXB0XCIuXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBiZSBpbnZva2VkIGZvciBlYWNoIGluZGl2aWR1YWwgZWxlbWVudCBpblxuICAgICAgICAgICAgICAgICAqIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICh0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBhbnkpOiBUcmFuc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhbnNpdGlvbjogKCkgPT4gVHJhbnNpdGlvbjtcbiAgICAgICAgICAgIGVhc2U6ICh2YWx1ZTogc3RyaW5nLCAuLi5hcnJzOiBhbnlbXSkgPT4gVHJhbnNpdGlvbjtcbiAgICAgICAgICAgIGF0dHJUd2VlbihuYW1lOiBzdHJpbmcsIHR3ZWVuOiAoZDogYW55LCBpOiBudW1iZXIsIGE6IGFueSkgPT4gQmFzZUludGVycG9sYXRlKTogVHJhbnNpdGlvbjtcbiAgICAgICAgICAgIHN0eWxlVHdlZW4obmFtZTogc3RyaW5nLCB0d2VlbjogKGQ6IGFueSwgaTogbnVtYmVyLCBhOiBhbnkpID0+IEJhc2VJbnRlcnBvbGF0ZSwgcHJpb3JpdHk/OiBzdHJpbmcpOiBUcmFuc2l0aW9uO1xuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICh0ZXh0OiBzdHJpbmcpOiBUcmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgICh0ZXh0OiAoZDogYW55LCBpOiBudW1iZXIpID0+IHN0cmluZyk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0d2VlbihuYW1lOiBzdHJpbmcsIGZhY3Rvcnk6IEludGVycG9sYXRlRmFjdG9yeSk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAoc2VsZWN0b3I6IHN0cmluZyk6IFRyYW5zaXRpb247XG4gICAgICAgICAgICAgICAgKHNlbGVjdG9yOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuKTogVHJhbnNpdGlvbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZW1vdmUoKTogVHJhbnNpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgSW50ZXJwb2xhdGVGYWN0b3J5IHtcbiAgICAgICAgICAgIChhPzogYW55LCBiPzogYW55KTogQmFzZUludGVycG9sYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBCYXNlSW50ZXJwb2xhdGUge1xuICAgICAgICAgICAgKGE6IGFueSwgYj86IGFueSk6IGFueTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgSW50ZXJwb2xhdGUge1xuICAgICAgICAgICAgKHQ6IGFueSk6IGFueTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vVGltZVxuICAgIGV4cG9ydCBtb2R1bGUgVGltZSB7XG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgVGltZSB7XG4gICAgICAgICAgICBzZWNvbmQ6IEludGVydmFsO1xuICAgICAgICAgICAgbWludXRlOiBJbnRlcnZhbDtcbiAgICAgICAgICAgIGhvdXI6IEludGVydmFsO1xuICAgICAgICAgICAgZGF5OiBJbnRlcnZhbDtcbiAgICAgICAgICAgIHdlZWs6IEludGVydmFsO1xuICAgICAgICAgICAgc3VuZGF5OiBJbnRlcnZhbDtcbiAgICAgICAgICAgIG1vbmRheTogSW50ZXJ2YWw7XG4gICAgICAgICAgICB0dWVzZGF5OiBJbnRlcnZhbDtcbiAgICAgICAgICAgIHdlZG5lc2RheTogSW50ZXJ2YWw7XG4gICAgICAgICAgICB0aHVyc2RheTogSW50ZXJ2YWw7XG4gICAgICAgICAgICBmcmlkYXk6IEludGVydmFsO1xuICAgICAgICAgICAgc2F0dXJkYXk6IEludGVydmFsO1xuICAgICAgICAgICAgbW9udGg6IEludGVydmFsO1xuICAgICAgICAgICAgeWVhcjogSW50ZXJ2YWw7XG5cbiAgICAgICAgICAgIHNlY29uZHM6IFJhbmdlO1xuICAgICAgICAgICAgbWludXRlczogUmFuZ2U7XG4gICAgICAgICAgICBob3VyczogUmFuZ2U7XG4gICAgICAgICAgICBkYXlzOiBSYW5nZTtcbiAgICAgICAgICAgIHdlZWtzOiBSYW5nZTtcbiAgICAgICAgICAgIG1vbnRoczogUmFuZ2U7XG4gICAgICAgICAgICB5ZWFyczogUmFuZ2U7XG5cbiAgICAgICAgICAgIHN1bmRheXM6IFJhbmdlO1xuICAgICAgICAgICAgbW9uZGF5czogUmFuZ2U7XG4gICAgICAgICAgICB0dWVzZGF5czogUmFuZ2U7XG4gICAgICAgICAgICB3ZWRuZXNkYXlzOiBSYW5nZTtcbiAgICAgICAgICAgIHRodXJzZGF5czogUmFuZ2U7XG4gICAgICAgICAgICBmcmlkYXlzOiBSYW5nZTtcbiAgICAgICAgICAgIHNhdHVyZGF5czogUmFuZ2U7XG4gICAgICAgICAgICBmb3JtYXQ6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGxvY2FsIHRpbWUgZm9ybWF0dGVyIHVzaW5nIHRoZSBnaXZlbiBzcGVjaWZpZXIuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKHNwZWNpZmllcjogc3RyaW5nKTogVGltZUZvcm1hdDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgbmV3IG11bHRpLXJlc29sdXRpb24gdGltZSBmb3JtYXQgZ2l2ZW4gdGhlIHNwZWNpZmllZCBhcnJheSBvZiBwcmVkaWNhdGVkIGZvcm1hdHMuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbXVsdGk6IChmb3JtYXRzOiBhbnlbXVtdKSA9PiBUaW1lRm9ybWF0O1xuXG4gICAgICAgICAgICAgICAgdXRjOiB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGxvY2FsIHRpbWUgZm9ybWF0dGVyIHVzaW5nIHRoZSBnaXZlbiBzcGVjaWZpZXIuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAoc3BlY2lmaWVyOiBzdHJpbmcpOiBUaW1lRm9ybWF0O1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUmV0dXJucyBhIG5ldyBtdWx0aS1yZXNvbHV0aW9uIFVUQyB0aW1lIGZvcm1hdCBnaXZlbiB0aGUgc3BlY2lmaWVkIGFycmF5IG9mIHByZWRpY2F0ZWQgZm9ybWF0cy5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiAoZm9ybWF0czogYW55W11bXSkgPT4gVGltZUZvcm1hdDtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVGhlIGZ1bGwgSVNPIDg2MDEgVVRDIHRpbWUgZm9ybWF0OiBcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlzbzogVGltZUZvcm1hdDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IHRpbWUgc2NhbGUgd2l0aCB0aGUgZGVmYXVsdCBkb21haW4gYW5kIHJhbmdlO1xuICAgICAgICAgICAgICAgICogdGhlIHRpY2tzIGFuZCB0aWNrIGZvcm1hdCBhcmUgY29uZmlndXJlZCBmb3IgbG9jYWwgdGltZS5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiBTY2FsZS5UaW1lU2NhbGU7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IHRpbWUgc2NhbGUgd2l0aCB0aGUgZGVmYXVsdCBkb21haW4gYW5kIHJhbmdlO1xuICAgICAgICAgICAgICAgICogdGhlIHRpY2tzIGFuZCB0aWNrIGZvcm1hdCBhcmUgY29uZmlndXJlZCBmb3IgVVRDIHRpbWUuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB1dGMoKTogU2NhbGUuVGltZVNjYWxlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgUmFuZ2Uge1xuICAgICAgICAgICAgKHN0YXJ0OiBEYXRlLCBlbmQ6IERhdGUsIHN0ZXA/OiBudW1iZXIpOiBEYXRlW107XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEludGVydmFsIHtcbiAgICAgICAgICAgIChkYXRlOiBEYXRlKTogRGF0ZTtcbiAgICAgICAgICAgIGZsb29yOiAoZGF0ZTogRGF0ZSkgPT4gRGF0ZTtcbiAgICAgICAgICAgIHJvdW5kOiAoZGF0ZTogRGF0ZSkgPT4gRGF0ZTtcbiAgICAgICAgICAgIGNlaWw6IChkYXRlOiBEYXRlKSA9PiBEYXRlO1xuICAgICAgICAgICAgcmFuZ2U6IFJhbmdlO1xuICAgICAgICAgICAgb2Zmc2V0OiAoZGF0ZTogRGF0ZSwgc3RlcDogbnVtYmVyKSA9PiBEYXRlO1xuICAgICAgICAgICAgdXRjPzogSW50ZXJ2YWw7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFRpbWVGb3JtYXQge1xuICAgICAgICAgICAgKGRhdGU6IERhdGUpOiBzdHJpbmc7XG4gICAgICAgICAgICBwYXJzZTogKHN0cmluZzogc3RyaW5nKSA9PiBEYXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGF5b3V0XG4gICAgZXhwb3J0IG1vZHVsZSBMYXlvdXQge1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIExheW91dCB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBTdGFjayBsYXlvdXRcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdGFjaygpOiBTdGFja0xheW91dDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IHBpZSBsYXlvdXRcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBwaWUoKTogUGllTGF5b3V0O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgZm9yY2UgbGF5b3V0XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yY2UoKTogRm9yY2VMYXlvdXQ7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyB0cmVlIGxheW91dFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRyZWUoKTogVHJlZUxheW91dDtcbiAgICAgICAgICAgIGJ1bmRsZSgpOiBCdW5kbGVMYXlvdXQ7XG4gICAgICAgICAgICBjaG9yZCgpOiBDaG9yZExheW91dDtcbiAgICAgICAgICAgIGNsdXN0ZXIoKTogQ2x1c3RlckxheW91dDtcbiAgICAgICAgICAgIGhpZXJhcmNoeSgpOiBIaWVyYXJjaHlMYXlvdXQ7XG4gICAgICAgICAgICBoaXN0b2dyYW0oKTogSGlzdG9ncmFtTGF5b3V0O1xuICAgICAgICAgICAgcGFjaygpOiBQYWNrTGF5b3V0O1xuICAgICAgICAgICAgcGFydGl0aW9uKCk6IFBhcnRpdGlvbkxheW91dDtcbiAgICAgICAgICAgIHRyZWVtYXAoKTogVHJlZU1hcExheW91dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgU3RhY2tMYXlvdXQge1xuICAgICAgICAgICAgPFQ+KGxheWVyczogVFtdLCBpbmRleD86IG51bWJlcik6IFRbXTtcbiAgICAgICAgICAgIHZhbHVlcyhhY2Nlc3Nvcj86IChkOiBhbnkpID0+IGFueSk6IFN0YWNrTGF5b3V0O1xuICAgICAgICAgICAgb2Zmc2V0KG9mZnNldDogc3RyaW5nKTogU3RhY2tMYXlvdXQ7XG4gICAgICAgICAgICB4KGFjY2Vzc29yOiAoZDogYW55LCBpOiBudW1iZXIpID0+IGFueSk6IFN0YWNrTGF5b3V0O1xuICAgICAgICAgICAgeShhY2Nlc3NvcjogKGQ6IGFueSwgaTogbnVtYmVyKSA9PiBhbnkpOiBTdGFja0xheW91dDtcbiAgICAgICAgICAgIG91dChzZXR0ZXI6IChkOiBhbnksIHkwOiBudW1iZXIsIHk6IG51bWJlcikgPT4gdm9pZCk6IFN0YWNrTGF5b3V0O1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBUcmVlTGF5b3V0IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHNvcnQgb3JkZXIgb2Ygc2libGluZyBub2RlcyBmb3IgdGhlIGxheW91dCB1c2luZyB0aGUgc3BlY2lmaWVkIGNvbXBhcmF0b3IgZnVuY3Rpb25cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzb3J0OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXRzIHRoZSBzb3J0IG9yZGVyIGZ1bmN0aW9uIG9mIHNpYmxpbmcgbm9kZXMgZm9yIHRoZSBsYXlvdXRcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZDE6IGFueSwgZDI6IGFueSkgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0cyB0aGUgc29ydCBvcmRlciBvZiBzaWJsaW5nIG5vZGVzIGZvciB0aGUgbGF5b3V0IHVzaW5nIHRoZSBzcGVjaWZpZWQgY29tcGFyYXRvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNvbXBhcmF0b3I6IChkMTogYW55LCBkMjogYW55KSA9PiBudW1iZXIpOiBUcmVlTGF5b3V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHNwZWNpZmllZCBjaGlsZHJlbiBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNoaWxkcmVuOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXRzIHRoZSBjaGlsZHJlbiBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IChkOiBhbnkpID0+IGFueTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldHMgdGhlIHNwZWNpZmllZCBjaGlsZHJlbiBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNoaWxkcmVuOiAoZDogYW55KSA9PiBhbnkpOiBUcmVlTGF5b3V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBSdW5zIHRoZSB0cmVlIGxheW91dFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5vZGVzKHJvb3Q6IEdyYXBoTm9kZSk6IEdyYXBoTm9kZVtdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdpdmVuIHRoZSBzcGVjaWZpZWQgYXJyYXkgb2Ygbm9kZXMsIHN1Y2ggYXMgdGhvc2UgcmV0dXJuZWQgYnkgbm9kZXMsIHJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIGxpbmtzIGZyb20gcGFyZW50IHRvIGNoaWxkIGZvciBlYWNoIG5vZGVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBsaW5rcyhub2RlczogR3JhcGhOb2RlW10pOiBHcmFwaExpbmtbXTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBJZiBzZXBhcmF0aW9uIGlzIHNwZWNpZmllZCwgdXNlcyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIHRvIGNvbXB1dGUgc2VwYXJhdGlvbiBiZXR3ZWVuIG5laWdoYm9yaW5nIG5vZGVzLiBJZiBzZXBhcmF0aW9uIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgdGhlIGN1cnJlbnQgc2VwYXJhdGlvbiBmdW5jdGlvblxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNlcGFyYXRpb246IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgc2VwYXJhdGlvbiBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IChhOiBHcmFwaE5vZGUsIGI6IEdyYXBoTm9kZSkgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0cyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIHRvIGNvbXB1dGUgc2VwYXJhdGlvbiBiZXR3ZWVuIG5laWdoYm9yaW5nIG5vZGVzXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoc2VwYXJhdGlvbjogKGE6IEdyYXBoTm9kZSwgYjogR3JhcGhOb2RlKSA9PiBudW1iZXIpOiBUcmVlTGF5b3V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGF2YWlsYWJsZSBsYXlvdXQgc2l6ZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldHMgdGhlIGF2YWlsYWJsZSBsYXlvdXQgc2l6ZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0cyB0aGUgYXZhaWxhYmxlIGxheW91dCBzaXplXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoc2l6ZTogbnVtYmVyW10pOiBUcmVlTGF5b3V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGF2YWlsYWJsZSBub2RlIHNpemVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBub2RlU2l6ZToge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0cyB0aGUgYXZhaWxhYmxlIG5vZGUgc2l6ZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0cyB0aGUgYXZhaWxhYmxlIG5vZGUgc2l6ZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKHNpemU6IG51bWJlcltdKTogVHJlZUxheW91dDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFBpZUxheW91dCB7XG4gICAgICAgICAgICAodmFsdWVzOiBhbnlbXSwgaW5kZXg/OiBudW1iZXIpOiBBcmNEZXNjcmlwdG9yW107XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICgpOiAoZDogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZDogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBQaWVMYXlvdXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgICAgICgpOiAoZDE6IGFueSwgZDI6IGFueSkgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIChjb21wYXJhdG9yOiAoZDE6IGFueSwgZDI6IGFueSkgPT4gbnVtYmVyKTogUGllTGF5b3V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChhbmdsZTogbnVtYmVyKTogUGllTGF5b3V0O1xuICAgICAgICAgICAgICAgIChhbmdsZTogKCkgPT4gbnVtYmVyKTogUGllTGF5b3V0O1xuICAgICAgICAgICAgICAgIChhbmdsZTogKGQgOiBhbnkpID0+IG51bWJlcik6IFBpZUxheW91dDtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkIDogYW55LCBpOiBudW1iZXIpID0+IG51bWJlcik6IFBpZUxheW91dDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlbmRBbmdsZToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiBudW1iZXIpOiBQaWVMYXlvdXQ7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoKSA9PiBudW1iZXIpOiBQaWVMYXlvdXQ7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoZCA6IGFueSkgPT4gbnVtYmVyKTogUGllTGF5b3V0XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoZCA6IGFueSwgaTogbnVtYmVyKSA9PiBudW1iZXIpOiBQaWVMYXlvdXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGFkQW5nbGU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChhbmdsZTogbnVtYmVyKTogUGllTGF5b3V0O1xuICAgICAgICAgICAgICAgIChhbmdsZTogKCkgPT4gbnVtYmVyKTogUGllTGF5b3V0O1xuICAgICAgICAgICAgICAgIChhbmdsZTogKGQgOiBhbnkpID0+IG51bWJlcik6IFBpZUxheW91dFxuICAgICAgICAgICAgICAgIChhbmdsZTogKGQgOiBhbnksIGk6IG51bWJlcikgPT4gbnVtYmVyKTogUGllTGF5b3V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQXJjRGVzY3JpcHRvciB7XG4gICAgICAgICAgICB2YWx1ZTogYW55O1xuICAgICAgICAgICAgZGF0YTogYW55O1xuICAgICAgICAgICAgc3RhcnRBbmdsZTogbnVtYmVyO1xuICAgICAgICAgICAgZW5kQW5nbGU6IG51bWJlcjtcbiAgICAgICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEdyYXBoTm9kZSAge1xuICAgICAgICAgICAgaWQ/OiBudW1iZXI7XG4gICAgICAgICAgICBpbmRleD86IG51bWJlcjtcbiAgICAgICAgICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgICAgICAgICBweD86IG51bWJlcjtcbiAgICAgICAgICAgIHB5PzogbnVtYmVyO1xuICAgICAgICAgICAgc2l6ZT86IG51bWJlcjtcbiAgICAgICAgICAgIHdlaWdodD86IG51bWJlcjtcbiAgICAgICAgICAgIHg/OiBudW1iZXI7XG4gICAgICAgICAgICB5PzogbnVtYmVyO1xuICAgICAgICAgICAgc3ViaW5kZXg/OiBudW1iZXI7XG4gICAgICAgICAgICBzdGFydEFuZ2xlPzogbnVtYmVyO1xuICAgICAgICAgICAgZW5kQW5nbGU/OiBudW1iZXI7XG4gICAgICAgICAgICB2YWx1ZT86IG51bWJlcjtcbiAgICAgICAgICAgIGZpeGVkPzogYm9vbGVhbjtcbiAgICAgICAgICAgIGNoaWxkcmVuPzogR3JhcGhOb2RlW107XG4gICAgICAgICAgICBfY2hpbGRyZW4/OiBHcmFwaE5vZGVbXTtcbiAgICAgICAgICAgIHBhcmVudD86IEdyYXBoTm9kZTtcbiAgICAgICAgICAgIGRlcHRoPzogbnVtYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBHcmFwaExpbmsge1xuICAgICAgICAgICAgc291cmNlOiBHcmFwaE5vZGU7XG4gICAgICAgICAgICB0YXJnZXQ6IEdyYXBoTm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgR3JhcGhOb2RlRm9yY2Uge1xuICAgICAgICAgICAgaW5kZXg/OiBudW1iZXI7XG4gICAgICAgICAgICB4PzogbnVtYmVyO1xuICAgICAgICAgICAgeT86IG51bWJlcjtcbiAgICAgICAgICAgIHB4PzogbnVtYmVyO1xuICAgICAgICAgICAgcHk/OiBudW1iZXI7XG4gICAgICAgICAgICBmaXhlZD86IGJvb2xlYW47XG4gICAgICAgICAgICB3ZWlnaHQ/OiBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEdyYXBoTGlua0ZvcmNlIHtcbiAgICAgICAgICAgIHNvdXJjZTogR3JhcGhOb2RlRm9yY2U7XG4gICAgICAgICAgICB0YXJnZXQ6IEdyYXBoTm9kZUZvcmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBGb3JjZUxheW91dCB7XG4gICAgICAgICAgICAoKTogRm9yY2VMYXlvdXQ7XG4gICAgICAgICAgICBzaXplOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdO1xuICAgICAgICAgICAgICAgIChteXNpemU6IG51bWJlcltdKTogRm9yY2VMYXlvdXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGlua0Rpc3RhbmNlOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAobnVtYmVyOm51bWJlcik6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGQ6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogRm9yY2VMYXlvdXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGlua1N0cmVuZ3RoOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKG51bWJlcjpudW1iZXIpOiBGb3JjZUxheW91dDtcbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZyaWN0aW9uOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKG51bWJlcjpudW1iZXIpOiBGb3JjZUxheW91dDtcbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFscGhhOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAobnVtYmVyOm51bWJlcik6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGQ6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogRm9yY2VMYXlvdXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2hhcmdlOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAobnVtYmVyOm51bWJlcik6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGQ6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogRm9yY2VMYXlvdXQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGV0YToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKG51bWJlcjpudW1iZXIpOiBGb3JjZUxheW91dDtcbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZ3Jhdml0eToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKG51bWJlcjpudW1iZXIpOiBGb3JjZUxheW91dDtcbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGlua3M6IHtcbiAgICAgICAgICAgICAgICAoKTogR3JhcGhMaW5rRm9yY2VbXTtcbiAgICAgICAgICAgICAgICAoYXJMaW5rczogR3JhcGhMaW5rRm9yY2VbXSk6IEZvcmNlTGF5b3V0O1xuXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbm9kZXM6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgKCk6IEdyYXBoTm9kZUZvcmNlW107XG4gICAgICAgICAgICAgICAgKGFyTm9kZXM6IEdyYXBoTm9kZUZvcmNlW10pOiBGb3JjZUxheW91dDtcblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN0YXJ0KCk6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgcmVzdW1lKCk6IEZvcmNlTGF5b3V0O1xuICAgICAgICAgICAgc3RvcCgpOiBGb3JjZUxheW91dDtcbiAgICAgICAgICAgIHRpY2soKTogRm9yY2VMYXlvdXQ7XG4gICAgICAgICAgICBvbih0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiAoYXJnOmFueSkgPT4gdm9pZCApOiBGb3JjZUxheW91dDtcbiAgICAgICAgICAgIGRyYWcoKTogRm9yY2VMYXlvdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEJ1bmRsZUxheW91dHtcbiAgICAgICAgICAgIChsaW5rczogR3JhcGhMaW5rW10pOiBHcmFwaE5vZGVbXVtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBDaG9yZExheW91dCB7XG4gICAgICAgICAgICBtYXRyaXg6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyW11bXTtcbiAgICAgICAgICAgICAgICAobWF0cml4OiBudW1iZXJbXVtdKTogQ2hvcmRMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAocGFkZGluZzogbnVtYmVyKTogQ2hvcmRMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3J0R3JvdXBzOiB7XG4gICAgICAgICAgICAgICAgKCk6IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIChjb21wYXJhdG9yOiAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IG51bWJlcik6IENob3JkTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc29ydFN1Ymdyb3Vwczoge1xuICAgICAgICAgICAgICAgICgpOiAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoY29tcGFyYXRvcjogKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiBudW1iZXIpOiBDaG9yZExheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvcnRDaG9yZHM6IHtcbiAgICAgICAgICAgICAgICAoKTogKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKGNvbXBhcmF0b3I6IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gbnVtYmVyKTogQ2hvcmRMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaG9yZHMoKTogR3JhcGhMaW5rW107XG4gICAgICAgICAgICBncm91cHMoKTogQXJjRGVzY3JpcHRvcltdO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBDbHVzdGVyTGF5b3V0e1xuICAgICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgICAgICgpOiAoYTogR3JhcGhOb2RlLCBiOiBHcmFwaE5vZGUpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoY29tcGFyYXRvcjogKGE6IEdyYXBoTm9kZSwgYjogR3JhcGhOb2RlKSA9PiBudW1iZXIpOiBDbHVzdGVyTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgICAgICAgICAoKTogKGQ6IGFueSwgaT86IG51bWJlcikgPT4gR3JhcGhOb2RlW107XG4gICAgICAgICAgICAgICAgKGNoaWxkcmVuOiAoZDogYW55LCBpPzogbnVtYmVyKSA9PiBHcmFwaE5vZGVbXSk6IENsdXN0ZXJMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2Rlcyhyb290OiBHcmFwaE5vZGUpOiBHcmFwaE5vZGVbXTtcbiAgICAgICAgICAgIGxpbmtzKG5vZGVzOiBHcmFwaE5vZGVbXSk6IEdyYXBoTGlua1tdO1xuICAgICAgICAgICAgc2VwYXJhdGlvbjoge1xuICAgICAgICAgICAgICAgICgpOiAoYTogR3JhcGhOb2RlLCBiOiBHcmFwaE5vZGUpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoc2VwYXJhdGlvbjogKGE6IEdyYXBoTm9kZSwgYjogR3JhcGhOb2RlKSA9PiBudW1iZXIpOiBDbHVzdGVyTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2l6ZToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXJbXTtcbiAgICAgICAgICAgICAgICAoc2l6ZTogbnVtYmVyW10pOiBDbHVzdGVyTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAoKTogKG5vZGU6IEdyYXBoTm9kZSkgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgICh2YWx1ZTogKG5vZGU6IEdyYXBoTm9kZSkgPT4gbnVtYmVyKTogQ2x1c3RlckxheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgSGllcmFyY2h5TGF5b3V0IHtcbiAgICAgICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgICAgICAoKTogKGE6IEdyYXBoTm9kZSwgYjogR3JhcGhOb2RlKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKGNvbXBhcmF0b3I6IChhOiBHcmFwaE5vZGUsIGI6IEdyYXBoTm9kZSkgPT4gbnVtYmVyKTogSGllcmFyY2h5TGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgICAgICAgICAoKTogKGQ6IGFueSwgaT86IG51bWJlcikgPT4gR3JhcGhOb2RlW107XG4gICAgICAgICAgICAgICAgKGNoaWxkcmVuOiAoZDogYW55LCBpPzogbnVtYmVyKSA9PiBHcmFwaE5vZGVbXSk6IEhpZXJhcmNoeUxheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGVzKHJvb3Q6IEdyYXBoTm9kZSk6IEdyYXBoTm9kZVtdO1xuICAgICAgICAgICAgbGlua3Mobm9kZXM6IEdyYXBoTm9kZVtdKTogR3JhcGhMaW5rW107XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICgpOiAobm9kZTogR3JhcGhOb2RlKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKHZhbHVlOiAobm9kZTogR3JhcGhOb2RlKSA9PiBudW1iZXIpOiBIaWVyYXJjaHlMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZVZhbHVlKHJvb3Q6IEdyYXBoTm9kZSk6IEhpZXJhcmNoeUxheW91dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQmluIGV4dGVuZHMgQXJyYXk8YW55PiB7XG4gICAgICAgICAgICB4OiBudW1iZXI7XG4gICAgICAgICAgICBkeDogbnVtYmVyO1xuICAgICAgICAgICAgeTogbnVtYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBIaXN0b2dyYW1MYXlvdXQge1xuICAgICAgICAgICAgKHZhbHVlczogYW55W10sIGluZGV4PzogbnVtYmVyKTogQmluW107XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICgpOiAodmFsdWU6IGFueSkgPT4gYW55O1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKHZhbHVlOiBhbnkpID0+IGFueSk6IEhpc3RvZ3JhbUxheW91dFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgICAoKTogKHZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcltdO1xuICAgICAgICAgICAgICAgIChyYW5nZTogKHZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcltdKTogSGlzdG9ncmFtTGF5b3V0O1xuICAgICAgICAgICAgICAgIChyYW5nZTogbnVtYmVyW10pOiBIaXN0b2dyYW1MYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiaW5zOiB7XG4gICAgICAgICAgICAgICAgKCk6IChyYW5nZTogYW55W10sIGluZGV4OiBudW1iZXIpID0+IG51bWJlcltdO1xuICAgICAgICAgICAgICAgIChiaW5zOiAocmFuZ2U6IGFueVtdLCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXJbXSk6IEhpc3RvZ3JhbUxheW91dDtcbiAgICAgICAgICAgICAgICAoYmluczogbnVtYmVyKTogSGlzdG9ncmFtTGF5b3V0O1xuICAgICAgICAgICAgICAgIChiaW5zOiBudW1iZXJbXSk6IEhpc3RvZ3JhbUxheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyZXF1ZW5jeToge1xuICAgICAgICAgICAgICAgICgpOiBib29sZWFuO1xuICAgICAgICAgICAgICAgIChmcmVxdWVuY3k6IGJvb2xlYW4pOiBIaXN0b2dyYW1MYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFBhY2tMYXlvdXQge1xuICAgICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgICAgICgpOiAoYTogR3JhcGhOb2RlLCBiOiBHcmFwaE5vZGUpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoY29tcGFyYXRvcjogKGE6IEdyYXBoTm9kZSwgYjogR3JhcGhOb2RlKSA9PiBudW1iZXIpOiBQYWNrTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgICAgICAgICAoKTogKGQ6IGFueSwgaT86IG51bWJlcikgPT4gR3JhcGhOb2RlW107XG4gICAgICAgICAgICAgICAgKGNoaWxkcmVuOiAoZDogYW55LCBpPzogbnVtYmVyKSA9PiBHcmFwaE5vZGVbXSk6IFBhY2tMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2Rlcyhyb290OiBHcmFwaE5vZGUpOiBHcmFwaE5vZGVbXTtcbiAgICAgICAgICAgIGxpbmtzKG5vZGVzOiBHcmFwaE5vZGVbXSk6IEdyYXBoTGlua1tdO1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAoKTogKG5vZGU6IEdyYXBoTm9kZSkgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgICh2YWx1ZTogKG5vZGU6IEdyYXBoTm9kZSkgPT4gbnVtYmVyKTogUGFja0xheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyW107XG4gICAgICAgICAgICAgICAgKHNpemU6IG51bWJlcltdKTogUGFja0xheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChwYWRkaW5nOiBudW1iZXIpOiBQYWNrTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBQYXJ0aXRpb25MYXlvdXQge1xuICAgICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgICAgICgpOiAoYTogR3JhcGhOb2RlLCBiOiBHcmFwaE5vZGUpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoY29tcGFyYXRvcjogKGE6IEdyYXBoTm9kZSwgYjogR3JhcGhOb2RlKSA9PiBudW1iZXIpOiBQYWNrTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgICAgICAgICAoKTogKGQ6IGFueSwgaT86IG51bWJlcikgPT4gR3JhcGhOb2RlW107XG4gICAgICAgICAgICAgICAgKGNoaWxkcmVuOiAoZDogYW55LCBpPzogbnVtYmVyKSA9PiBHcmFwaE5vZGVbXSk6IFBhY2tMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2Rlcyhyb290OiBHcmFwaE5vZGUpOiBHcmFwaE5vZGVbXTtcbiAgICAgICAgICAgIGxpbmtzKG5vZGVzOiBHcmFwaE5vZGVbXSk6IEdyYXBoTGlua1tdO1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAoKTogKG5vZGU6IEdyYXBoTm9kZSkgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgICh2YWx1ZTogKG5vZGU6IEdyYXBoTm9kZSkgPT4gbnVtYmVyKTogUGFja0xheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyW107XG4gICAgICAgICAgICAgICAgKHNpemU6IG51bWJlcltdKTogUGFja0xheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgVHJlZU1hcExheW91dCB7XG4gICAgICAgICAgICBzb3J0OiB7XG4gICAgICAgICAgICAgICAgKCk6IChhOiBHcmFwaE5vZGUsIGI6IEdyYXBoTm9kZSkgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIChjb21wYXJhdG9yOiAoYTogR3JhcGhOb2RlLCBiOiBHcmFwaE5vZGUpID0+IG51bWJlcik6IFRyZWVNYXBMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZHJlbjoge1xuICAgICAgICAgICAgICAgICgpOiAoZDogYW55LCBpPzogbnVtYmVyKSA9PiBHcmFwaE5vZGVbXTtcbiAgICAgICAgICAgICAgICAoY2hpbGRyZW46IChkOiBhbnksIGk/OiBudW1iZXIpID0+IEdyYXBoTm9kZVtdKTogVHJlZU1hcExheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGVzKHJvb3Q6IEdyYXBoTm9kZSk6IEdyYXBoTm9kZVtdO1xuICAgICAgICAgICAgbGlua3Mobm9kZXM6IEdyYXBoTm9kZVtdKTogR3JhcGhMaW5rW107XG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICgpOiAobm9kZTogR3JhcGhOb2RlKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKHZhbHVlOiAobm9kZTogR3JhcGhOb2RlKSA9PiBudW1iZXIpOiBUcmVlTWFwTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2l6ZToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXJbXTtcbiAgICAgICAgICAgICAgICAoc2l6ZTogbnVtYmVyW10pOiBUcmVlTWFwTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKHBhZGRpbmc6IG51bWJlcik6IFRyZWVNYXBMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3VuZDoge1xuICAgICAgICAgICAgICAgICgpOiBib29sZWFuO1xuICAgICAgICAgICAgICAgIChyb3VuZDogYm9vbGVhbik6IFRyZWVNYXBMYXlvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGlja3k6IHtcbiAgICAgICAgICAgICAgICAoKTogYm9vbGVhbjtcbiAgICAgICAgICAgICAgICAoc3RpY2t5OiBib29sZWFuKTogVHJlZU1hcExheW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vZGU6IHtcbiAgICAgICAgICAgICAgICAoKTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIChtb2RlOiBzdHJpbmcpOiBUcmVlTWFwTGF5b3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29sb3JcbiAgICBleHBvcnQgbW9kdWxlIENvbG9yIHtcbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBDb2xvciB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogaW5jcmVhc2UgbGlnaHRuZXNzIGJ5IHNvbWUgZXhwb25lbnRpYWwgZmFjdG9yIChnYW1tYSlcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBicmlnaHRlcihrPzogbnVtYmVyKTogQ29sb3I7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogZGVjcmVhc2UgbGlnaHRuZXNzIGJ5IHNvbWUgZXhwb25lbnRpYWwgZmFjdG9yIChnYW1tYSlcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBkYXJrZXIoaz86IG51bWJlcik6IENvbG9yO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGNvbnZlcnQgdGhlIGNvbG9yIHRvIGEgc3RyaW5nLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRvU3RyaW5nKCk6IHN0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgUkdCQ29sb3IgZXh0ZW5kcyBDb2xvcntcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiB0aGUgcmVkIGNvbG9yIGNoYW5uZWwuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgcjogbnVtYmVyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHRoZSBncmVlbiBjb2xvciBjaGFubmVsLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGc6IG51bWJlcjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiB0aGUgYmx1ZSBjb2xvciBjaGFubmVsLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGI6IG51bWJlcjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBjb252ZXJ0IGZyb20gUkdCIHRvIEhTTC5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBoc2woKTogSFNMQ29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEhTTENvbG9yIGV4dGVuZHMgQ29sb3J7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogaHVlXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaDogbnVtYmVyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHNhdHVyYXRpb25cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzOiBudW1iZXI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogbGlnaHRuZXNzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgbDogbnVtYmVyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGNvbnZlcnQgZnJvbSBIU0wgdG8gUkdCLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJnYigpOiBSR0JDb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgTEFCQ29sb3IgZXh0ZW5kcyBDb2xvcntcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBsaWdodG5lc3NcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBsOiBudW1iZXI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogYS1kaW1lbnNpb25cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBhOiBudW1iZXI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogYi1kaW1lbnNpb25cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBiOiBudW1iZXI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY29udmVydCBmcm9tIExBQiB0byBSR0IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmdiKCk6IFJHQkNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBIQ0xDb2xvciBleHRlbmRzIENvbG9ye1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGh1ZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGg6IG51bWJlcjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBjaHJvbWFcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjOiBudW1iZXI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogbHVtaW5hbmNlXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgbDogbnVtYmVyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGNvbnZlcnQgZnJvbSBIQ0wgdG8gUkdCLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJnYigpOiBSR0JDb2xvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNWR1xuICAgIGV4cG9ydCBtb2R1bGUgU3ZnIHtcbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBTdmcge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENyZWF0ZSBhIG5ldyBzeW1ib2wgZ2VuZXJhdG9yXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3ltYm9sKCk6IFN5bWJvbDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDcmVhdGUgYSBuZXcgYXhpcyBnZW5lcmF0b3JcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBheGlzKCk6IEF4aXM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ3JlYXRlIGEgbmV3IGFyYyBnZW5lcmF0b3JcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBhcmMoKTogQXJjO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENyZWF0ZSBhIG5ldyBsaW5lIGdlbmVyYXRvclxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxpbmU6IHtcbiAgICAgICAgICAgICAgICAoKTogTGluZTtcbiAgICAgICAgICAgICAgICByYWRpYWwoKTogTGluZVJhZGlhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDcmVhdGUgYSBuZXcgYXJlYSBnZW5lcmF0b3JcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBhcmVhOiB7XG4gICAgICAgICAgICAgICAgKCk6IEFyZWE7XG4gICAgICAgICAgICAgICAgcmFkaWFsKCk6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ3JlYXRlIGEgbmV3IGJydXNoIGdlbmVyYXRvclxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGJydXNoKCk6IEJydXNoO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENyZWF0ZSBhIG5ldyBjaG9yZCBnZW5lcmF0b3JcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjaG9yZCgpOiBDaG9yZDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDcmVhdGUgYSBuZXcgZGlhZ29uYWwgZ2VuZXJhdG9yXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGlhZ29uYWw6IHtcbiAgICAgICAgICAgICAgICAoKTogRGlhZ29uYWw7XG4gICAgICAgICAgICAgICAgcmFkaWFsKCk6IERpYWdvbmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFRoZSBhcnJheSBvZiBzdXBwb3J0ZWQgc3ltYm9sIHR5cGVzLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHN5bWJvbFR5cGVzOiBzdHJpbmdbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgU3ltYm9sIHtcbiAgICAgICAgICAgIHR5cGU6IChzeW1ib2xUeXBlOiBzdHJpbmcgfCAoKGRhdHVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHN0cmluZykpID0+IFN5bWJvbDtcbiAgICAgICAgICAgIHNpemU6IChzaXplOiBudW1iZXIgfCAoKGRhdHVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcikpID0+IFN5bWJvbDtcbiAgICAgICAgICAgIChkYXR1bT86IGFueSwgaW5kZXg/OiBudW1iZXIpOiBzdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEJydXNoIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBEcmF3cyBvciByZWRyYXdzIHRoaXMgYnJ1c2ggaW50byB0aGUgc3BlY2lmaWVkIHNlbGVjdGlvbiBvZiBlbGVtZW50c1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChzZWxlY3Rpb246IF9TZWxlY3Rpb248YW55Pik6IHZvaWQ7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0cyBvciBzZXRzIHRoZSB4LXNjYWxlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYnJ1c2hcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXRzICB0aGUgeC1zY2FsZSBhc3NvY2lhdGVkIHdpdGggdGhlIGJydXNoXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogRDMuU2NhbGUuU2NhbGU7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXRzIHRoZSB4LXNjYWxlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYnJ1c2hcbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBTY2FsZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKHNjYWxlOiBEMy5TY2FsZS5TY2FsZSk6IEJydXNoO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHgtc2NhbGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBicnVzaFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldHMgIHRoZSB4LXNjYWxlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYnJ1c2hcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiBEMy5TY2FsZS5TY2FsZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldHMgdGhlIHgtc2NhbGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBicnVzaFxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBhY2Nlc3NvciBUaGUgbmV3IFNjYWxlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoc2NhbGU6IEQzLlNjYWxlLlNjYWxlKTogQnJ1c2g7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY3VycmVudCBicnVzaCBleHRlbnRcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBleHRlbnQ6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgYnJ1c2ggZXh0ZW50XG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogYW55W107XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXRzIHRoZSBjdXJyZW50IGJydXNoIGV4dGVudFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKHZhbHVlczogYW55W10pOiBCcnVzaDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ2xlYXJzIHRoZSBleHRlbnQsIG1ha2luZyB0aGUgYnJ1c2ggZXh0ZW50IGVtcHR5LlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNsZWFyKCk6IEJydXNoO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhbmQgb25seSBpZiB0aGUgYnJ1c2ggZXh0ZW50IGlzIGVtcHR5XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZW1wdHkoKTogYm9vbGVhbjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGxpc3RlbmVyIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50IHR5cGVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0cyB0aGUgbGlzdGVuZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQgdHlwZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKHR5cGU6IHN0cmluZyk6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IGFueTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldHMgdGhlIGxpc3RlbmVyIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50IHR5cGVcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICh0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBhbnksIGNhcHR1cmU/OiBib29sZWFuKTogQnJ1c2g7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBBeGlzIHtcbiAgICAgICAgICAgIChzZWxlY3Rpb246IF9TZWxlY3Rpb248YW55Pik6IHZvaWQ7XG4gICAgICAgICAgICAodHJhbnNpdGlvbjogVHJhbnNpdGlvbi5UcmFuc2l0aW9uKTogdm9pZDtcblxuICAgICAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgICAgICAoKTogYW55O1xuICAgICAgICAgICAgICAgIChzY2FsZTogYW55KTogQXhpcztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG9yaWVudDoge1xuICAgICAgICAgICAgICAgICgpOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgKG9yaWVudGF0aW9uOiBzdHJpbmcpOiBBeGlzO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAoKTogYW55W107XG4gICAgICAgICAgICAgICAgKC4uLmFyZ3VtZW50czogYW55W10pOiBBeGlzO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGlja1BhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChwYWRkaW5nOiBudW1iZXIpOiBBeGlzO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGlja1ZhbHVlczoge1xuICAgICAgICAgICAgICAgICgpOiBhbnlbXTtcbiAgICAgICAgICAgICAgICAodmFsdWVzOiBhbnlbXSk6IEF4aXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGlja1N1YmRpdmlkZShjb3VudDogbnVtYmVyKTogQXhpcztcbiAgICAgICAgICAgIHRpY2tTaXplOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoaW5uZXI6IG51bWJlciwgb3V0ZXI/OiBudW1iZXIpOiBBeGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5uZXJUaWNrU2l6ZToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKHZhbHVlOiBudW1iZXIpOiBBeGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ZXJUaWNrU2l6ZToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKHZhbHVlOiBudW1iZXIpOiBBeGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGlja0Zvcm1hdChmb3JtYXR0ZXI6ICh2YWx1ZTogYW55LCBpbmRleD86IG51bWJlcikgPT4gc3RyaW5nKTogQXhpcztcbiAgICAgICAgICAgIG5pY2UoY291bnQ/OiBudW1iZXIpOiBBeGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBBcmMge1xuICAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBwYXRoIGRhdGEgc3RyaW5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0gZGF0YSBBcnJheSBvZiBkYXRhIGVsZW1lbnRzXG4gICAgICAgICAgICogQHBhcmFtIGluZGV4IE9wdGlvbmFsIGluZGV4XG4gICAgICAgICAgICovXG4gICAgICAgICAgIChkYXRhOiBhbnksIGluZGV4PzogbnVtYmVyKTogc3RyaW5nO1xuICAgICAgICAgICBpbm5lclJhZGl1czoge1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55LCBpbmRleD86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6IG51bWJlcik6IEFyYztcbiAgICAgICAgICAgICAgICAocmFkaXVzOiAoKSA9PiBudW1iZXIpOiBBcmM7XG4gICAgICAgICAgICAgICAgKHJhZGl1czogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJjO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEFyYztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvdXRlclJhZGl1czoge1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55LCBpbmRleD86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6IG51bWJlcik6IEFyYztcbiAgICAgICAgICAgICAgICAocmFkaXVzOiAoKSA9PiBudW1iZXIpOiBBcmM7XG4gICAgICAgICAgICAgICAgKHJhZGl1czogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJjO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEFyYztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdGFydEFuZ2xlOiB7XG4gICAgICAgICAgICAgICAgKCk6IChkYXRhOiBhbnksIGluZGV4PzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiBudW1iZXIpOiBBcmM7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoKSA9PiBudW1iZXIpOiBBcmM7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBBcmM7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBBcmM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZW5kQW5nbGU6IHtcbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXg/OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IG51bWJlcik6IEFyYztcbiAgICAgICAgICAgICAgICAoYW5nbGU6ICgpID0+IG51bWJlcik6IEFyYztcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkYXRhOiBhbnkpID0+IG51bWJlcik6IEFyYztcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEFyYztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjZW50cm9pZChkYXRhOiBhbnksIGluZGV4PzogbnVtYmVyKTogbnVtYmVyW107XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIExpbmUge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFJldHVybnMgdGhlIHBhdGggZGF0YSBzdHJpbmdcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIGRhdGEgQXJyYXkgb2YgZGF0YSBlbGVtZW50c1xuICAgICAgICAgICAgKiBAcGFyYW0gaW5kZXggT3B0aW9uYWwgaW5kZXhcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAoZGF0YTogYW55W10sIGluZGV4PzogbnVtYmVyKTogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIHgtY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIHgtY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55LCBpbmRleCA/OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgeC1jb29yZGluYXRlIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBhY2Nlc3NvciBUaGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkYXRhOiBhbnkpID0+IG51bWJlcik6IExpbmU7XG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBMaW5lO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSAgeC1jb29yZGluYXRlIHRvIGEgY29uc3RhbnQuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGNuc3QgVGhlIG5ldyBjb25zdGFudCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChjbnN0OiBudW1iZXIpOiBMaW5lO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgb3Igc2V0IHRoZSB5LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSB5LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHktY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBMaW5lO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogTGluZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgIHktY29vcmRpbmF0ZSB0byBhIGNvbnN0YW50LlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBjbnN0IFRoZSBuZXcgY29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoY25zdDogbnVtYmVyKTogTGluZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0IG9yIHNldCB0aGUgaW50ZXJwb2xhdGlvbiBtb2RlLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGludGVycG9sYXRlOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIGludGVycG9sYXRpb24gYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSBpbnRlcnBvbGF0aW9uIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBpbnRlcnBvbGF0ZSBUaGUgaW50ZXJwb2xhdGlvbiBtb2RlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoaW50ZXJwb2xhdGU6IHN0cmluZyk6IExpbmU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIGNhcmRpbmFsIHNwbGluZSB0ZW5zaW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRlbnNpb246IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgY2FyZGluYWwgc3BsaW5lIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgY2FyZGluYWwgc3BsaW5lIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSB0ZW5zaW9uIFRoZSBDYXJkaW5hbCBzcGxpbmUgaW50ZXJwb2xhdGlvbiB0ZW5zaW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAodGVuc2lvbjogbnVtYmVyKTogTGluZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29udHJvbCB3aGV0aGVyIHRoZSBsaW5lIGlzIGRlZmluZWQgYXQgYSBnaXZlbiBwb2ludC5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZWZpbmVkOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIGFjY2Vzc29yIGZ1bmN0aW9uIHRoYXQgY29udHJvbHMgd2hlcmUgdGhlIGxpbmUgaXMgZGVmaW5lZC5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55LCBpbmRleD86IG51bWJlcikgPT4gYm9vbGVhbjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgYWNjZXNzb3IgZnVuY3Rpb24gdGhhdCBjb250cm9scyB3aGVyZSB0aGUgYXJlYSBpcyBkZWZpbmVkLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBkZWZpbmVkIFRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChkZWZpbmVkOiAoZGF0YTogYW55LCBpbmRleD86IG51bWJlcikgPT4gYm9vbGVhbik6IExpbmU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBMaW5lUmFkaWFsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBwYXRoIGRhdGEgc3RyaW5nXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSBkYXRhIEFycmF5IG9mIGRhdGEgZWxlbWVudHNcbiAgICAgICAgICAgICogQHBhcmFtIGluZGV4IE9wdGlvbmFsIGluZGV4XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKGRhdGE6IGFueVtdLCBpbmRleD86IG51bWJlcik6IHN0cmluZztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgb3Igc2V0IHRoZSB4LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSB4LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHgtY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBMaW5lUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogTGluZVJhZGlhbDtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSAgeC1jb29yZGluYXRlIHRvIGEgY29uc3RhbnQuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGNuc3QgVGhlIG5ldyBjb25zdGFudCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChjbnN0OiBudW1iZXIpOiBMaW5lUmFkaWFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgb3Igc2V0IHRoZSB5LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSB5LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHktY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBMaW5lUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogTGluZVJhZGlhbDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgIHktY29vcmRpbmF0ZSB0byBhIGNvbnN0YW50LlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBjbnN0IFRoZSBuZXcgY29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoY25zdDogbnVtYmVyKTogTGluZVJhZGlhbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0IG9yIHNldCB0aGUgaW50ZXJwb2xhdGlvbiBtb2RlLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGludGVycG9sYXRlOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIGludGVycG9sYXRpb24gYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSBpbnRlcnBvbGF0aW9uIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBpbnRlcnBvbGF0ZSBUaGUgaW50ZXJwb2xhdGlvbiBtb2RlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoaW50ZXJwb2xhdGU6IHN0cmluZyk6IExpbmVSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIGNhcmRpbmFsIHNwbGluZSB0ZW5zaW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRlbnNpb246IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgY2FyZGluYWwgc3BsaW5lIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgY2FyZGluYWwgc3BsaW5lIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSB0ZW5zaW9uIFRoZSBDYXJkaW5hbCBzcGxpbmUgaW50ZXJwb2xhdGlvbiB0ZW5zaW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAodGVuc2lvbjogbnVtYmVyKTogTGluZVJhZGlhbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29udHJvbCB3aGV0aGVyIHRoZSBsaW5lIGlzIGRlZmluZWQgYXQgYSBnaXZlbiBwb2ludC5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZWZpbmVkOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIGFjY2Vzc29yIGZ1bmN0aW9uIHRoYXQgY29udHJvbHMgd2hlcmUgdGhlIGxpbmUgaXMgZGVmaW5lZC5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55KSA9PiBhbnk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIGFjY2Vzc29yIGZ1bmN0aW9uIHRoYXQgY29udHJvbHMgd2hlcmUgdGhlIGFyZWEgaXMgZGVmaW5lZC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gZGVmaW5lZCBUaGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoZGVmaW5lZDogKGRhdGE6IGFueSkgPT4gYW55KTogTGluZVJhZGlhbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByYWRpdXM6IHtcbiAgICAgICAgICAgICAgICAoKTogKGQ6IGFueSwgaT86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6IG51bWJlcik6IExpbmVSYWRpYWw7XG4gICAgICAgICAgICAgICAgKHJhZGl1czogKGQ6IGFueSkgPT4gbnVtYmVyKTogTGluZVJhZGlhbDtcbiAgICAgICAgICAgICAgICAocmFkaXVzOiAoZDogYW55LCBpOiBudW1iZXIpID0+IG51bWJlcik6IExpbmVSYWRpYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmdsZToge1xuICAgICAgICAgICAgICAgICgpOiAoZDogYW55LCBpPzogYW55KSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiBudW1iZXIpOiBMaW5lUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhbmdsZTogKGQ6IGFueSkgPT4gbnVtYmVyKTogTGluZVJhZGlhbDtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkOiBhbnksIGk6IGFueSkgPT4gbnVtYmVyKTogTGluZVJhZGlhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQXJlYSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2VuZXJhdGUgYSBwaWVjZXdpc2UgbGluZWFyIGFyZWEsIGFzIGluIGFuIGFyZWEgY2hhcnQuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKGRhdGE6IGFueVtdLCBpbmRleD86IG51bWJlcik6IHN0cmluZztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgb3Igc2V0IHRoZSB4LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSB4LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHgtY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBBcmVhO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogQXJlYTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgIHgtY29vcmRpbmF0ZSB0byBhIGNvbnN0YW50LlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBjbnN0IFRoZSBuZXcgY29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoY25zdDogbnVtYmVyKTogQXJlYTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0IG9yIHNldCB0aGUgeDAtY29vcmRpbmF0ZSAoYmFzZWxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHgwOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlICB4MC1jb29yZGluYXRlIChiYXNlbGluZSkgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlICB4MC1jb29yZGluYXRlIChiYXNlbGluZSkgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGFjY2Vzc29yIFRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJlYTtcbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEFyZWE7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlICB4MC1jb29yZGluYXRlIChiYXNlbGluZSkgdG8gYSBjb25zdGFudC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gY25zdCBUaGUgbmV3IGNvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNuc3Q6IG51bWJlcik6IEFyZWE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIHgxLWNvb3JkaW5hdGUgKHRvcGxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHgxOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlICB4MS1jb29yZGluYXRlICh0b3BsaW5lKSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55LCBpbmRleCA/OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgIHgxLWNvb3JkaW5hdGUgKHRvcGxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBhY2Nlc3NvciBUaGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkYXRhOiBhbnkpID0+IG51bWJlcik6IEFyZWE7XG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBBcmVhO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSAgeDEtY29vcmRpbmF0ZSAodG9wbGluZSkgdG8gYSBjb25zdGFudC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gY25zdCBUaGUgbmV3IGNvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNuc3Q6IG51bWJlcik6IEFyZWE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIHktY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIHktY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55LCBpbmRleCA/OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgeS1jb29yZGluYXRlIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBhY2Nlc3NvciBUaGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkYXRhOiBhbnkpID0+IG51bWJlcik6IEFyZWE7XG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBBcmVhO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSB5LWNvb3JkaW5hdGUgdG8gYSBjb25zdGFudC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gY25zdCBUaGUgY29uc3RhbnQgdmFsdWVcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChjbnN0OiBudW1iZXIpOiBBcmVhO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgb3Igc2V0IHRoZSB5MC1jb29yZGluYXRlIChiYXNlbGluZSkgYWNjZXNzb3IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgeTA6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgeTAtY29vcmRpbmF0ZSAoYmFzZWxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IChkYXRhOiBhbnksIGluZGV4ID86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSB5MC1jb29yZGluYXRlIChiYXNlbGluZSkgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGFjY2Vzc29yIFRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJlYTtcbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEFyZWE7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHkwLWNvb3JkaW5hdGUgKGJhc2VsaW5lKSB0byBhIGNvbnN0YW50LlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBjbnN0IFRoZSBjb25zdGFudCB2YWx1ZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNuc3Q6IG51bWJlcik6IEFyZWE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIHkxLWNvb3JkaW5hdGUgKHRvcGxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHkxOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIHkxLWNvb3JkaW5hdGUgKHRvcGxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IChkYXRhOiBhbnksIGluZGV4ID86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSB5MS1jb29yZGluYXRlICh0b3BsaW5lKSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBBcmVhO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogQXJlYTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgeTEtY29vcmRpbmF0ZSAoYmFzZWxpbmUpIHRvIGEgY29uc3RhbnQuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGNuc3QgVGhlIGNvbnN0YW50IHZhbHVlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoY25zdDogbnVtYmVyKTogQXJlYTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0IG9yIHNldCB0aGUgaW50ZXJwb2xhdGlvbiBtb2RlLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGludGVycG9sYXRlOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIGludGVycG9sYXRpb24gYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSBpbnRlcnBvbGF0aW9uIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBpbnRlcnBvbGF0ZSBUaGUgaW50ZXJwb2xhdGlvbiBtb2RlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoaW50ZXJwb2xhdGU6IHN0cmluZyk6IEFyZWE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIGNhcmRpbmFsIHNwbGluZSB0ZW5zaW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRlbnNpb246IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgY2FyZGluYWwgc3BsaW5lIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgY2FyZGluYWwgc3BsaW5lIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSB0ZW5zaW9uIFRoZSBDYXJkaW5hbCBzcGxpbmUgaW50ZXJwb2xhdGlvbiB0ZW5zaW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAodGVuc2lvbjogbnVtYmVyKTogQXJlYTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29udHJvbCB3aGV0aGVyIHRoZSBhcmVhIGlzIGRlZmluZWQgYXQgYSBnaXZlbiBwb2ludC5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZWZpbmVkOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIGFjY2Vzc29yIGZ1bmN0aW9uIHRoYXQgY29udHJvbHMgd2hlcmUgdGhlIGFyZWEgaXMgZGVmaW5lZC5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55LCBpbmRleD86IG51bWJlcikgPT4gYW55O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSBhY2Nlc3NvciBmdW5jdGlvbiB0aGF0IGNvbnRyb2xzIHdoZXJlIHRoZSBhcmVhIGlzIGRlZmluZWQuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGRlZmluZWQgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGRlZmluZWQ6IChkYXRhOiBhbnksIGluZGV4PzogbnVtYmVyKSA9PiBhbnkpOiBBcmVhO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQXJlYVJhZGlhbCB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2VuZXJhdGUgYSBwaWVjZXdpc2UgbGluZWFyIGFyZWEsIGFzIGluIGFuIGFyZWEgY2hhcnQuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKGRhdGE6IGFueVtdLCBpbmRleD86IG51bWJlcik6IHN0cmluZztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgb3Igc2V0IHRoZSB4LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSB4LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHgtY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgIHgtY29vcmRpbmF0ZSB0byBhIGNvbnN0YW50LlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBjbnN0IFRoZSBuZXcgY29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoY25zdDogbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0IG9yIHNldCB0aGUgeDAtY29vcmRpbmF0ZSAoYmFzZWxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHgwOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlICB4MC1jb29yZGluYXRlIChiYXNlbGluZSkgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlICB4MC1jb29yZGluYXRlIChiYXNlbGluZSkgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGFjY2Vzc29yIFRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlICB4MC1jb29yZGluYXRlIHRvIGEgY29uc3RhbnQuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGNuc3QgVGhlIG5ldyBjb25zdGFudCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChjbnN0OiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgb3Igc2V0IHRoZSB4MS1jb29yZGluYXRlICh0b3BsaW5lKSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB4MToge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSAgeDEtY29vcmRpbmF0ZSAodG9wbGluZSkgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlICB4MS1jb29yZGluYXRlICh0b3BsaW5lKSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgIHgxLWNvb3JkaW5hdGUgdG8gYSBjb25zdGFudC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gY25zdCBUaGUgbmV3IGNvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNuc3Q6IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIHktY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIHktY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogYW55LCBpbmRleCA/OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgeS1jb29yZGluYXRlIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBhY2Nlc3NvciBUaGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkYXRhOiBhbnkpID0+IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSB5LWNvb3JkaW5hdGUgdG8gYSBjb25zdGFudC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gY25zdCBUaGUgbmV3IGNvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNuc3Q6IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIHkwLWNvb3JkaW5hdGUgKGJhc2VsaW5lKSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB5MDoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSB5MC1jb29yZGluYXRlIChiYXNlbGluZSkgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHkwLWNvb3JkaW5hdGUgKGJhc2VsaW5lKSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgIHkwLWNvb3JkaW5hdGUgdG8gYSBjb25zdGFudC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gY25zdCBUaGUgbmV3IGNvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNuc3Q6IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIHkxLWNvb3JkaW5hdGUgKHRvcGxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHkxOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIHkxLWNvb3JkaW5hdGUgKHRvcGxpbmUpIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IChkYXRhOiBhbnksIGluZGV4ID86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSB5MS1jb29yZGluYXRlICh0b3BsaW5lKSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogYW55KSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhY2Nlc3NvcjogKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgIHkxLWNvb3JkaW5hdGUgdG8gYSBjb25zdGFudC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gY25zdCBUaGUgbmV3IGNvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNuc3Q6IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCBvciBzZXQgdGhlIGludGVycG9sYXRpb24gbW9kZS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbnRlcnBvbGF0ZToge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSBpbnRlcnBvbGF0aW9uIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IHN0cmluZztcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgaW50ZXJwb2xhdGlvbiBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gaW50ZXJwb2xhdGUgVGhlIGludGVycG9sYXRpb24gbW9kZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGludGVycG9sYXRlOiBzdHJpbmcpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgb3Igc2V0IHRoZSBjYXJkaW5hbCBzcGxpbmUgdGVuc2lvbi5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB0ZW5zaW9uOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIGNhcmRpbmFsIHNwbGluZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIGNhcmRpbmFsIHNwbGluZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gdGVuc2lvbiBUaGUgQ2FyZGluYWwgc3BsaW5lIGludGVycG9sYXRpb24gdGVuc2lvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKHRlbnNpb246IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnRyb2wgd2hldGhlciB0aGUgYXJlYSBpcyBkZWZpbmVkIGF0IGEgZ2l2ZW4gcG9pbnQuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGVmaW5lZDoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSBhY2Nlc3NvciBmdW5jdGlvbiB0aGF0IGNvbnRyb2xzIHdoZXJlIHRoZSBhcmVhIGlzIGRlZmluZWQuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IGFueSkgPT4gYW55O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSBhY2Nlc3NvciBmdW5jdGlvbiB0aGF0IGNvbnRyb2xzIHdoZXJlIHRoZSBhcmVhIGlzIGRlZmluZWQuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGRlZmluZWQgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGRlZmluZWQ6IChkYXRhOiBhbnkpID0+IGFueSk6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmFkaXVzOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAocmFkaXVzOiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6ICgpID0+IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICAgICAgKHJhZGl1czogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAocmFkaXVzOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlubmVyUmFkaXVzOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAocmFkaXVzOiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6ICgpID0+IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICAgICAgKHJhZGl1czogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAocmFkaXVzOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG91dGVyUmFkaXVzOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAocmFkaXVzOiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6ICgpID0+IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICAgICAgKHJhZGl1czogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAocmFkaXVzOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFuZ2xlOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoKSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhbmdsZTogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RhcnRBbmdsZToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhbmdsZTogKCkgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkYXRhOiBhbnkpID0+IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoZGF0YTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVuZEFuZ2xlOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoKSA9PiBudW1iZXIpOiBBcmVhUmFkaWFsO1xuICAgICAgICAgICAgICAgIChhbmdsZTogKGRhdGE6IGFueSkgPT4gbnVtYmVyKTogQXJlYVJhZGlhbDtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcik6IEFyZWFSYWRpYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBDaG9yZCB7XG4gICAgICAgICAgICAoZGF0dW06IGFueSwgaW5kZXg/OiBudW1iZXIpOiBzdHJpbmc7XG4gICAgICAgICAgICByYWRpdXM6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6IG51bWJlcik6IENob3JkO1xuICAgICAgICAgICAgICAgIChyYWRpdXM6ICgpID0+IG51bWJlcik6IENob3JkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChhbmdsZTogbnVtYmVyKTogQ2hvcmQ7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiAoKSA9PiBudW1iZXIpOiBDaG9yZDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlbmRBbmdsZToge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiBudW1iZXIpOiBDaG9yZDtcbiAgICAgICAgICAgICAgICAoYW5nbGU6ICgpID0+IG51bWJlcik6IENob3JkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgICAgICgpOiBhbnk7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiBhbnkpOiBDaG9yZDtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkOiBhbnksIGk/OiBudW1iZXIpID0+IGFueSk6IENob3JkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgICgpOiBhbnk7XG4gICAgICAgICAgICAgICAgKGFuZ2xlOiBhbnkpOiBDaG9yZDtcbiAgICAgICAgICAgICAgICAoYW5nbGU6IChkOiBhbnksIGk/OiBudW1iZXIpID0+IGFueSk6IENob3JkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgRGlhZ29uYWwge1xuICAgICAgICAgICAgKGRhdHVtOiBhbnksIGluZGV4PzogbnVtYmVyKTogc3RyaW5nO1xuICAgICAgICAgICAgcHJvamVjdGlvbjoge1xuICAgICAgICAgICAgICAgICgpOiAoZGF0dW06IGFueSwgaW5kZXg/OiBudW1iZXIpID0+IG51bWJlcltdO1xuICAgICAgICAgICAgICAgIChwcm9qOiAoZGF0dW06IGFueSkgPT4gbnVtYmVyW10pOiBEaWFnb25hbDtcbiAgICAgICAgICAgICAgICAocHJvajogKGRhdHVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IG51bWJlcltdKTogRGlhZ29uYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICAgICAgKCk6IChkYXR1bTogYW55LCBpbmRleD86IG51bWJlcikgPT4gYW55O1xuICAgICAgICAgICAgICAgIChzcmM6IChkYXR1bTogYW55KSA9PiBhbnkpOiBEaWFnb25hbDtcbiAgICAgICAgICAgICAgICAoc3JjOiAoZGF0dW06IGFueSwgaW5kZXg6IG51bWJlcikgPT4gYW55KTogRGlhZ29uYWw7XG4gICAgICAgICAgICAgICAgKHNyYzogYW55KTogRGlhZ29uYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICAgICAgKCk6IChkYXR1bTogYW55LCBpbmRleD86IG51bWJlcikgPT4gYW55O1xuICAgICAgICAgICAgICAgICh0YXJnZXQ6IChkOiBhbnkpID0+IGFueSk6IERpYWdvbmFsO1xuICAgICAgICAgICAgICAgICh0YXJnZXQ6IChkOiBhbnksIGk6IG51bWJlcikgPT4gYW55KTogRGlhZ29uYWw7XG4gICAgICAgICAgICAgICAgKHRhcmdldDogYW55KTogRGlhZ29uYWw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2NhbGVzXG4gICAgZXhwb3J0IG1vZHVsZSBTY2FsZSB7XG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgU2NhbGVCYXNlIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3QgYSBsaW5lYXIgcXVhbnRpdGF0aXZlIHNjYWxlLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxpbmVhcigpOiBMaW5lYXJTY2FsZTtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAqIENvbnN0cnVjdCBhbiBvcmRpbmFsIHNjYWxlLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9yZGluYWwoKTogT3JkaW5hbFNjYWxlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnN0cnVjdCBhIGxpbmVhciBxdWFudGl0YXRpdmUgc2NhbGUgd2l0aCBhIGRpc2NyZXRlIG91dHB1dCByYW5nZS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBxdWFudGl6ZSgpOiBRdWFudGl6ZVNjYWxlO1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICogQ29uc3RydWN0IGFuIG9yZGluYWwgc2NhbGUgd2l0aCB0ZW4gY2F0ZWdvcmljYWwgY29sb3JzLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhdGVnb3J5MTAoKTogT3JkaW5hbFNjYWxlO1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICogQ29uc3RydWN0IGFuIG9yZGluYWwgc2NhbGUgd2l0aCB0d2VudHkgY2F0ZWdvcmljYWwgY29sb3JzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2F0ZWdvcnkyMCgpOiBPcmRpbmFsU2NhbGU7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3QgYW4gb3JkaW5hbCBzY2FsZSB3aXRoIHR3ZW50eSBjYXRlZ29yaWNhbCBjb2xvcnNcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjYXRlZ29yeTIwYigpOiBPcmRpbmFsU2NhbGU7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3QgYW4gb3JkaW5hbCBzY2FsZSB3aXRoIHR3ZW50eSBjYXRlZ29yaWNhbCBjb2xvcnNcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjYXRlZ29yeTIwYygpOiBPcmRpbmFsU2NhbGU7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3QgYSBsaW5lYXIgaWRlbnRpdHkgc2NhbGUuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWRlbnRpdHkoKTogSWRlbnRpdHlTY2FsZTtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAqIENvbnN0cnVjdCBhIHF1YW50aXRhdGl2ZSBzY2FsZSB3aXRoIGFuIGxvZ2FyaXRobWljIHRyYW5zZm9ybS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBsb2coKTogTG9nU2NhbGU7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3QgYSBxdWFudGl0YXRpdmUgc2NhbGUgd2l0aCBhbiBleHBvbmVudGlhbCB0cmFuc2Zvcm0uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgcG93KCk6IFBvd1NjYWxlO1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICogQ29uc3RydWN0IGEgcXVhbnRpdGF0aXZlIHNjYWxlIG1hcHBpbmcgdG8gcXVhbnRpbGVzLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHF1YW50aWxlKCk6IFF1YW50aWxlU2NhbGU7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3QgYSBxdWFudGl0YXRpdmUgc2NhbGUgd2l0aCBhIHNxdWFyZSByb290IHRyYW5zZm9ybS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzcXJ0KCk6IFNxcnRTY2FsZTtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAqIENvbnN0cnVjdCBhIHRocmVzaG9sZCBzY2FsZSB3aXRoIGEgZGlzY3JldGUgb3V0cHV0IHJhbmdlLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRocmVzaG9sZCgpOiBUaHJlc2hvbGRTY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgR2VuZXJpY1NjYWxlPFM+IHtcbiAgICAgICAgICAgICh2YWx1ZTogYW55KTogYW55O1xuICAgICAgICAgICAgZG9tYWluOiB7XG4gICAgICAgICAgICAgICAgKHZhbHVlczogYW55W10pOiBTO1xuICAgICAgICAgICAgICAgICgpOiBhbnlbXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgICAgICh2YWx1ZXM6IGFueVtdKTogUztcbiAgICAgICAgICAgICAgICAoKTogYW55W107XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaW52ZXJ0RXh0ZW50Pyh5OiBhbnkpOiBhbnlbXTtcbiAgICAgICAgICAgIGNvcHkoKTogUztcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgU2NhbGUgZXh0ZW5kcyBHZW5lcmljU2NhbGU8U2NhbGU+IHsgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgR2VuZXJpY1F1YW50aXRhdGl2ZVNjYWxlPFM+IGV4dGVuZHMgR2VuZXJpY1NjYWxlPFM+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgdGhlIHJhbmdlIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gYSBnaXZlbiBkb21haW4gdmFsdWUuXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZSBEb21haW4gVmFsdWVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAodmFsdWU6IG51bWJlcik6IG51bWJlcjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXQgdGhlIGRvbWFpbiB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIGEgZ2l2ZW4gcmFuZ2UgdmFsdWUuXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZSBSYW5nZSBWYWx1ZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGludmVydCh2YWx1ZTogbnVtYmVyKTogbnVtYmVyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFNldCB0aGUgc2NhbGUncyBvdXRwdXQgcmFuZ2UsIGFuZCBlbmFibGUgcm91bmRpbmcuXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgb3V0cHV0IHJhbmdlLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJhbmdlUm91bmQ6ICh2YWx1ZXM6IGFueVtdKSA9PiBTO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGdldCBvciBzZXQgdGhlIHNjYWxlJ3Mgb3V0cHV0IGludGVycG9sYXRvci5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBpbnRlcnBvbGF0ZToge1xuICAgICAgICAgICAgICAgICgpOiBEMy5UcmFuc2l0aW9uLkludGVycG9sYXRlO1xuICAgICAgICAgICAgICAgIChmYWN0b3J5OiBEMy5UcmFuc2l0aW9uLkludGVycG9sYXRlKTogUztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogZW5hYmxlIG9yIGRpc2FibGUgY2xhbXBpbmcgb2YgdGhlIG91dHB1dCByYW5nZS5cbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIGNsYW1wIEVuYWJsZSBvciBkaXNhYmxlXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2xhbXA6IHtcbiAgICAgICAgICAgICAgICAoKTogYm9vbGVhbjtcbiAgICAgICAgICAgICAgICAoY2xhbXA6IGJvb2xlYW4pOiBTO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGV4dGVuZCB0aGUgc2NhbGUgZG9tYWluIHRvIG5pY2Ugcm91bmQgbnVtYmVycy5cbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIGNvdW50IE9wdGlvbmFsIG51bWJlciBvZiB0aWNrcyB0byBleGFjdGx5IGZpdCB0aGUgZG9tYWluXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgbmljZShjb3VudD86IG51bWJlcik6IFM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogZ2V0IHJlcHJlc2VudGF0aXZlIHZhbHVlcyBmcm9tIHRoZSBpbnB1dCBkb21haW4uXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSBjb3VudCBBcHJveGltYXRlIHJlcHJlc2VudGF0aXZlIHZhbHVlcyB0byByZXR1cm4uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGlja3MoY291bnQ6IG51bWJlcik6IGFueVtdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGdldCBhIGZvcm1hdHRlciBmb3IgZGlzcGxheWluZyB0aWNrIHZhbHVlc1xuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBAcGFyYW0gY291bnQgQXByb3hpbWF0ZSByZXByZXNlbnRhdGl2ZSB2YWx1ZXMgdG8gcmV0dXJuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGlja0Zvcm1hdChjb3VudDogbnVtYmVyLCBmb3JtYXQ/OiBzdHJpbmcpOiAobjogbnVtYmVyKSA9PiBzdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFF1YW50aXRhdGl2ZVNjYWxlIGV4dGVuZHMgR2VuZXJpY1F1YW50aXRhdGl2ZVNjYWxlPFF1YW50aXRhdGl2ZVNjYWxlPiB7IH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIExpbmVhclNjYWxlIGV4dGVuZHMgR2VuZXJpY1F1YW50aXRhdGl2ZVNjYWxlPExpbmVhclNjYWxlPiB7IH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIElkZW50aXR5U2NhbGUgZXh0ZW5kcyBHZW5lcmljU2NhbGU8SWRlbnRpdHlTY2FsZT4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCB0aGUgcmFuZ2UgdmFsdWUgY29ycmVzcG9uZGluZyB0byBhIGdpdmVuIGRvbWFpbiB2YWx1ZS5cbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIHZhbHVlIERvbWFpbiBWYWx1ZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICh2YWx1ZTogbnVtYmVyKTogbnVtYmVyO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldCB0aGUgZG9tYWluIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gYSBnaXZlbiByYW5nZSB2YWx1ZS5cbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIHZhbHVlIFJhbmdlIFZhbHVlXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW52ZXJ0KHZhbHVlOiBudW1iZXIpOiBudW1iZXI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogZ2V0IHJlcHJlc2VudGF0aXZlIHZhbHVlcyBmcm9tIHRoZSBpbnB1dCBkb21haW4uXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBwYXJhbSBjb3VudCBBcHJveGltYXRlIHJlcHJlc2VudGF0aXZlIHZhbHVlcyB0byByZXR1cm4uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGlja3MoY291bnQ6IG51bWJlcik6IGFueVtdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGdldCBhIGZvcm1hdHRlciBmb3IgZGlzcGxheWluZyB0aWNrIHZhbHVlc1xuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBAcGFyYW0gY291bnQgQXByb3hpbWF0ZSByZXByZXNlbnRhdGl2ZSB2YWx1ZXMgdG8gcmV0dXJuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGlja0Zvcm1hdChjb3VudDogbnVtYmVyKTogKG46IG51bWJlcikgPT4gc3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBTcXJ0U2NhbGUgZXh0ZW5kcyBHZW5lcmljUXVhbnRpdGF0aXZlU2NhbGU8U3FydFNjYWxlPiB7IH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFBvd1NjYWxlIGV4dGVuZHMgR2VuZXJpY1F1YW50aXRhdGl2ZVNjYWxlPFBvd1NjYWxlPiB7IH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIExvZ1NjYWxlIGV4dGVuZHMgR2VuZXJpY1F1YW50aXRhdGl2ZVNjYWxlPExvZ1NjYWxlPiB7IH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIE9yZGluYWxTY2FsZSBleHRlbmRzIEdlbmVyaWNTY2FsZTxPcmRpbmFsU2NhbGU+IHtcbiAgICAgICAgICAgIHJhbmdlUG9pbnRzKGludGVydmFsOiBhbnlbXSwgcGFkZGluZz86IG51bWJlcik6IE9yZGluYWxTY2FsZTtcbiAgICAgICAgICAgIHJhbmdlQmFuZHMoaW50ZXJ2YWw6IGFueVtdLCBwYWRkaW5nPzogbnVtYmVyLCBvdXRlclBhZGRpbmc/OiBudW1iZXIpOiBPcmRpbmFsU2NhbGU7XG4gICAgICAgICAgICByYW5nZVJvdW5kQmFuZHMoaW50ZXJ2YWw6IGFueVtdLCBwYWRkaW5nPzogbnVtYmVyLCBvdXRlclBhZGRpbmc/OiBudW1iZXIpOiBPcmRpbmFsU2NhbGU7XG4gICAgICAgICAgICByYW5nZUJhbmQoKTogbnVtYmVyO1xuICAgICAgICAgICAgcmFuZ2VFeHRlbnQoKTogYW55W107XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFF1YW50aXplU2NhbGUgZXh0ZW5kcyBHZW5lcmljU2NhbGU8UXVhbnRpemVTY2FsZT4geyB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBUaHJlc2hvbGRTY2FsZSBleHRlbmRzIEdlbmVyaWNTY2FsZTxUaHJlc2hvbGRTY2FsZT4geyB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBRdWFudGlsZVNjYWxlIGV4dGVuZHMgR2VuZXJpY1NjYWxlPFF1YW50aWxlU2NhbGU+IHtcbiAgICAgICAgICAgIHF1YW50aWxlcygpOiBhbnlbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgVGltZVNjYWxlIGV4dGVuZHMgR2VuZXJpY1NjYWxlPFRpbWVTY2FsZT4ge1xuICAgICAgICAgICAgKHZhbHVlOiBEYXRlKTogbnVtYmVyO1xuICAgICAgICAgICAgaW52ZXJ0KHZhbHVlOiBudW1iZXIpOiBEYXRlO1xuICAgICAgICAgICAgcmFuZ2VSb3VuZDogKHZhbHVlczogYW55W10pID0+IFRpbWVTY2FsZTtcbiAgICAgICAgICAgIGludGVycG9sYXRlOiB7XG4gICAgICAgICAgICAgICAgKCk6IEQzLlRyYW5zaXRpb24uSW50ZXJwb2xhdGU7XG4gICAgICAgICAgICAgICAgKGZhY3Rvcnk6IEQzLlRyYW5zaXRpb24uSW50ZXJwb2xhdGVGYWN0b3J5KTogVGltZVNjYWxlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNsYW1wKGNsYW1wOiBib29sZWFuKTogVGltZVNjYWxlO1xuICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAoY291bnQ6IG51bWJlcik6IGFueVtdO1xuICAgICAgICAgICAgICAgIChyYW5nZTogRDMuVGltZS5SYW5nZSwgY291bnQ6IG51bWJlcik6IGFueVtdO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRpY2tGb3JtYXQoY291bnQ6IG51bWJlcik6IChuOiBudW1iZXIpID0+IHN0cmluZztcbiAgICAgICAgICAgIG5pY2UoY291bnQ/OiBudW1iZXIpOiBUaW1lU2NhbGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCZWhhdmlvdXJcbiAgICBleHBvcnQgbW9kdWxlIEJlaGF2aW9yIHtcbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBCZWhhdmlvcntcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGRyYWcgYmVoYXZpb3VyXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZHJhZygpOiBEcmFnO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgem9vbSBiZWhhdmlvdXJcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB6b29tKCk6IFpvb207XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFpvb20ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEFwcGxpZXMgdGhlIHpvb20gYmVoYXZpb3IgdG8gdGhlIHNwZWNpZmllZCBzZWxlY3Rpb24sXG4gICAgICAgICAgICAqIHJlZ2lzdGVyaW5nIHRoZSBuZWNlc3NhcnkgZXZlbnQgbGlzdGVuZXJzIHRvIHN1cHBvcnRcbiAgICAgICAgICAgICogcGFubmluZyBhbmQgem9vbWluZy5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAoc2VsZWN0aW9uOiBfU2VsZWN0aW9uPGFueT4pOiB2b2lkO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogUmVnaXN0ZXJzIGEgbGlzdGVuZXIgdG8gcmVjZWl2ZSBldmVudHNcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQHBhcmFtIHR5cGUgRW5lbnQgbmFtZSB0byBhdHRhY2ggdGhlIGxpc3RlbmVyIHRvXG4gICAgICAgICAgICAqIEBwYXJhbSBsaXN0ZW5lciBGdW5jdGlvbiB0byBhdHRhY2ggdG8gZXZlbnRcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBvbjogKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IChkYXRhOiBhbnksIGluZGV4PzogbnVtYmVyKSA9PiBhbnkpID0+IFpvb207XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXRzIG9yIHNldCB0aGUgY3VycmVudCB6b29tIHNjYWxlXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgY3VycmVudCBjdXJyZW50IHpvb20gc2NhbGVcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIGN1cnJlbnQgY3VycmVudCB6b29tIHNjYWxlXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIG9yaWdpbiBab29tIHNjYWxlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoc2NhbGU6IG51bWJlcik6IFpvb207XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogR2V0cyBvciBzZXQgdGhlIGN1cnJlbnQgem9vbSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB0cmFuc2xhdGU6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgY3VycmVudCB6b29tIHRyYW5zbGF0aW9uIHZlY3RvclxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSBjdXJyZW50IHpvb20gdHJhbnNsYXRpb24gdmVjdG9yXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIHRyYW5zbGF0ZSBUcmFubGF0aW9uIHZlY3RvclxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKHRyYW5zbGF0ZTogbnVtYmVyW10pOiBab29tO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldHMgb3Igc2V0IHRoZSBhbGxvd2VkIHNjYWxlIHJhbmdlXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2NhbGVFeHRlbnQ6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgY3VycmVudCBhbGxvd2VkIHpvb20gcmFuZ2VcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXJbXTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgYWxsb3dhYmxlIHpvb20gcmFuZ2VcbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gZXh0ZW50IEFsbG93ZWQgem9vbSByYW5nZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGV4dGVudDogbnVtYmVyW10pOiBab29tO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldHMgb3Igc2V0IHRoZSBYLVNjYWxlIHRoYXQgc2hvdWxkIGJlIGFkanVzdGVkIHdoZW4gem9vbWluZ1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgWC1TY2FsZVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IEQzLlNjYWxlLlNjYWxlO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSBYLVNjYWxlIHRvIGJlIGFkanVzdGVkXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIHggVGhlIFggU2NhbGVcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICh4OiBEMy5TY2FsZS5TY2FsZSk6IFpvb207XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBHZXRzIG9yIHNldCB0aGUgWS1TY2FsZSB0aGF0IHNob3VsZCBiZSBhZGp1c3RlZCB3aGVuIHpvb21pbmdcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIFktU2NhbGVcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiBEMy5TY2FsZS5TY2FsZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgWS1TY2FsZSB0byBiZSBhZGp1c3RlZFxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSB5IFRoZSBZIFNjYWxlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoeTogRDMuU2NhbGUuU2NhbGUpOiBab29tO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgRHJhZyB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogRXhlY3V0ZSBkcmFnIG1ldGhvZFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICgpOiBhbnk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBSZWdpc3RlcnMgYSBsaXN0ZW5lciB0byByZWNlaXZlIGV2ZW50c1xuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKiBAcGFyYW0gdHlwZSBFbmVudCBuYW1lIHRvIGF0dGFjaCB0aGUgbGlzdGVuZXIgdG9cbiAgICAgICAgICAgICogQHBhcmFtIGxpc3RlbmVyIEZ1bmN0aW9uIHRvIGF0dGFjaCB0byBldmVudFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9uOiAodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogKGRhdGE6IGFueSwgaW5kZXg/OiBudW1iZXIpID0+IGFueSkgPT4gRHJhZztcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEdldHMgb3Igc2V0IHRoZSBjdXJyZW50IG9yaWdpbiBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9yaWdpbjoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSBjdXJyZW50IG9yaWdpbiBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IGFueTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgb3JpZ2luIGFjY2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIG9yaWdpbiBBY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKG9yaWdpbj86IGFueSk6IERyYWc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2VvZ3JhcGh5XG4gICAgZXhwb3J0IG1vZHVsZSBHZW8ge1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEdlbyB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY3JlYXRlIGEgbmV3IGdlb2dyYXBoaWMgcGF0aCBnZW5lcmF0b3JcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBwYXRoKCk6IFBhdGg7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY3JlYXRlIGEgY2lyY2xlIGdlbmVyYXRvci5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjaXJjbGUoKTogQ2lyY2xlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGNvbXB1dGUgdGhlIHNwaGVyaWNhbCBhcmVhIG9mIGEgZ2l2ZW4gZmVhdHVyZS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBhcmVhKGZlYXR1cmU6IGFueSk6IG51bWJlcjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBjb21wdXRlIHRoZSBsYXRpdHVkZS1sb25naXR1ZGUgYm91bmRpbmcgYm94IGZvciBhIGdpdmVuIGZlYXR1cmUuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgYm91bmRzKGZlYXR1cmU6IGFueSk6IG51bWJlcltdW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY29tcHV0ZSB0aGUgc3BoZXJpY2FsIGNlbnRyb2lkIG9mIGEgZ2l2ZW4gZmVhdHVyZS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjZW50cm9pZChmZWF0dXJlOiBhbnkpOiBudW1iZXJbXTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBjb21wdXRlIHRoZSBncmVhdC1hcmMgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRpc3RhbmNlKGE6IG51bWJlcltdLCBiOiBudW1iZXJbXSk6IG51bWJlcjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBpbnRlcnBvbGF0ZSBiZXR3ZWVuIHR3byBwb2ludHMgYWxvbmcgYSBncmVhdCBhcmMuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW50ZXJwb2xhdGUoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogKHQ6IG51bWJlcikgPT4gbnVtYmVyW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY29tcHV0ZSB0aGUgbGVuZ3RoIG9mIGEgbGluZSBzdHJpbmcgb3IgdGhlIGNpcmN1bWZlcmVuY2Ugb2YgYSBwb2x5Z29uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxlbmd0aChmZWF0dXJlOiBhbnkpOiBudW1iZXI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY3JlYXRlIGEgc3RhbmRhcmQgcHJvamVjdGlvbiBmcm9tIGEgcmF3IHByb2plY3Rpb24uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJvamVjdGlvbihyYXc6IFJhd1Byb2plY3Rpb24pOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGNyZWF0ZSBhIHN0YW5kYXJkIHByb2plY3Rpb24gZnJvbSBhIG11dGFibGUgcmF3IHByb2plY3Rpb24uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJvamVjdGlvbk11dGF0b3IocmF3RmFjdG9yeTogUmF3UHJvamVjdGlvbik6IFByb2plY3Rpb25NdXRhdG9yO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHRoZSBBbGJlcnMgZXF1YWwtYXJlYSBjb25pYyBwcm9qZWN0aW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFsYmVycygpOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGEgY29tcG9zaXRlIEFsYmVycyBwcm9qZWN0aW9uIGZvciB0aGUgVW5pdGVkIFN0YXRlcy5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBhbGJlcnNVc2EoKTogUHJvamVjdGlvbjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiB0aGUgYXppbXV0aGFsIGVxdWFsLWFyZWEgcHJvamVjdGlvbi5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBhemltdXRoYWxFcXVhbEFyZWE6IHtcbiAgICAgICAgICAgICAgICAoKTogUHJvamVjdGlvbjtcbiAgICAgICAgICAgICAgICByYXc6IFJhd1Byb2plY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogdGhlIGF6aW11dGhhbCBlcXVpZGlzdGFudCBwcm9qZWN0aW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGF6aW11dGhhbEVxdWlkaXN0YW50OiB7XG4gICAgICAgICAgICAgICAgKCk6IFByb2plY3Rpb247XG4gICAgICAgICAgICAgICAgcmF3OiBSYXdQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHRoZSBjb25pYyBjb25mb3JtYWwgcHJvamVjdGlvbi5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25pY0NvbmZvcm1hbDoge1xuICAgICAgICAgICAgICAgICgpOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgICAgIHJhdyhwaGkxOm51bWJlciwgcGhpMjpudW1iZXIpOiBSYXdQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHRoZSBjb25pYyBlcXVpZGlzdGFudCBwcm9qZWN0aW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbmljRXF1aWRpc3RhbnQ6IHtcbiAgICAgICAgICAgICAgICAoKTogUHJvamVjdGlvbjtcbiAgICAgICAgICAgICAgICByYXcocGhpMTpudW1iZXIsIHBoaTI6bnVtYmVyKTogUmF3UHJvamVjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiB0aGUgY29uaWMgZXF1YWwtYXJlYSAoYS5rLmEuIEFsYmVycykgcHJvamVjdGlvbi5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25pY0VxdWFsQXJlYToge1xuICAgICAgICAgICAgICAgICgpOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgICAgIHJhdyhwaGkxOm51bWJlciwgcGhpMjpudW1iZXIpOiBSYXdQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHRoZSBlcXVpcmVjdGFuZ3VsYXIgKHBsYXRlIGNhcnJlw6kpIHByb2plY3Rpb24uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZXF1aXJlY3Rhbmd1bGFyOiB7XG4gICAgICAgICAgICAgICAgKCk6IFByb2plY3Rpb247XG4gICAgICAgICAgICAgICAgcmF3OiBSYXdQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHRoZSBnbm9tb25pYyBwcm9qZWN0aW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdub21vbmljOiB7XG4gICAgICAgICAgICAgICAgKCk6IFByb2plY3Rpb247XG4gICAgICAgICAgICAgICAgcmF3OiBSYXdQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHRoZSBzcGhlcmljYWwgTWVyY2F0b3IgcHJvamVjdGlvbi5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBtZXJjYXRvcjoge1xuICAgICAgICAgICAgICAgICgpOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgICAgIHJhdzogUmF3UHJvamVjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiB0aGUgYXppbXV0aGFsIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9ydGhvZ3JhcGhpYzoge1xuICAgICAgICAgICAgICAgICgpOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgICAgIHJhdzogUmF3UHJvamVjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiB0aGUgYXppbXV0aGFsIHN0ZXJlb2dyYXBoaWMgcHJvamVjdGlvbi5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdGVyZW9ncmFwaGljOiB7XG4gICAgICAgICAgICAgICAgKCk6IFByb2plY3Rpb247XG4gICAgICAgICAgICAgICAgcmF3OiBSYXdQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIHRoZSB0cmFuc3ZlcnNlIE1lcmNhdG9yIHByb2plY3Rpb24uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHJhbnN2ZXJzZU1lcmNhdG9yOiB7XG4gICAgICAgICAgICAgICAgKCk6IFByb2plY3Rpb247XG4gICAgICAgICAgICAgICAgcmF3OiBSYXdQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGNvbnZlcnQgYSBHZW9KU09OIG9iamVjdCB0byBhIGdlb21ldHJ5IHN0cmVhbS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdHJlYW0ob2JqZWN0OiBHZW9KU09OLCBsaXN0ZW5lcjogU3RyZWFtKTogdm9pZDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdyYXRpY3VsZSgpOiBHcmF0aWN1bGU7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBncmVhdEFyYygpOiBHcmVhdEFyYztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJvdGF0aW9uKHJvdGF0aW9uOiBudW1iZXJbXSk6IFJvdGF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBQYXRoIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBwYXRoIGRhdGEgc3RyaW5nIGZvciB0aGUgZ2l2ZW4gZmVhdHVyZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChmZWF0dXJlOiBhbnksIGluZGV4PzogYW55KTogc3RyaW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGdldCBvciBzZXQgdGhlIGdlb2dyYXBoaWMgcHJvamVjdGlvbi5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBwcm9qZWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBnZXQgdGhlIGdlb2dyYXBoaWMgcHJvamVjdGlvbi5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogc2V0IHRoZSBnZW9ncmFwaGljIHByb2plY3Rpb24uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAocHJvamVjdGlvbjogUHJvamVjdGlvbik6IFBhdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogZ2V0IG9yIHNldCB0aGUgcmVuZGVyIGNvbnRleHQuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogcmV0dXJuIGFuIFNWRyBwYXRoIHN0cmluZyBpbnZva2VkIG9uIHRoZSBnaXZlbiBmZWF0dXJlLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IHN0cmluZztcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIHNldHMgdGhlIHJlbmRlciBjb250ZXh0IGFuZCByZXR1cm5zIHRoZSBwYXRoIGdlbmVyYXRvclxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNvbnRleHQ6IENvbnRleHQpOiBQYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbXB1dGVzIHRoZSBwcm9qZWN0ZWQgYXJlYVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFyZWEoZmVhdHVyZTogYW55KTogYW55O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbXB1dGVzIHRoZSBwcm9qZWN0ZWQgY2VudHJvaWRcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjZW50cm9pZChmZWF0dXJlOiBhbnkpOiBhbnk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29tcHV0ZXMgdGhlIHByb2plY3RlZCBib3VuZGluZyBib3hcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBib3VuZHMoZmVhdHVyZTogYW55KTogYW55O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIGdldCBvciBzZXQgdGhlIHJhZGl1cyB0byBkaXNwbGF5IHBvaW50IGZlYXR1cmVzLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHBvaW50UmFkaXVzOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiByZXR1cm5zIHRoZSBjdXJyZW50IHJhZGl1c1xuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIHNldHMgdGhlIHJhZGl1cyB1c2VkIHRvIGRpc3BsYXkgUG9pbnQgYW5kIE11bHRpUG9pbnQgZmVhdHVyZXMgdG8gdGhlIHNwZWNpZmllZCBudW1iZXJcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChyYWRpdXM6IG51bWJlcik6IFBhdGg7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBzZXRzIHRoZSByYWRpdXMgdXNlZCB0byBkaXNwbGF5IFBvaW50IGFuZCBNdWx0aVBvaW50IGZlYXR1cmVzIHRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAocmFkaXVzOiAoZmVhdHVyZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBQYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBDb250ZXh0IHtcbiAgICAgICAgICAgIGJlZ2luUGF0aCgpOiBhbnk7XG4gICAgICAgICAgICBtb3ZlVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpOiBhbnk7XG4gICAgICAgICAgICBsaW5lVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpOiBhbnk7XG4gICAgICAgICAgICBhcmMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBzdGFydEFuZ2xlOiBudW1iZXIsIGVuZEFuZ2xlOiBudW1iZXIpOiBhbnk7XG4gICAgICAgICAgICBjbG9zZVBhdGgoKTogYW55O1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBDaXJjbGUge1xuICAgICAgICAgICAgKC4uLmFyZ3M6IGFueVtdKTogR2VvSlNPTjtcbiAgICAgICAgICAgIG9yaWdpbjoge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXJbXTtcbiAgICAgICAgICAgICAgICAob3JpZ2luOiBudW1iZXJbXSk6IENpcmNsZTtcbiAgICAgICAgICAgICAgICAob3JpZ2luOiAoLi4uYXJnczogYW55W10pID0+IG51bWJlcltdKTogQ2lyY2xlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5nbGU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChhbmdsZTogbnVtYmVyKTogQ2lyY2xlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlY2lzaW9uOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAocHJlY2lzaW9uOiBudW1iZXIpOiBDaXJjbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEdyYXRpY3VsZXtcbiAgICAgICAgICAgICgpOiBHZW9KU09OO1xuICAgICAgICAgICAgbGluZXMoKTogR2VvSlNPTltdO1xuICAgICAgICAgICAgb3V0bGluZSgpOiBHZW9KU09OO1xuICAgICAgICAgICAgZXh0ZW50OiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdW107XG4gICAgICAgICAgICAgICAgKGV4dGVudDogbnVtYmVyW11bXSk6IEdyYXRpY3VsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1pbm9yRXh0ZW50OiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdW107XG4gICAgICAgICAgICAgICAgKGV4dGVudDogbnVtYmVyW11bXSk6IEdyYXRpY3VsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ham9yRXh0ZW50OiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdW107XG4gICAgICAgICAgICAgICAgKGV4dGVudDogbnVtYmVyW11bXSk6IEdyYXRpY3VsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0ZXA6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyW11bXTtcbiAgICAgICAgICAgICAgICAoZXh0ZW50OiBudW1iZXJbXVtdKTogR3JhdGljdWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWlub3JTdGVwOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdW107XG4gICAgICAgICAgICAgICAgKGV4dGVudDogbnVtYmVyW11bXSk6IEdyYXRpY3VsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ham9yU3RlcDoge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXJbXVtdO1xuICAgICAgICAgICAgICAgIChleHRlbnQ6IG51bWJlcltdW10pOiBHcmF0aWN1bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmVjaXNpb246IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChwcmVjaXNpb246IG51bWJlcik6IEdyYXRpY3VsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgR3JlYXRBcmMge1xuICAgICAgICAgICAgKCk6IEdlb0pTT047XG4gICAgICAgICAgICBkaXN0YW5jZSgpOiBudW1iZXI7XG4gICAgICAgICAgICBzb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAoKTogYW55O1xuICAgICAgICAgICAgICAgIChzb3VyY2U6IGFueSk6IEdyZWF0QXJjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICAgICAgKCk6IGFueTtcbiAgICAgICAgICAgICAgICAodGFyZ2V0OiBhbnkpOiBHcmVhdEFyYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZWNpc2lvbjoge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgKHByZWNpc2lvbjogbnVtYmVyKTogR3JlYXRBcmM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEdlb0pTT04ge1xuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IG51bWJlcltdW107XG4gICAgICAgICAgICB0eXBlOiBzdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFJhd1Byb2plY3Rpb24ge1xuICAgICAgICAgICAgKGxhbWJkYTogbnVtYmVyLCBwaGk6IG51bWJlcik6IG51bWJlcltdO1xuICAgICAgICAgICAgaW52ZXJ0Pyh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlcltdO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBQcm9qZWN0aW9uIHtcbiAgICAgICAgICAgIChjb29yZGluYXRlczogbnVtYmVyW10pOiBudW1iZXJbXTtcbiAgICAgICAgICAgIGludmVydD8ocG9pbnQ6IG51bWJlcltdKTogbnVtYmVyW107XG4gICAgICAgICAgICByb3RhdGU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyW107XG4gICAgICAgICAgICAgICAgKHJvdGF0aW9uOiBudW1iZXJbXSk6IFByb2plY3Rpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdO1xuICAgICAgICAgICAgICAgIChsb2NhdGlvbjogbnVtYmVyW10pOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHBhcmFsbGVsczoge1xuICAgICAgICAgICAgICAgICgpOiBudW1iZXJbXTtcbiAgICAgICAgICAgICAgICAobG9jYXRpb246IG51bWJlcltdKTogUHJvamVjdGlvbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmFuc2xhdGU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyW107XG4gICAgICAgICAgICAgICAgKHBvaW50OiBudW1iZXJbXSk6IFByb2plY3Rpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChzY2FsZTogbnVtYmVyKTogUHJvamVjdGlvbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjbGlwQW5nbGU6IHtcbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIChhbmdsZTogbnVtYmVyKTogUHJvamVjdGlvbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjbGlwRXh0ZW50OiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcltdW107XG4gICAgICAgICAgICAgICAgKGV4dGVudDogbnVtYmVyW11bXSk6IFByb2plY3Rpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcHJlY2lzaW9uOiB7XG4gICAgICAgICAgICAgICAgKCk6IG51bWJlcjtcbiAgICAgICAgICAgICAgICAocHJlY2lzaW9uOiBudW1iZXIpOiBQcm9qZWN0aW9uO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN0cmVhbShsaXN0ZW5lcj86IFN0cmVhbSk6IFN0cmVhbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgU3RyZWFtIHtcbiAgICAgICAgICAgIHBvaW50KHg6IG51bWJlciwgeTogbnVtYmVyLCB6PzogbnVtYmVyKTogdm9pZDtcbiAgICAgICAgICAgIGxpbmVTdGFydCgpOiB2b2lkO1xuICAgICAgICAgICAgbGluZUVuZCgpOiB2b2lkO1xuICAgICAgICAgICAgcG9seWdvblN0YXJ0KCk6IHZvaWQ7XG4gICAgICAgICAgICBwb2x5Z29uRW5kKCk6IHZvaWQ7XG4gICAgICAgICAgICBzcGhlcmUoKTogdm9pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgUm90YXRpb24gZXh0ZW5kcyBBcnJheTxhbnk+IHtcbiAgICAgICAgICAgIChsb2NhdGlvbjogbnVtYmVyW10pOiBSb3RhdGlvbjtcbiAgICAgICAgICAgIGludmVydChsb2NhdGlvbjogbnVtYmVyW10pOiBSb3RhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgUHJvamVjdGlvbk11dGF0b3Ige1xuICAgICAgICAgICAgKGxhbWJkYTogbnVtYmVyLCBwaGk6IG51bWJlcik6IFByb2plY3Rpb247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHZW9tZXRyeVxuICAgIGV4cG9ydCBtb2R1bGUgR2VvbSB7XG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgR2VvbSB7XG4gICAgICAgICAgICB2b3Jvbm9pPFQ+KCk6IFZvcm9ub2k8VD47XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY29tcHV0ZSB0aGUgVm9yb25vaSBkaWFncmFtIGZvciB0aGUgc3BlY2lmaWVkIHBvaW50cy5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB2b3Jvbm9pKHZlcnRpY2VzOiBWZXJ0aWNlW10pOiBQb2x5Z29uW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY29tcHV0ZSB0aGUgRGVsYXVuYXkgdHJpYW5ndWxhdGlvbiBmb3IgdGhlIHNwZWNpZmllZCBwb2ludHMuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGVsYXVuYXkodmVydGljZXM/OiBWZXJ0aWNlW10pOiBQb2x5Z29uW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogY29uc3RydWN0cyBhIHF1YWR0cmVlIGZvciBhbiBhcnJheSBvZiBwb2ludHMuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgcXVhZHRyZWUoKTogUXVhZHRyZWVGYWN0b3J5O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgcXVhZHRyZWUgZm9yIHRoZSBzcGVjaWZpZWQgYXJyYXkgb2YgcG9pbnRzLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHF1YWR0cmVlKHBvaW50czogUG9pbnRbXSwgeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IFF1YWR0cmVlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgcXVhZHRyZWUgZm9yIHRoZSBzcGVjaWZpZWQgYXJyYXkgb2YgcG9pbnRzLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHF1YWR0cmVlKHBvaW50czogUG9pbnRbXSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBRdWFkdHJlZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBpbnB1dCBhcnJheSBvZiB2ZXJ0aWNlcyB3aXRoIGFkZGl0aW9uYWwgbWV0aG9kcyBhdHRhY2hlZFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHBvbHlnb24odmVydGljZXM6VmVydGljZVtdKTogUG9seWdvbjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBjcmVhdGVzIGEgbmV3IGh1bGwgbGF5b3V0IHdpdGggdGhlIGRlZmF1bHQgc2V0dGluZ3MuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaHVsbCgpOiBIdWxsO1xuXG4gICAgICAgICAgICBodWxsKHZlcnRpY2VzOlZlcnRpY2VbXSk6IFZlcnRpY2VbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgVmVydGljZSBleHRlbmRzIEFycmF5PG51bWJlcj4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFJldHVybnMgdGhlIGFuZ2xlIG9mIHRoZSB2ZXJ0aWNlXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgYW5nbGU/OiBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFBvbHlnb24gZXh0ZW5kcyBBcnJheTxWZXJ0aWNlPiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogUmV0dXJucyB0aGUgc2lnbmVkIGFyZWEgb2YgdGhpcyBwb2x5Z29uXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgYXJlYSgpOiBudW1iZXI7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogUmV0dXJucyBhIHR3by1lbGVtZW50IGFycmF5IHJlcHJlc2VudGluZyB0aGUgY2VudHJvaWQgb2YgdGhpcyBwb2x5Z29uLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNlbnRyb2lkKCk6IG51bWJlcltdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENsaXBzIHRoZSBzdWJqZWN0IHBvbHlnb24gYWdhaW5zdCB0aGlzIHBvbHlnb25cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbGlwKHN1YmplY3Q6IFBvbHlnb24pOiBQb2x5Z29uO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBRdWFkdHJlZUZhY3Rvcnkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgcXVhZHRyZWUgZm9yIHRoZSBzcGVjaWZpZWQgYXJyYXkgb2YgcG9pbnRzLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICgpOiBRdWFkdHJlZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IHF1YWR0cmVlIGZvciB0aGUgc3BlY2lmaWVkIGFycmF5IG9mIHBvaW50cy5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAocG9pbnRzOiBQb2ludFtdLCB4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogUXVhZHRyZWU7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBxdWFkdHJlZSBmb3IgdGhlIHNwZWNpZmllZCBhcnJheSBvZiBwb2ludHMuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgKHBvaW50czogUG9pbnRbXSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBRdWFkdHJlZTtcblxuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgICgpOiAoZDogYW55KSA9PiBhbnk7XG4gICAgICAgICAgICAgICAgKGFjY2Vzb3I6IChkOiBhbnkpID0+IGFueSk6IFF1YWR0cmVlRmFjdG9yeTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICgpOiAoZDogYW55KSA9PiBhbnk7XG4gICAgICAgICAgICAgICAgKGFjY2Vzb3I6IChkOiBhbnkpID0+IGFueSk6IFF1YWR0cmVlRmFjdG9yeTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2l6ZSgpOiBudW1iZXJbXTtcbiAgICAgICAgICAgIHNpemUoc2l6ZTogbnVtYmVyW10pOiBRdWFkdHJlZUZhY3Rvcnk7XG4gICAgICAgICAgICBleHRlbnQoKTogbnVtYmVyW11bXTtcbiAgICAgICAgICAgIGV4dGVudChwb2ludHM6IG51bWJlcltdW10pOiBRdWFkdHJlZUZhY3Rvcnk7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFF1YWR0cmVlIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBBZGRzIGEgbmV3IHBvaW50IHRvIHRoZSBxdWFkdHJlZS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGQocG9pbnQ6IFBvaW50KTogdm9pZDtcbiAgICAgICAgICAgIHZpc2l0KGNhbGxiYWNrOiBhbnkpOiB2b2lkO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBQb2ludCB7XG4gICAgICAgICAgICB4OiBudW1iZXI7XG4gICAgICAgICAgICB5OiBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFZvcm9ub2k8VD4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIENvbXB1dGUgdGhlIFZvcm9ub2kgZGlhZ3JhbSBmb3IgdGhlIHNwZWNpZmllZCBkYXRhLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChkYXRhOiBUW10pOiBQb2x5Z29uW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29tcHV0ZSB0aGUgZ3JhcGggbGlua3MgZm9yIHRoZSBWb3Jvbm9pIGRpYWdyYW0gZm9yIHRoZSBzcGVjaWZpZWQgZGF0YS5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBsaW5rcyhkYXRhOiBUW10pOiBMYXlvdXQuR3JhcGhMaW5rW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ29tcHV0ZSB0aGUgdHJpYW5nbGVzIGZvciB0aGUgVm9yb25vaSBkaWFncmFtIGZvciB0aGUgc3BlY2lmaWVkIGRhdGEuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHJpYW5nbGVzKGRhdGE6IFRbXSk6IG51bWJlcltdW107XG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIHgtY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICgpOiAoZGF0YTogVCwgaW5kZXggPzogbnVtYmVyKSA9PiBudW1iZXI7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgeC1jb29yZGluYXRlIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBhY2Nlc3NvciBUaGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoYWNjZXNzb3I6IChkYXRhOiBULCBpbmRleDogbnVtYmVyKSA9PiBudW1iZXIpOiBWb3Jvbm9pPFQ+O1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHgtY29vcmRpbmF0ZSB0byBhIGNvbnN0YW50LlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBjb25zdGFudCBUaGUgbmV3IGNvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGNvbnN0YW50OiBudW1iZXIpOiBWb3Jvbm9pPFQ+O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogR2V0IHRoZSB5LWNvb3JkaW5hdGUgYWNjZXNzb3IuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogKGRhdGE6IFQsIGluZGV4ID86IG51bWJlcikgPT4gbnVtYmVyO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHktY29vcmRpbmF0ZSBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gYWNjZXNzb3IgVGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGFjY2Vzc29yOiAoZGF0YTogVCwgaW5kZXg6IG51bWJlcikgPT4gbnVtYmVyKTogVm9yb25vaTxUPjtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogU2V0IHRoZSB5LWNvb3JkaW5hdGUgdG8gYSBjb25zdGFudC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0gY29uc3RhbnQgVGhlIG5ldyBjb25zdGFudCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChjb25zdGFudDogbnVtYmVyKTogVm9yb25vaTxUPjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsaXBFeHRlbnQ6IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEdldCB0aGUgY2xpcCBleHRlbnQuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyW11bXTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFNldCB0aGUgY2xpcCBleHRlbnQuXG4gICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICogQHBhcmFtIGV4dGVudCBUaGUgbmV3IGNsaXAgZXh0ZW50LlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKGV4dGVudDogbnVtYmVyW11bXSk6IFZvcm9ub2k8VD47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaXplOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBHZXQgdGhlIHNpemUuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAoKTogbnVtYmVyW107XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBTZXQgdGhlIHNpemUsIGVxdWl2YWxlbnQgdG8gYSBjbGlwIGV4dGVudCBzdGFydGluZyBmcm9tICgwLDApLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIEBwYXJhbSBzaXplIFRoZSBuZXcgc2l6ZS5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIChzaXplOiBudW1iZXJbXSk6IFZvcm9ub2k8VD47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEh1bGwge1xuICAgICAgICAgICAgKHZlcnRpY2VzOiBWZXJ0aWNlW10pOiBWZXJ0aWNlW107XG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgKCk6IChkOiBhbnkpID0+IGFueTtcbiAgICAgICAgICAgICAgICAoYWNjZXNvcjogKGQ6IGFueSkgPT4gYW55KTogYW55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICgpOiAoZDogYW55KSA9PiBhbnk7XG4gICAgICAgICAgICAgICAgKGFjY2Vzb3I6IChkOiBhbnkpID0+IGFueSk6IGFueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZGVjbGFyZSB2YXIgZDM6IEQzLkJhc2U7XG5cbmRlY2xhcmUgbW9kdWxlIFwiZDNcIiB7XG4gICAgZXhwb3J0ID0gZDM7XG59XG4iXX0=
//# sourceURL=/Users/anas/.atom/packages/atom-typescript/lib/typings/d3/d3.d.ts
