// Type definitions for jQuery 1.10.x / 2.0.x
// Project: http://jquery.com/
// Definitions by: Boris Yankov <https://github.com/borisyankov/>, Christian Hoffmeister <https://github.com/choffmeister>, Steve Fenton <https://github.com/Steve-Fenton>, Diullei Gomes <https://github.com/Diullei>, Tass Iliopoulos <https://github.com/tasoili>, Jason Swearingen <https://github.com/jasons-novaleaf>, Sean Hill <https://github.com/seanski>, Guus Goossens <https://github.com/Guuz>, Kelly Summerlin <https://github.com/ksummerlin>, Basarat Ali Syed <https://github.com/basarat>, Nicholas Wolverson <https://github.com/nwolverson>, Derek Cicerone <https://github.com/derekcicerone>, Andrew Gaspar <https://github.com/AndrewGaspar>, James Harrison Fisher <https://github.com/jameshfisher>, Seikichi Kondo <https://github.com/seikichi>, Benjamin Jackman <https://github.com/benjaminjackman>, Poul Sorensen <https://github.com/s093294>, Josh Strobl <https://github.com/JoshStrobl>, John Reilly <https://github.com/johnnyreilly/>, Dick van den Brink <https://github.com/DickvdBrink>
// Definitions: https://github.com/borisyankov/DefinitelyTyped
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2FuYXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2xpYi90eXBpbmdzL2pxdWVyeS9qcXVlcnkuZC50cyIsInNvdXJjZXMiOlsiL1VzZXJzL2FuYXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2xpYi90eXBpbmdzL2pxdWVyeS9qcXVlcnkuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2Q0FBNkM7QUFDN0MsOEJBQThCO0FBQzlCLGcrQkFBZytCO0FBQ2grQiw4REFBOEQ7QUE2bUdsQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFR5cGUgZGVmaW5pdGlvbnMgZm9yIGpRdWVyeSAxLjEwLnggLyAyLjAueFxuLy8gUHJvamVjdDogaHR0cDovL2pxdWVyeS5jb20vXG4vLyBEZWZpbml0aW9ucyBieTogQm9yaXMgWWFua292IDxodHRwczovL2dpdGh1Yi5jb20vYm9yaXN5YW5rb3YvPiwgQ2hyaXN0aWFuIEhvZmZtZWlzdGVyIDxodHRwczovL2dpdGh1Yi5jb20vY2hvZmZtZWlzdGVyPiwgU3RldmUgRmVudG9uIDxodHRwczovL2dpdGh1Yi5jb20vU3RldmUtRmVudG9uPiwgRGl1bGxlaSBHb21lcyA8aHR0cHM6Ly9naXRodWIuY29tL0RpdWxsZWk+LCBUYXNzIElsaW9wb3Vsb3MgPGh0dHBzOi8vZ2l0aHViLmNvbS90YXNvaWxpPiwgSmFzb24gU3dlYXJpbmdlbiA8aHR0cHM6Ly9naXRodWIuY29tL2phc29ucy1ub3ZhbGVhZj4sIFNlYW4gSGlsbCA8aHR0cHM6Ly9naXRodWIuY29tL3NlYW5za2k+LCBHdXVzIEdvb3NzZW5zIDxodHRwczovL2dpdGh1Yi5jb20vR3V1ej4sIEtlbGx5IFN1bW1lcmxpbiA8aHR0cHM6Ly9naXRodWIuY29tL2tzdW1tZXJsaW4+LCBCYXNhcmF0IEFsaSBTeWVkIDxodHRwczovL2dpdGh1Yi5jb20vYmFzYXJhdD4sIE5pY2hvbGFzIFdvbHZlcnNvbiA8aHR0cHM6Ly9naXRodWIuY29tL253b2x2ZXJzb24+LCBEZXJlayBDaWNlcm9uZSA8aHR0cHM6Ly9naXRodWIuY29tL2RlcmVrY2ljZXJvbmU+LCBBbmRyZXcgR2FzcGFyIDxodHRwczovL2dpdGh1Yi5jb20vQW5kcmV3R2FzcGFyPiwgSmFtZXMgSGFycmlzb24gRmlzaGVyIDxodHRwczovL2dpdGh1Yi5jb20vamFtZXNoZmlzaGVyPiwgU2Vpa2ljaGkgS29uZG8gPGh0dHBzOi8vZ2l0aHViLmNvbS9zZWlraWNoaT4sIEJlbmphbWluIEphY2ttYW4gPGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmphY2ttYW4+LCBQb3VsIFNvcmVuc2VuIDxodHRwczovL2dpdGh1Yi5jb20vczA5MzI5ND4sIEpvc2ggU3Ryb2JsIDxodHRwczovL2dpdGh1Yi5jb20vSm9zaFN0cm9ibD4sIEpvaG4gUmVpbGx5IDxodHRwczovL2dpdGh1Yi5jb20vam9obm55cmVpbGx5Lz4sIERpY2sgdmFuIGRlbiBCcmluayA8aHR0cHM6Ly9naXRodWIuY29tL0RpY2t2ZEJyaW5rPlxuLy8gRGVmaW5pdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9ib3Jpc3lhbmtvdi9EZWZpbml0ZWx5VHlwZWRcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVEhJUyBDT0RFIElTIFBST1ZJREVEICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXG5cblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgdGhlIEFKQVggc2V0dGluZyB0aGF0IHdpbGwgY29uZmlndXJlIHRoZSBBSkFYIHJlcXVlc3RcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeUFqYXhTZXR0aW5ncyB7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgdHlwZSBzZW50IGluIHRoZSByZXF1ZXN0IGhlYWRlciB0aGF0IHRlbGxzIHRoZSBzZXJ2ZXIgd2hhdCBraW5kIG9mIHJlc3BvbnNlIGl0IHdpbGwgYWNjZXB0IGluIHJldHVybi4gSWYgdGhlIGFjY2VwdHMgc2V0dGluZyBuZWVkcyBtb2RpZmljYXRpb24sIGl0IGlzIHJlY29tbWVuZGVkIHRvIGRvIHNvIG9uY2UgaW4gdGhlICQuYWpheFNldHVwKCkgbWV0aG9kLlxuICAgICAqL1xuICAgIGFjY2VwdHM/OiBhbnk7XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgYWxsIHJlcXVlc3RzIGFyZSBzZW50IGFzeW5jaHJvbm91c2x5IChpLmUuIHRoaXMgaXMgc2V0IHRvIHRydWUgYnkgZGVmYXVsdCkuIElmIHlvdSBuZWVkIHN5bmNocm9ub3VzIHJlcXVlc3RzLCBzZXQgdGhpcyBvcHRpb24gdG8gZmFsc2UuIENyb3NzLWRvbWFpbiByZXF1ZXN0cyBhbmQgZGF0YVR5cGU6IFwianNvbnBcIiByZXF1ZXN0cyBkbyBub3Qgc3VwcG9ydCBzeW5jaHJvbm91cyBvcGVyYXRpb24uIE5vdGUgdGhhdCBzeW5jaHJvbm91cyByZXF1ZXN0cyBtYXkgdGVtcG9yYXJpbHkgbG9jayB0aGUgYnJvd3NlciwgZGlzYWJsaW5nIGFueSBhY3Rpb25zIHdoaWxlIHRoZSByZXF1ZXN0IGlzIGFjdGl2ZS4gQXMgb2YgalF1ZXJ5IDEuOCwgdGhlIHVzZSBvZiBhc3luYzogZmFsc2Ugd2l0aCBqcVhIUiAoJC5EZWZlcnJlZCkgaXMgZGVwcmVjYXRlZDsgeW91IG11c3QgdXNlIHRoZSBzdWNjZXNzL2Vycm9yL2NvbXBsZXRlIGNhbGxiYWNrIG9wdGlvbnMgaW5zdGVhZCBvZiB0aGUgY29ycmVzcG9uZGluZyBtZXRob2RzIG9mIHRoZSBqcVhIUiBvYmplY3Qgc3VjaCBhcyBqcVhIUi5kb25lKCkgb3IgdGhlIGRlcHJlY2F0ZWQganFYSFIuc3VjY2VzcygpLlxuICAgICAqL1xuICAgIGFzeW5jPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBIHByZS1yZXF1ZXN0IGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gbW9kaWZ5IHRoZSBqcVhIUiAoaW4galF1ZXJ5IDEuNC54LCBYTUxIVFRQUmVxdWVzdCkgb2JqZWN0IGJlZm9yZSBpdCBpcyBzZW50LiBVc2UgdGhpcyB0byBzZXQgY3VzdG9tIGhlYWRlcnMsIGV0Yy4gVGhlIGpxWEhSIGFuZCBzZXR0aW5ncyBvYmplY3RzIGFyZSBwYXNzZWQgYXMgYXJndW1lbnRzLiBUaGlzIGlzIGFuIEFqYXggRXZlbnQuIFJldHVybmluZyBmYWxzZSBpbiB0aGUgYmVmb3JlU2VuZCBmdW5jdGlvbiB3aWxsIGNhbmNlbCB0aGUgcmVxdWVzdC4gQXMgb2YgalF1ZXJ5IDEuNSwgdGhlIGJlZm9yZVNlbmQgb3B0aW9uIHdpbGwgYmUgY2FsbGVkIHJlZ2FyZGxlc3Mgb2YgdGhlIHR5cGUgb2YgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBiZWZvcmVTZW5kPyAoanFYSFI6IEpRdWVyeVhIUiwgc2V0dGluZ3M6IEpRdWVyeUFqYXhTZXR0aW5ncyk6IGFueTtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gZmFsc2UsIGl0IHdpbGwgZm9yY2UgcmVxdWVzdGVkIHBhZ2VzIG5vdCB0byBiZSBjYWNoZWQgYnkgdGhlIGJyb3dzZXIuIE5vdGU6IFNldHRpbmcgY2FjaGUgdG8gZmFsc2Ugd2lsbCBvbmx5IHdvcmsgY29ycmVjdGx5IHdpdGggSEVBRCBhbmQgR0VUIHJlcXVlc3RzLiBJdCB3b3JrcyBieSBhcHBlbmRpbmcgXCJfPXt0aW1lc3RhbXB9XCIgdG8gdGhlIEdFVCBwYXJhbWV0ZXJzLiBUaGUgcGFyYW1ldGVyIGlzIG5vdCBuZWVkZWQgZm9yIG90aGVyIHR5cGVzIG9mIHJlcXVlc3RzLCBleGNlcHQgaW4gSUU4IHdoZW4gYSBQT1NUIGlzIG1hZGUgdG8gYSBVUkwgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZCBieSBhIEdFVC5cbiAgICAgKi9cbiAgICBjYWNoZT86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBmaW5pc2hlcyAoYWZ0ZXIgc3VjY2VzcyBhbmQgZXJyb3IgY2FsbGJhY2tzIGFyZSBleGVjdXRlZCkuIFRoZSBmdW5jdGlvbiBnZXRzIHBhc3NlZCB0d28gYXJndW1lbnRzOiBUaGUganFYSFIgKGluIGpRdWVyeSAxLjQueCwgWE1MSFRUUFJlcXVlc3QpIG9iamVjdCBhbmQgYSBzdHJpbmcgY2F0ZWdvcml6aW5nIHRoZSBzdGF0dXMgb2YgdGhlIHJlcXVlc3QgKFwic3VjY2Vzc1wiLCBcIm5vdG1vZGlmaWVkXCIsIFwiZXJyb3JcIiwgXCJ0aW1lb3V0XCIsIFwiYWJvcnRcIiwgb3IgXCJwYXJzZXJlcnJvclwiKS4gQXMgb2YgalF1ZXJ5IDEuNSwgdGhlIGNvbXBsZXRlIHNldHRpbmcgY2FuIGFjY2VwdCBhbiBhcnJheSBvZiBmdW5jdGlvbnMuIEVhY2ggZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgaW4gdHVybi4gVGhpcyBpcyBhbiBBamF4IEV2ZW50LlxuICAgICAqL1xuICAgIGNvbXBsZXRlPyAoanFYSFI6IEpRdWVyeVhIUiwgdGV4dFN0YXR1czogc3RyaW5nKTogYW55O1xuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBvZiBzdHJpbmcvcmVndWxhci1leHByZXNzaW9uIHBhaXJzIHRoYXQgZGV0ZXJtaW5lIGhvdyBqUXVlcnkgd2lsbCBwYXJzZSB0aGUgcmVzcG9uc2UsIGdpdmVuIGl0cyBjb250ZW50IHR5cGUuICh2ZXJzaW9uIGFkZGVkOiAxLjUpXG4gICAgICovXG4gICAgY29udGVudHM/OiB7IFtrZXk6IHN0cmluZ106IGFueTsgfTtcbiAgICAvL0FjY29yZGluZyB0byBqUXVlcnkuYWpheCBzb3VyY2UgY29kZSwgYWpheCdzIG9wdGlvbiBhY3R1YWxseSBhbGxvd3MgY29udGVudFR5cGUgdG8gc2V0IHRvIFwiZmFsc2VcIlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ib3Jpc3lhbmtvdi9EZWZpbml0ZWx5VHlwZWQvaXNzdWVzLzc0MlxuICAgIC8qKlxuICAgICAqIFdoZW4gc2VuZGluZyBkYXRhIHRvIHRoZSBzZXJ2ZXIsIHVzZSB0aGlzIGNvbnRlbnQgdHlwZS4gRGVmYXVsdCBpcyBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLCB3aGljaCBpcyBmaW5lIGZvciBtb3N0IGNhc2VzLiBJZiB5b3UgZXhwbGljaXRseSBwYXNzIGluIGEgY29udGVudC10eXBlIHRvICQuYWpheCgpLCB0aGVuIGl0IGlzIGFsd2F5cyBzZW50IHRvIHRoZSBzZXJ2ZXIgKGV2ZW4gaWYgbm8gZGF0YSBpcyBzZW50KS4gVGhlIFczQyBYTUxIdHRwUmVxdWVzdCBzcGVjaWZpY2F0aW9uIGRpY3RhdGVzIHRoYXQgdGhlIGNoYXJzZXQgaXMgYWx3YXlzIFVURi04OyBzcGVjaWZ5aW5nIGFub3RoZXIgY2hhcnNldCB3aWxsIG5vdCBmb3JjZSB0aGUgYnJvd3NlciB0byBjaGFuZ2UgdGhlIGVuY29kaW5nLlxuICAgICAqL1xuICAgIGNvbnRlbnRUeXBlPzogYW55O1xuICAgIC8qKlxuICAgICAqIFRoaXMgb2JqZWN0IHdpbGwgYmUgbWFkZSB0aGUgY29udGV4dCBvZiBhbGwgQWpheC1yZWxhdGVkIGNhbGxiYWNrcy4gQnkgZGVmYXVsdCwgdGhlIGNvbnRleHQgaXMgYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgYWpheCBzZXR0aW5ncyB1c2VkIGluIHRoZSBjYWxsICgkLmFqYXhTZXR0aW5ncyBtZXJnZWQgd2l0aCB0aGUgc2V0dGluZ3MgcGFzc2VkIHRvICQuYWpheCkuXG4gICAgICovXG4gICAgY29udGV4dD86IGFueTtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhVHlwZS10by1kYXRhVHlwZSBjb252ZXJ0ZXJzLiBFYWNoIGNvbnZlcnRlcidzIHZhbHVlIGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZSBvZiB0aGUgcmVzcG9uc2UuICh2ZXJzaW9uIGFkZGVkOiAxLjUpXG4gICAgICovXG4gICAgY29udmVydGVycz86IHsgW2tleTogc3RyaW5nXTogYW55OyB9O1xuICAgIC8qKlxuICAgICAqIElmIHlvdSB3aXNoIHRvIGZvcmNlIGEgY3Jvc3NEb21haW4gcmVxdWVzdCAoc3VjaCBhcyBKU09OUCkgb24gdGhlIHNhbWUgZG9tYWluLCBzZXQgdGhlIHZhbHVlIG9mIGNyb3NzRG9tYWluIHRvIHRydWUuIFRoaXMgYWxsb3dzLCBmb3IgZXhhbXBsZSwgc2VydmVyLXNpZGUgcmVkaXJlY3Rpb24gdG8gYW5vdGhlciBkb21haW4uICh2ZXJzaW9uIGFkZGVkOiAxLjUpXG4gICAgICovXG4gICAgY3Jvc3NEb21haW4/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERhdGEgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyLiBJdCBpcyBjb252ZXJ0ZWQgdG8gYSBxdWVyeSBzdHJpbmcsIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nLiBJdCdzIGFwcGVuZGVkIHRvIHRoZSB1cmwgZm9yIEdFVC1yZXF1ZXN0cy4gU2VlIHByb2Nlc3NEYXRhIG9wdGlvbiB0byBwcmV2ZW50IHRoaXMgYXV0b21hdGljIHByb2Nlc3NpbmcuIE9iamVjdCBtdXN0IGJlIEtleS9WYWx1ZSBwYWlycy4gSWYgdmFsdWUgaXMgYW4gQXJyYXksIGpRdWVyeSBzZXJpYWxpemVzIG11bHRpcGxlIHZhbHVlcyB3aXRoIHNhbWUga2V5IGJhc2VkIG9uIHRoZSB2YWx1ZSBvZiB0aGUgdHJhZGl0aW9uYWwgc2V0dGluZyAoZGVzY3JpYmVkIGJlbG93KS5cbiAgICAgKi9cbiAgICBkYXRhPzogYW55O1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gYmUgdXNlZCB0byBoYW5kbGUgdGhlIHJhdyByZXNwb25zZSBkYXRhIG9mIFhNTEh0dHBSZXF1ZXN0LlRoaXMgaXMgYSBwcmUtZmlsdGVyaW5nIGZ1bmN0aW9uIHRvIHNhbml0aXplIHRoZSByZXNwb25zZS4gWW91IHNob3VsZCByZXR1cm4gdGhlIHNhbml0aXplZCBkYXRhLiBUaGUgZnVuY3Rpb24gYWNjZXB0cyB0d28gYXJndW1lbnRzOiBUaGUgcmF3IGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIGFuZCB0aGUgJ2RhdGFUeXBlJyBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgZGF0YUZpbHRlcj8gKGRhdGE6IGFueSwgdHk6IGFueSk6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBkYXRhIHRoYXQgeW91J3JlIGV4cGVjdGluZyBiYWNrIGZyb20gdGhlIHNlcnZlci4gSWYgbm9uZSBpcyBzcGVjaWZpZWQsIGpRdWVyeSB3aWxsIHRyeSB0byBpbmZlciBpdCBiYXNlZCBvbiB0aGUgTUlNRSB0eXBlIG9mIHRoZSByZXNwb25zZSAoYW4gWE1MIE1JTUUgdHlwZSB3aWxsIHlpZWxkIFhNTCwgaW4gMS40IEpTT04gd2lsbCB5aWVsZCBhIEphdmFTY3JpcHQgb2JqZWN0LCBpbiAxLjQgc2NyaXB0IHdpbGwgZXhlY3V0ZSB0aGUgc2NyaXB0LCBhbmQgYW55dGhpbmcgZWxzZSB3aWxsIGJlIHJldHVybmVkIGFzIGEgc3RyaW5nKS4gXG4gICAgICovXG4gICAgZGF0YVR5cGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgaWYgdGhlIHJlcXVlc3QgZmFpbHMuIFRoZSBmdW5jdGlvbiByZWNlaXZlcyB0aHJlZSBhcmd1bWVudHM6IFRoZSBqcVhIUiAoaW4galF1ZXJ5IDEuNC54LCBYTUxIdHRwUmVxdWVzdCkgb2JqZWN0LCBhIHN0cmluZyBkZXNjcmliaW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoYXQgb2NjdXJyZWQgYW5kIGFuIG9wdGlvbmFsIGV4Y2VwdGlvbiBvYmplY3QsIGlmIG9uZSBvY2N1cnJlZC4gUG9zc2libGUgdmFsdWVzIGZvciB0aGUgc2Vjb25kIGFyZ3VtZW50IChiZXNpZGVzIG51bGwpIGFyZSBcInRpbWVvdXRcIiwgXCJlcnJvclwiLCBcImFib3J0XCIsIGFuZCBcInBhcnNlcmVycm9yXCIuIFdoZW4gYW4gSFRUUCBlcnJvciBvY2N1cnMsIGVycm9yVGhyb3duIHJlY2VpdmVzIHRoZSB0ZXh0dWFsIHBvcnRpb24gb2YgdGhlIEhUVFAgc3RhdHVzLCBzdWNoIGFzIFwiTm90IEZvdW5kXCIgb3IgXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuXCIgQXMgb2YgalF1ZXJ5IDEuNSwgdGhlIGVycm9yIHNldHRpbmcgY2FuIGFjY2VwdCBhbiBhcnJheSBvZiBmdW5jdGlvbnMuIEVhY2ggZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgaW4gdHVybi4gTm90ZTogVGhpcyBoYW5kbGVyIGlzIG5vdCBjYWxsZWQgZm9yIGNyb3NzLWRvbWFpbiBzY3JpcHQgYW5kIGNyb3NzLWRvbWFpbiBKU09OUCByZXF1ZXN0cy4gVGhpcyBpcyBhbiBBamF4IEV2ZW50LlxuICAgICAqL1xuICAgIGVycm9yPyAoanFYSFI6IEpRdWVyeVhIUiwgdGV4dFN0YXR1czogc3RyaW5nLCBlcnJvclRocm93bjogc3RyaW5nKTogYW55O1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gdHJpZ2dlciBnbG9iYWwgQWpheCBldmVudCBoYW5kbGVycyBmb3IgdGhpcyByZXF1ZXN0LiBUaGUgZGVmYXVsdCBpcyB0cnVlLiBTZXQgdG8gZmFsc2UgdG8gcHJldmVudCB0aGUgZ2xvYmFsIGhhbmRsZXJzIGxpa2UgYWpheFN0YXJ0IG9yIGFqYXhTdG9wIGZyb20gYmVpbmcgdHJpZ2dlcmVkLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGNvbnRyb2wgdmFyaW91cyBBamF4IEV2ZW50cy5cbiAgICAgKi9cbiAgICBnbG9iYWw/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBvZiBhZGRpdGlvbmFsIGhlYWRlciBrZXkvdmFsdWUgcGFpcnMgdG8gc2VuZCBhbG9uZyB3aXRoIHJlcXVlc3RzIHVzaW5nIHRoZSBYTUxIdHRwUmVxdWVzdCB0cmFuc3BvcnQuIFRoZSBoZWFkZXIgWC1SZXF1ZXN0ZWQtV2l0aDogWE1MSHR0cFJlcXVlc3QgaXMgYWx3YXlzIGFkZGVkLCBidXQgaXRzIGRlZmF1bHQgWE1MSHR0cFJlcXVlc3QgdmFsdWUgY2FuIGJlIGNoYW5nZWQgaGVyZS4gVmFsdWVzIGluIHRoZSBoZWFkZXJzIHNldHRpbmcgY2FuIGFsc28gYmUgb3ZlcndyaXR0ZW4gZnJvbSB3aXRoaW4gdGhlIGJlZm9yZVNlbmQgZnVuY3Rpb24uICh2ZXJzaW9uIGFkZGVkOiAxLjUpXG4gICAgICovXG4gICAgaGVhZGVycz86IHsgW2tleTogc3RyaW5nXTogYW55OyB9O1xuICAgIC8qKlxuICAgICAqIEFsbG93IHRoZSByZXF1ZXN0IHRvIGJlIHN1Y2Nlc3NmdWwgb25seSBpZiB0aGUgcmVzcG9uc2UgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgcmVxdWVzdC4gVGhpcyBpcyBkb25lIGJ5IGNoZWNraW5nIHRoZSBMYXN0LU1vZGlmaWVkIGhlYWRlci4gRGVmYXVsdCB2YWx1ZSBpcyBmYWxzZSwgaWdub3JpbmcgdGhlIGhlYWRlci4gSW4galF1ZXJ5IDEuNCB0aGlzIHRlY2huaXF1ZSBhbHNvIGNoZWNrcyB0aGUgJ2V0YWcnIHNwZWNpZmllZCBieSB0aGUgc2VydmVyIHRvIGNhdGNoIHVubW9kaWZpZWQgZGF0YS5cbiAgICAgKi9cbiAgICBpZk1vZGlmaWVkPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBbGxvdyB0aGUgY3VycmVudCBlbnZpcm9ubWVudCB0byBiZSByZWNvZ25pemVkIGFzIFwibG9jYWwsXCIgKGUuZy4gdGhlIGZpbGVzeXN0ZW0pLCBldmVuIGlmIGpRdWVyeSBkb2VzIG5vdCByZWNvZ25pemUgaXQgYXMgc3VjaCBieSBkZWZhdWx0LiBUaGUgZm9sbG93aW5nIHByb3RvY29scyBhcmUgY3VycmVudGx5IHJlY29nbml6ZWQgYXMgbG9jYWw6IGZpbGUsICotZXh0ZW5zaW9uLCBhbmQgd2lkZ2V0LiBJZiB0aGUgaXNMb2NhbCBzZXR0aW5nIG5lZWRzIG1vZGlmaWNhdGlvbiwgaXQgaXMgcmVjb21tZW5kZWQgdG8gZG8gc28gb25jZSBpbiB0aGUgJC5hamF4U2V0dXAoKSBtZXRob2QuICh2ZXJzaW9uIGFkZGVkOiAxLjUuMSlcbiAgICAgKi9cbiAgICBpc0xvY2FsPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gbmFtZSBpbiBhIGpzb25wIHJlcXVlc3QuIFRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQgb2YgJ2NhbGxiYWNrJyBpbiB0aGUgJ2NhbGxiYWNrPT8nIHBhcnQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBpbiB0aGUgdXJsLiBTbyB7anNvbnA6J29uSlNPTlBMb2FkJ30gd291bGQgcmVzdWx0IGluICdvbkpTT05QTG9hZD0/JyBwYXNzZWQgdG8gdGhlIHNlcnZlci4gQXMgb2YgalF1ZXJ5IDEuNSwgc2V0dGluZyB0aGUganNvbnAgb3B0aW9uIHRvIGZhbHNlIHByZXZlbnRzIGpRdWVyeSBmcm9tIGFkZGluZyB0aGUgXCI/Y2FsbGJhY2tcIiBzdHJpbmcgdG8gdGhlIFVSTCBvciBhdHRlbXB0aW5nIHRvIHVzZSBcIj0/XCIgZm9yIHRyYW5zZm9ybWF0aW9uLiBJbiB0aGlzIGNhc2UsIHlvdSBzaG91bGQgYWxzbyBleHBsaWNpdGx5IHNldCB0aGUganNvbnBDYWxsYmFjayBzZXR0aW5nLiBGb3IgZXhhbXBsZSwgeyBqc29ucDogZmFsc2UsIGpzb25wQ2FsbGJhY2s6IFwiY2FsbGJhY2tOYW1lXCIgfVxuICAgICAqL1xuICAgIGpzb25wPzogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIG5hbWUgZm9yIGEgSlNPTlAgcmVxdWVzdC4gVGhpcyB2YWx1ZSB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiB0aGUgcmFuZG9tIG5hbWUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgalF1ZXJ5LiBJdCBpcyBwcmVmZXJhYmxlIHRvIGxldCBqUXVlcnkgZ2VuZXJhdGUgYSB1bmlxdWUgbmFtZSBhcyBpdCdsbCBtYWtlIGl0IGVhc2llciB0byBtYW5hZ2UgdGhlIHJlcXVlc3RzIGFuZCBwcm92aWRlIGNhbGxiYWNrcyBhbmQgZXJyb3IgaGFuZGxpbmcuIFlvdSBtYXkgd2FudCB0byBzcGVjaWZ5IHRoZSBjYWxsYmFjayB3aGVuIHlvdSB3YW50IHRvIGVuYWJsZSBiZXR0ZXIgYnJvd3NlciBjYWNoaW5nIG9mIEdFVCByZXF1ZXN0cy4gQXMgb2YgalF1ZXJ5IDEuNSwgeW91IGNhbiBhbHNvIHVzZSBhIGZ1bmN0aW9uIGZvciB0aGlzIHNldHRpbmcsIGluIHdoaWNoIGNhc2UgdGhlIHZhbHVlIG9mIGpzb25wQ2FsbGJhY2sgaXMgc2V0IHRvIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhhdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBqc29ucENhbGxiYWNrPzogYW55O1xuICAgIC8qKlxuICAgICAqIEEgbWltZSB0eXBlIHRvIG92ZXJyaWRlIHRoZSBYSFIgbWltZSB0eXBlLiAodmVyc2lvbiBhZGRlZDogMS41LjEpXG4gICAgICovXG4gICAgbWltZVR5cGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQSBwYXNzd29yZCB0byBiZSB1c2VkIHdpdGggWE1MSHR0cFJlcXVlc3QgaW4gcmVzcG9uc2UgdG8gYW4gSFRUUCBhY2Nlc3MgYXV0aGVudGljYXRpb24gcmVxdWVzdC5cbiAgICAgKi9cbiAgICBwYXNzd29yZD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCBkYXRhIHBhc3NlZCBpbiB0byB0aGUgZGF0YSBvcHRpb24gYXMgYW4gb2JqZWN0ICh0ZWNobmljYWxseSwgYW55dGhpbmcgb3RoZXIgdGhhbiBhIHN0cmluZykgd2lsbCBiZSBwcm9jZXNzZWQgYW5kIHRyYW5zZm9ybWVkIGludG8gYSBxdWVyeSBzdHJpbmcsIGZpdHRpbmcgdG8gdGhlIGRlZmF1bHQgY29udGVudC10eXBlIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIuIElmIHlvdSB3YW50IHRvIHNlbmQgYSBET01Eb2N1bWVudCwgb3Igb3RoZXIgbm9uLXByb2Nlc3NlZCBkYXRhLCBzZXQgdGhpcyBvcHRpb24gdG8gZmFsc2UuXG4gICAgICovXG4gICAgcHJvY2Vzc0RhdGE/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9ubHkgYXBwbGllcyB3aGVuIHRoZSBcInNjcmlwdFwiIHRyYW5zcG9ydCBpcyB1c2VkIChlLmcuLCBjcm9zcy1kb21haW4gcmVxdWVzdHMgd2l0aCBcImpzb25wXCIgb3IgXCJzY3JpcHRcIiBkYXRhVHlwZSBhbmQgXCJHRVRcIiB0eXBlKS4gU2V0cyB0aGUgY2hhcnNldCBhdHRyaWJ1dGUgb24gdGhlIHNjcmlwdCB0YWcgdXNlZCBpbiB0aGUgcmVxdWVzdC4gVXNlZCB3aGVuIHRoZSBjaGFyYWN0ZXIgc2V0IG9uIHRoZSBsb2NhbCBwYWdlIGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgb25lIG9uIHRoZSByZW1vdGUgc2NyaXB0LlxuICAgICAqL1xuICAgIHNjcmlwdENoYXJzZXQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IG9mIG51bWVyaWMgSFRUUCBjb2RlcyBhbmQgZnVuY3Rpb25zIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgdGhlIGNvcnJlc3BvbmRpbmcgY29kZS4gZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsLCB0aGUgc3RhdHVzIGNvZGUgZnVuY3Rpb25zIHRha2UgdGhlIHNhbWUgcGFyYW1ldGVycyBhcyB0aGUgc3VjY2VzcyBjYWxsYmFjazsgaWYgaXQgcmVzdWx0cyBpbiBhbiBlcnJvciAoaW5jbHVkaW5nIDN4eCByZWRpcmVjdCksIHRoZXkgdGFrZSB0aGUgc2FtZSBwYXJhbWV0ZXJzIGFzIHRoZSBlcnJvciBjYWxsYmFjay4gKHZlcnNpb24gYWRkZWQ6IDEuNSlcbiAgICAgKi9cbiAgICBzdGF0dXNDb2RlPzogeyBba2V5OiBzdHJpbmddOiBhbnk7IH07XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMuIFRoZSBmdW5jdGlvbiBnZXRzIHBhc3NlZCB0aHJlZSBhcmd1bWVudHM6IFRoZSBkYXRhIHJldHVybmVkIGZyb20gdGhlIHNlcnZlciwgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgZGF0YVR5cGUgcGFyYW1ldGVyOyBhIHN0cmluZyBkZXNjcmliaW5nIHRoZSBzdGF0dXM7IGFuZCB0aGUganFYSFIgKGluIGpRdWVyeSAxLjQueCwgWE1MSHR0cFJlcXVlc3QpIG9iamVjdC4gQXMgb2YgalF1ZXJ5IDEuNSwgdGhlIHN1Y2Nlc3Mgc2V0dGluZyBjYW4gYWNjZXB0IGFuIGFycmF5IG9mIGZ1bmN0aW9ucy4gRWFjaCBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBpbiB0dXJuLiBUaGlzIGlzIGFuIEFqYXggRXZlbnQuXG4gICAgICovXG4gICAgc3VjY2Vzcz8gKGRhdGE6IGFueSwgdGV4dFN0YXR1czogc3RyaW5nLCBqcVhIUjogSlF1ZXJ5WEhSKTogYW55O1xuICAgIC8qKlxuICAgICAqIFNldCBhIHRpbWVvdXQgKGluIG1pbGxpc2Vjb25kcykgZm9yIHRoZSByZXF1ZXN0LiBUaGlzIHdpbGwgb3ZlcnJpZGUgYW55IGdsb2JhbCB0aW1lb3V0IHNldCB3aXRoICQuYWpheFNldHVwKCkuIFRoZSB0aW1lb3V0IHBlcmlvZCBzdGFydHMgYXQgdGhlIHBvaW50IHRoZSAkLmFqYXggY2FsbCBpcyBtYWRlOyBpZiBzZXZlcmFsIG90aGVyIHJlcXVlc3RzIGFyZSBpbiBwcm9ncmVzcyBhbmQgdGhlIGJyb3dzZXIgaGFzIG5vIGNvbm5lY3Rpb25zIGF2YWlsYWJsZSwgaXQgaXMgcG9zc2libGUgZm9yIGEgcmVxdWVzdCB0byB0aW1lIG91dCBiZWZvcmUgaXQgY2FuIGJlIHNlbnQuIEluIGpRdWVyeSAxLjQueCBhbmQgYmVsb3csIHRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3Qgd2lsbCBiZSBpbiBhbiBpbnZhbGlkIHN0YXRlIGlmIHRoZSByZXF1ZXN0IHRpbWVzIG91dDsgYWNjZXNzaW5nIGFueSBvYmplY3QgbWVtYmVycyBtYXkgdGhyb3cgYW4gZXhjZXB0aW9uLiBJbiBGaXJlZm94IDMuMCsgb25seSwgc2NyaXB0IGFuZCBKU09OUCByZXF1ZXN0cyBjYW5ub3QgYmUgY2FuY2VsbGVkIGJ5IGEgdGltZW91dDsgdGhlIHNjcmlwdCB3aWxsIHJ1biBldmVuIGlmIGl0IGFycml2ZXMgYWZ0ZXIgdGhlIHRpbWVvdXQgcGVyaW9kLlxuICAgICAqL1xuICAgIHRpbWVvdXQ/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2lzaCB0byB1c2UgdGhlIHRyYWRpdGlvbmFsIHN0eWxlIG9mIHBhcmFtIHNlcmlhbGl6YXRpb24uXG4gICAgICovXG4gICAgdHJhZGl0aW9uYWw/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHJlcXVlc3QgdG8gbWFrZSAoXCJQT1NUXCIgb3IgXCJHRVRcIiksIGRlZmF1bHQgaXMgXCJHRVRcIi4gTm90ZTogT3RoZXIgSFRUUCByZXF1ZXN0IG1ldGhvZHMsIHN1Y2ggYXMgUFVUIGFuZCBERUxFVEUsIGNhbiBhbHNvIGJlIHVzZWQgaGVyZSwgYnV0IHRoZXkgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQSBzdHJpbmcgY29udGFpbmluZyB0aGUgVVJMIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAgICovXG4gICAgdXJsPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEEgdXNlcm5hbWUgdG8gYmUgdXNlZCB3aXRoIFhNTEh0dHBSZXF1ZXN0IGluIHJlc3BvbnNlIHRvIGFuIEhUVFAgYWNjZXNzIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QuXG4gICAgICovXG4gICAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZm9yIGNyZWF0aW5nIHRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3QuIERlZmF1bHRzIHRvIHRoZSBBY3RpdmVYT2JqZWN0IHdoZW4gYXZhaWxhYmxlIChJRSksIHRoZSBYTUxIdHRwUmVxdWVzdCBvdGhlcndpc2UuIE92ZXJyaWRlIHRvIHByb3ZpZGUgeW91ciBvd24gaW1wbGVtZW50YXRpb24gZm9yIFhNTEh0dHBSZXF1ZXN0IG9yIGVuaGFuY2VtZW50cyB0byB0aGUgZmFjdG9yeS5cbiAgICAgKi9cbiAgICB4aHI/OiBhbnk7XG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IG9mIGZpZWxkTmFtZS1maWVsZFZhbHVlIHBhaXJzIHRvIHNldCBvbiB0aGUgbmF0aXZlIFhIUiBvYmplY3QuIEZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSBpdCB0byBzZXQgd2l0aENyZWRlbnRpYWxzIHRvIHRydWUgZm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cyBpZiBuZWVkZWQuIEluIGpRdWVyeSAxLjUsIHRoZSB3aXRoQ3JlZGVudGlhbHMgcHJvcGVydHkgd2FzIG5vdCBwcm9wYWdhdGVkIHRvIHRoZSBuYXRpdmUgWEhSIGFuZCB0aHVzIENPUlMgcmVxdWVzdHMgcmVxdWlyaW5nIGl0IHdvdWxkIGlnbm9yZSB0aGlzIGZsYWcuIEZvciB0aGlzIHJlYXNvbiwgd2UgcmVjb21tZW5kIHVzaW5nIGpRdWVyeSAxLjUuMSsgc2hvdWxkIHlvdSByZXF1aXJlIHRoZSB1c2Ugb2YgaXQuICh2ZXJzaW9uIGFkZGVkOiAxLjUuMSlcbiAgICAgKi9cbiAgICB4aHJGaWVsZHM/OiB7IFtrZXk6IHN0cmluZ106IGFueTsgfTtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHRoZSBqcVhIUiBvYmplY3RcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeVhIUiBleHRlbmRzIFhNTEh0dHBSZXF1ZXN0LCBKUXVlcnlQcm9taXNlPGFueT4ge1xuICAgIC8qKlxuICAgICAqIFRoZSAub3ZlcnJpZGVNaW1lVHlwZSgpIG1ldGhvZCBtYXkgYmUgdXNlZCBpbiB0aGUgYmVmb3JlU2VuZCgpIGNhbGxiYWNrIGZ1bmN0aW9uLCBmb3IgZXhhbXBsZSwgdG8gbW9kaWZ5IHRoZSByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyLiBBcyBvZiBqUXVlcnkgMS41LjEsIHRoZSBqcVhIUiBvYmplY3QgYWxzbyBjb250YWlucyB0aGUgb3ZlcnJpZGVNaW1lVHlwZSgpIG1ldGhvZCAoaXQgd2FzIGF2YWlsYWJsZSBpbiBqUXVlcnkgMS40LngsIGFzIHdlbGwsIGJ1dCB3YXMgdGVtcG9yYXJpbHkgcmVtb3ZlZCBpbiBqUXVlcnkgMS41KS4gXG4gICAgICovXG4gICAgb3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZTogc3RyaW5nKTogYW55O1xuICAgIC8qKlxuICAgICAqIENhbmNlbCB0aGUgcmVxdWVzdC4gXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhdHVzVGV4dCBBIHN0cmluZyBwYXNzZWQgYXMgdGhlIHRleHRTdGF0dXMgcGFyYW1ldGVyIGZvciB0aGUgZG9uZSBjYWxsYmFjay4gRGVmYXVsdCB2YWx1ZTogXCJjYW5jZWxlZFwiXG4gICAgICovXG4gICAgYWJvcnQoc3RhdHVzVGV4dD86IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW5jb3Jwb3JhdGVzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZSAuZG9uZSgpIGFuZCAuZmFpbCgpIG1ldGhvZHMsIGFsbG93aW5nIChhcyBvZiBqUXVlcnkgMS44KSB0aGUgdW5kZXJseWluZyBQcm9taXNlIHRvIGJlIG1hbmlwdWxhdGVkLiBSZWZlciB0byBkZWZlcnJlZC50aGVuKCkgZm9yIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gICAgICovXG4gICAgdGhlbihkb25lQ2FsbGJhY2s6IChkYXRhOiBhbnksIHRleHRTdGF0dXM6IHN0cmluZywganFYSFI6IEpRdWVyeVhIUikgPT4gdm9pZCwgZmFpbENhbGxiYWNrPzogKGpxWEhSOiBKUXVlcnlYSFIsIHRleHRTdGF0dXM6IHN0cmluZywgZXJyb3JUaHJvd246IGFueSkgPT4gdm9pZCk6IEpRdWVyeVByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBjb250YWluaW5nIHRoZSBwYXJzZWQgcmVzcG9uc2UgaWYgdGhlIHJlc3BvbnNlIENvbnRlbnQtVHlwZSBpcyBqc29uXG4gICAgICovXG4gICAgcmVzcG9uc2VKU09OPzogYW55O1xufVxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgdGhlIEpRdWVyeSBjYWxsYmFja1xuICovXG5pbnRlcmZhY2UgSlF1ZXJ5Q2FsbGJhY2sge1xuICAgIC8qKlxuICAgICAqIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gYSBjYWxsYmFjayBsaXN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjYWxsYmFja3MgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSB0byBiZSBhZGRlZCB0byB0aGUgY2FsbGJhY2sgbGlzdC5cbiAgICAgKi9cbiAgICBhZGQoY2FsbGJhY2tzOiBGdW5jdGlvbik6IEpRdWVyeUNhbGxiYWNrO1xuICAgIC8qKlxuICAgICAqIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gYSBjYWxsYmFjayBsaXN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjYWxsYmFja3MgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSB0byBiZSBhZGRlZCB0byB0aGUgY2FsbGJhY2sgbGlzdC5cbiAgICAgKi9cbiAgICBhZGQoY2FsbGJhY2tzOiBGdW5jdGlvbltdKTogSlF1ZXJ5Q2FsbGJhY2s7XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIGEgY2FsbGJhY2sgbGlzdCBmcm9tIGRvaW5nIGFueXRoaW5nIG1vcmUuXG4gICAgICovXG4gICAgZGlzYWJsZSgpOiBKUXVlcnlDYWxsYmFjaztcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSBpZiB0aGUgY2FsbGJhY2tzIGxpc3QgaGFzIGJlZW4gZGlzYWJsZWQuXG4gICAgICovXG4gICAgZGlzYWJsZWQoKTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgb2YgdGhlIGNhbGxiYWNrcyBmcm9tIGEgbGlzdC5cbiAgICAgKi9cbiAgICBlbXB0eSgpOiBKUXVlcnlDYWxsYmFjaztcblxuICAgIC8qKlxuICAgICAqIENhbGwgYWxsIG9mIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG4gICAgICogXG4gICAgICogQHBhcmFtIGFyZ3VtZW50cyBUaGUgYXJndW1lbnQgb3IgbGlzdCBvZiBhcmd1bWVudHMgdG8gcGFzcyBiYWNrIHRvIHRoZSBjYWxsYmFjayBsaXN0LlxuICAgICAqL1xuICAgIGZpcmUoLi4uYXJndW1lbnRzOiBhbnlbXSk6IEpRdWVyeUNhbGxiYWNrO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2UuXG4gICAgICovXG4gICAgZmlyZWQoKTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIENhbGwgYWxsIGNhbGxiYWNrcyBpbiBhIGxpc3Qgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjb250ZXh0IEEgcmVmZXJlbmNlIHRvIHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBjYWxsYmFja3MgaW4gdGhlIGxpc3Qgc2hvdWxkIGJlIGZpcmVkLlxuICAgICAqIEBwYXJhbSBhcmd1bWVudHMgQW4gYXJndW1lbnQsIG9yIGFycmF5IG9mIGFyZ3VtZW50cywgdG8gcGFzcyB0byB0aGUgY2FsbGJhY2tzIGluIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGZpcmVXaXRoKGNvbnRleHQ/OiBhbnksIC4uLmFyZ3M6IGFueVtdKTogSlF1ZXJ5Q2FsbGJhY2s7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciBhIHN1cHBsaWVkIGNhbGxiYWNrIGlzIGluIGEgbGlzdFxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gc2VhcmNoIGZvci5cbiAgICAgKi9cbiAgICBoYXMoY2FsbGJhY2s6IEZ1bmN0aW9uKTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIExvY2sgYSBjYWxsYmFjayBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlLlxuICAgICAqL1xuICAgIGxvY2soKTogSlF1ZXJ5Q2FsbGJhY2s7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIGNhbGxiYWNrcyBsaXN0IGhhcyBiZWVuIGxvY2tlZC5cbiAgICAgKi9cbiAgICBsb2NrZWQoKTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgZnJvbSBhIGNhbGxiYWNrIGxpc3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNhbGxiYWNrcyBBIGZ1bmN0aW9uLCBvciBhcnJheSBvZiBmdW5jdGlvbnMsIHRoYXQgYXJlIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgY2FsbGJhY2sgbGlzdC5cbiAgICAgKi9cbiAgICByZW1vdmUoY2FsbGJhY2tzOiBGdW5jdGlvbik6IEpRdWVyeUNhbGxiYWNrO1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgZnJvbSBhIGNhbGxiYWNrIGxpc3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNhbGxiYWNrcyBBIGZ1bmN0aW9uLCBvciBhcnJheSBvZiBmdW5jdGlvbnMsIHRoYXQgYXJlIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgY2FsbGJhY2sgbGlzdC5cbiAgICAgKi9cbiAgICByZW1vdmUoY2FsbGJhY2tzOiBGdW5jdGlvbltdKTogSlF1ZXJ5Q2FsbGJhY2s7XG59XG5cbi8qKlxuICogQWxsb3dzIGpRdWVyeSBQcm9taXNlcyB0byBpbnRlcm9wIHdpdGggbm9uLWpRdWVyeSBwcm9taXNlc1xuICovXG5pbnRlcmZhY2UgSlF1ZXJ5R2VuZXJpY1Byb21pc2U8VD4ge1xuICAgIC8qKlxuICAgICAqIEFkZCBoYW5kbGVycyB0byBiZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgb2JqZWN0IGlzIHJlc29sdmVkLCByZWplY3RlZCwgb3Igc3RpbGwgaW4gcHJvZ3Jlc3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIGRvbmVGaWx0ZXIgQSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZXNvbHZlZC5cbiAgICAgKiBAcGFyYW0gZmFpbEZpbHRlciBBbiBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZWplY3RlZC5cbiAgICAgKi9cbiAgICB0aGVuPFU+KGRvbmVGaWx0ZXI6ICh2YWx1ZTogVCkgPT4gVXxKUXVlcnlHZW5lcmljUHJvbWlzZTxVPiwgZmFpbEZpbHRlcj86IChyZWFzb246IGFueSkgPT4gVXxKUXVlcnlHZW5lcmljUHJvbWlzZTxVPik6IEpRdWVyeUdlbmVyaWNQcm9taXNlPFU+O1xufVxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgdGhlIEpRdWVyeSBwcm9taXNlL2RlZmVycmVkIGNhbGxiYWNrc1xuICovXG5pbnRlcmZhY2UgSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+IHtcbiAgICAodmFsdWU/OiBULCAuLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBKUXVlcnlQcm9taXNlT3BlcmF0b3I8VCwgUj4ge1xuICAgIChjYWxsYmFjazogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+LCAuLi5jYWxsYmFja3M6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdKTogSlF1ZXJ5UHJvbWlzZTxSPjtcbiAgICAoY2FsbGJhY2s6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdLCAuLi5jYWxsYmFja3M6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdKTogSlF1ZXJ5UHJvbWlzZTxSPjtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHRoZSBKUXVlcnkgcHJvbWlzZSwgcGFydCBvZiBjYWxsYmFja3NcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeVByb21pc2U8VD4ge1xuICAgIC8qKlxuICAgICAqIEFkZCBoYW5kbGVycyB0byBiZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgb2JqZWN0IGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gYWx3YXlzQ2FsbGJhY2tzMSBBIGZ1bmN0aW9uLCBvciBhcnJheSBvZiBmdW5jdGlvbnMsIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICAgICAqIEBwYXJhbSBhbHdheXNDYWxsYmFja3MyIE9wdGlvbmFsIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBvciBhcnJheXMgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gICAgICovXG4gICAgYWx3YXlzOiBKUXVlcnlQcm9taXNlT3BlcmF0b3I8YW55LCBUPjtcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyByZXNvbHZlZC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZG9uZUNhbGxiYWNrczEgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQuXG4gICAgICogQHBhcmFtIGRvbmVDYWxsYmFja3MyIE9wdGlvbmFsIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBvciBhcnJheXMgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQuXG4gICAgICovXG4gICAgZG9uZTogSlF1ZXJ5UHJvbWlzZU9wZXJhdG9yPFQsIFQ+O1xuICAgIC8qKlxuICAgICAqIEFkZCBoYW5kbGVycyB0byBiZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgb2JqZWN0IGlzIHJlamVjdGVkLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmYWlsQ2FsbGJhY2tzMSBBIGZ1bmN0aW9uLCBvciBhcnJheSBvZiBmdW5jdGlvbnMsIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZWplY3RlZC5cbiAgICAgKiBAcGFyYW0gZmFpbENhbGxiYWNrczIgT3B0aW9uYWwgYWRkaXRpb25hbCBmdW5jdGlvbnMsIG9yIGFycmF5cyBvZiBmdW5jdGlvbnMsIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZWplY3RlZC5cbiAgICAgKi9cbiAgICBmYWlsOiBKUXVlcnlQcm9taXNlT3BlcmF0b3I8YW55LCBUPjtcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBnZW5lcmF0ZXMgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9ucy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gcHJvZ3Jlc3NDYWxsYmFja3MgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgZ2VuZXJhdGVzIHByb2dyZXNzIG5vdGlmaWNhdGlvbnMuXG4gICAgICovXG4gICAgcHJvZ3Jlc3MocHJvZ3Jlc3NDYWxsYmFjazogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+KTogSlF1ZXJ5UHJvbWlzZTxUPjtcbiAgICBwcm9ncmVzcyhwcm9ncmVzc0NhbGxiYWNrczogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10pOiBKUXVlcnlQcm9taXNlPFQ+O1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHRoZSBjdXJyZW50IHN0YXRlIG9mIGEgRGVmZXJyZWQgb2JqZWN0LlxuICAgICAqL1xuICAgIHN0YXRlKCk6IHN0cmluZztcblxuICAgIC8vIERlcHJlY2F0ZWQgLSBnaXZlbiBubyB0eXBpbmdzXG4gICAgcGlwZShkb25lRmlsdGVyPzogKHg6IGFueSkgPT4gYW55LCBmYWlsRmlsdGVyPzogKHg6IGFueSkgPT4gYW55LCBwcm9ncmVzc0ZpbHRlcj86ICh4OiBhbnkpID0+IGFueSk6IEpRdWVyeVByb21pc2U8YW55PjtcblxuICAgIC8qKlxuICAgICAqIEFkZCBoYW5kbGVycyB0byBiZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgb2JqZWN0IGlzIHJlc29sdmVkLCByZWplY3RlZCwgb3Igc3RpbGwgaW4gcHJvZ3Jlc3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIGRvbmVGaWx0ZXIgQSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZXNvbHZlZC5cbiAgICAgKiBAcGFyYW0gZmFpbEZpbHRlciBBbiBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZWplY3RlZC5cbiAgICAgKiBAcGFyYW0gcHJvZ3Jlc3NGaWx0ZXIgQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiBwcm9ncmVzcyBub3RpZmljYXRpb25zIGFyZSBzZW50IHRvIHRoZSBEZWZlcnJlZC5cbiAgICAgKi9cbiAgICB0aGVuPFU+KGRvbmVGaWx0ZXI6ICh2YWx1ZTogVCkgPT4gVXxKUXVlcnlHZW5lcmljUHJvbWlzZTxVPiwgZmFpbEZpbHRlcj86ICguLi5yZWFzb25zOiBhbnlbXSkgPT4gVXxKUXVlcnlHZW5lcmljUHJvbWlzZTxVPiwgcHJvZ3Jlc3NGaWx0ZXI/OiAoLi4ucHJvZ3Jlc3Npb246IGFueVtdKSA9PiBhbnkpOiBKUXVlcnlQcm9taXNlPFU+O1xuXG4gICAgLy8gQmVjYXVzZSBKUXVlcnkgUHJvbWlzZXMgU3Vja1xuICAgIC8qKlxuICAgICAqIEFkZCBoYW5kbGVycyB0byBiZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgb2JqZWN0IGlzIHJlc29sdmVkLCByZWplY3RlZCwgb3Igc3RpbGwgaW4gcHJvZ3Jlc3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIGRvbmVGaWx0ZXIgQSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZXNvbHZlZC5cbiAgICAgKiBAcGFyYW0gZmFpbEZpbHRlciBBbiBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZWplY3RlZC5cbiAgICAgKiBAcGFyYW0gcHJvZ3Jlc3NGaWx0ZXIgQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiBwcm9ncmVzcyBub3RpZmljYXRpb25zIGFyZSBzZW50IHRvIHRoZSBEZWZlcnJlZC5cbiAgICAgKi9cbiAgICB0aGVuPFU+KGRvbmVGaWx0ZXI6ICguLi52YWx1ZXM6IGFueVtdKSA9PiBVfEpRdWVyeUdlbmVyaWNQcm9taXNlPFU+LCBmYWlsRmlsdGVyPzogKC4uLnJlYXNvbnM6IGFueVtdKSA9PiBVfEpRdWVyeUdlbmVyaWNQcm9taXNlPFU+LCBwcm9ncmVzc0ZpbHRlcj86ICguLi5wcm9ncmVzc2lvbjogYW55W10pID0+IGFueSk6IEpRdWVyeVByb21pc2U8VT47XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciB0aGUgSlF1ZXJ5IGRlZmVycmVkLCBwYXJ0IG9mIGNhbGxiYWNrc1xuICovXG5pbnRlcmZhY2UgSlF1ZXJ5RGVmZXJyZWQ8VD4gZXh0ZW5kcyBKUXVlcnlQcm9taXNlPFQ+IHtcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyBlaXRoZXIgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGFsd2F5c0NhbGxiYWNrczEgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZXNvbHZlZCBvciByZWplY3RlZC5cbiAgICAgKiBAcGFyYW0gYWx3YXlzQ2FsbGJhY2tzMiBPcHRpb25hbCBhZGRpdGlvbmFsIGZ1bmN0aW9ucywgb3IgYXJyYXlzIG9mIGZ1bmN0aW9ucywgdGhhdCBhcmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICAgICAqL1xuICAgIGFsd2F5cyhhbHdheXNDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+LCAuLi5hbHdheXNDYWxsYmFja3MyOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIGFsd2F5cyhhbHdheXNDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10sIC4uLmFsd2F5c0NhbGxiYWNrczI6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgYWx3YXlzKGFsd2F5c0NhbGxiYWNrczE/OiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD4sIC4uLmFsd2F5c0NhbGxiYWNrczI6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgYWx3YXlzKGFsd2F5c0NhbGxiYWNrczE/OiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSwgLi4uYWx3YXlzQ2FsbGJhY2tzMjogYW55W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICAvKipcbiAgICAgKiBBZGQgaGFuZGxlcnMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIG9iamVjdCBpcyByZXNvbHZlZC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZG9uZUNhbGxiYWNrczEgQSBmdW5jdGlvbiwgb3IgYXJyYXkgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQuXG4gICAgICogQHBhcmFtIGRvbmVDYWxsYmFja3MyIE9wdGlvbmFsIGFkZGl0aW9uYWwgZnVuY3Rpb25zLCBvciBhcnJheXMgb2YgZnVuY3Rpb25zLCB0aGF0IGFyZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgaXMgcmVzb2x2ZWQuXG4gICAgICovXG4gICAgZG9uZShkb25lQ2FsbGJhY2tzMT86IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPiwgLi4uZG9uZUNhbGxiYWNrczI6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgZG9uZShkb25lQ2FsbGJhY2tzMT86IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPltdLCAuLi5kb25lQ2FsbGJhY2tzMjogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICBkb25lKGRvbmVDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+LCAuLi5kb25lQ2FsbGJhY2tzMjogYW55W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICBkb25lKGRvbmVDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10sIC4uLmRvbmVDYWxsYmFja3MyOiBhbnlbXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIC8qKlxuICAgICAqIEFkZCBoYW5kbGVycyB0byBiZSBjYWxsZWQgd2hlbiB0aGUgRGVmZXJyZWQgb2JqZWN0IGlzIHJlamVjdGVkLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmYWlsQ2FsbGJhY2tzMSBBIGZ1bmN0aW9uLCBvciBhcnJheSBvZiBmdW5jdGlvbnMsIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZWplY3RlZC5cbiAgICAgKiBAcGFyYW0gZmFpbENhbGxiYWNrczIgT3B0aW9uYWwgYWRkaXRpb25hbCBmdW5jdGlvbnMsIG9yIGFycmF5cyBvZiBmdW5jdGlvbnMsIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBpcyByZWplY3RlZC5cbiAgICAgKi9cbiAgICBmYWlsKGZhaWxDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+LCAuLi5mYWlsQ2FsbGJhY2tzMjogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcbiAgICBmYWlsKGZhaWxDYWxsYmFja3MxPzogSlF1ZXJ5UHJvbWlzZUNhbGxiYWNrPFQ+W10sIC4uLmZhaWxDYWxsYmFja3MyOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIGZhaWwoZmFpbENhbGxiYWNrczE/OiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD4sIC4uLmZhaWxDYWxsYmFja3MyOiBhbnlbXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIGZhaWwoZmFpbENhbGxiYWNrczE/OiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSwgLi4uZmFpbENhbGxiYWNrczI6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgLyoqXG4gICAgICogQWRkIGhhbmRsZXJzIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBEZWZlcnJlZCBvYmplY3QgZ2VuZXJhdGVzIHByb2dyZXNzIG5vdGlmaWNhdGlvbnMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHByb2dyZXNzQ2FsbGJhY2tzIEEgZnVuY3Rpb24sIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIERlZmVycmVkIGdlbmVyYXRlcyBwcm9ncmVzcyBub3RpZmljYXRpb25zLlxuICAgICAqL1xuICAgIHByb2dyZXNzKHByb2dyZXNzQ2FsbGJhY2s6IEpRdWVyeVByb21pc2VDYWxsYmFjazxUPik6IEpRdWVyeURlZmVycmVkPFQ+O1xuICAgIHByb2dyZXNzKHByb2dyZXNzQ2FsbGJhY2tzOiBKUXVlcnlQcm9taXNlQ2FsbGJhY2s8VD5bXSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbCB0aGUgcHJvZ3Jlc3NDYWxsYmFja3Mgb24gYSBEZWZlcnJlZCBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gYXJncyBPcHRpb25hbCBhcmd1bWVudHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSBwcm9ncmVzc0NhbGxiYWNrcy5cbiAgICAgKi9cbiAgICBub3RpZnkoLi4uYXJnczogYW55W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcblxuICAgIC8qKlxuICAgICAqIENhbGwgdGhlIHByb2dyZXNzQ2FsbGJhY2tzIG9uIGEgRGVmZXJyZWQgb2JqZWN0IHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNvbnRleHQgQ29udGV4dCBwYXNzZWQgdG8gdGhlIHByb2dyZXNzQ2FsbGJhY2tzIGFzIHRoZSB0aGlzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gYXJncyBPcHRpb25hbCBhcmd1bWVudHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSBwcm9ncmVzc0NhbGxiYWNrcy5cbiAgICAgKi9cbiAgICBub3RpZnlXaXRoKGNvbnRleHQ6IGFueSwgLi4uYXJnczogYW55W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcblxuICAgIC8qKlxuICAgICAqIFJlamVjdCBhIERlZmVycmVkIG9iamVjdCBhbmQgY2FsbCBhbnkgZmFpbENhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBhcmdzIE9wdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGZhaWxDYWxsYmFja3MuXG4gICAgICovXG4gICAgcmVqZWN0KC4uLmFyZ3M6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG4gICAgLyoqXG4gICAgICogUmVqZWN0IGEgRGVmZXJyZWQgb2JqZWN0IGFuZCBjYWxsIGFueSBmYWlsQ2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNvbnRleHQgQ29udGV4dCBwYXNzZWQgdG8gdGhlIGZhaWxDYWxsYmFja3MgYXMgdGhlIHRoaXMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBhcmdzIEFuIG9wdGlvbmFsIGFycmF5IG9mIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGZhaWxDYWxsYmFja3MuXG4gICAgICovXG4gICAgcmVqZWN0V2l0aChjb250ZXh0OiBhbnksIC4uLmFyZ3M6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIGEgRGVmZXJyZWQgb2JqZWN0IGFuZCBjYWxsIGFueSBkb25lQ2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIHZhbHVlIEZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBkb25lQ2FsbGJhY2tzLlxuICAgICAqIEBwYXJhbSBhcmdzIE9wdGlvbmFsIHN1YnNlcXVlbnQgYXJndW1lbnRzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgZG9uZUNhbGxiYWNrcy5cbiAgICAgKi9cbiAgICByZXNvbHZlKHZhbHVlPzogVCwgLi4uYXJnczogYW55W10pOiBKUXVlcnlEZWZlcnJlZDxUPjtcblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgYSBEZWZlcnJlZCBvYmplY3QgYW5kIGNhbGwgYW55IGRvbmVDYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJncy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY29udGV4dCBDb250ZXh0IHBhc3NlZCB0byB0aGUgZG9uZUNhbGxiYWNrcyBhcyB0aGUgdGhpcyBvYmplY3QuXG4gICAgICogQHBhcmFtIGFyZ3MgQW4gb3B0aW9uYWwgYXJyYXkgb2YgYXJndW1lbnRzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgZG9uZUNhbGxiYWNrcy5cbiAgICAgKi9cbiAgICByZXNvbHZlV2l0aChjb250ZXh0OiBhbnksIC4uLmFyZ3M6IGFueVtdKTogSlF1ZXJ5RGVmZXJyZWQ8VD47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBEZWZlcnJlZCdzIFByb21pc2Ugb2JqZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB0YXJnZXQgT2JqZWN0IG9udG8gd2hpY2ggdGhlIHByb21pc2UgbWV0aG9kcyBoYXZlIHRvIGJlIGF0dGFjaGVkXG4gICAgICovXG4gICAgcHJvbWlzZSh0YXJnZXQ/OiBhbnkpOiBKUXVlcnlQcm9taXNlPFQ+O1xufVxuXG4vKipcbiAqIEludGVyZmFjZSBvZiB0aGUgSlF1ZXJ5IGV4dGVuc2lvbiBvZiB0aGUgVzNDIGV2ZW50IG9iamVjdFxuICovXG5pbnRlcmZhY2UgQmFzZUpRdWVyeUV2ZW50T2JqZWN0IGV4dGVuZHMgRXZlbnQge1xuICAgIGRhdGE6IGFueTtcbiAgICBkZWxlZ2F0ZVRhcmdldDogRWxlbWVudDtcbiAgICBpc0RlZmF1bHRQcmV2ZW50ZWQoKTogYm9vbGVhbjtcbiAgICBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpOiBib29sZWFuO1xuICAgIGlzUHJvcGFnYXRpb25TdG9wcGVkKCk6IGJvb2xlYW47XG4gICAgbmFtZXNwYWNlOiBzdHJpbmc7XG4gICAgb3JpZ2luYWxFdmVudDogRXZlbnQ7XG4gICAgcHJldmVudERlZmF1bHQoKTogYW55O1xuICAgIHJlbGF0ZWRUYXJnZXQ6IEVsZW1lbnQ7XG4gICAgcmVzdWx0OiBhbnk7XG4gICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk6IHZvaWQ7XG4gICAgc3RvcFByb3BhZ2F0aW9uKCk6IHZvaWQ7XG4gICAgdGFyZ2V0OiBFbGVtZW50O1xuICAgIHBhZ2VYOiBudW1iZXI7XG4gICAgcGFnZVk6IG51bWJlcjtcbiAgICB3aGljaDogbnVtYmVyO1xuICAgIG1ldGFLZXk6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBKUXVlcnlJbnB1dEV2ZW50T2JqZWN0IGV4dGVuZHMgQmFzZUpRdWVyeUV2ZW50T2JqZWN0IHtcbiAgICBhbHRLZXk6IGJvb2xlYW47XG4gICAgY3RybEtleTogYm9vbGVhbjtcbiAgICBtZXRhS2V5OiBib29sZWFuO1xuICAgIHNoaWZ0S2V5OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgSlF1ZXJ5TW91c2VFdmVudE9iamVjdCBleHRlbmRzIEpRdWVyeUlucHV0RXZlbnRPYmplY3Qge1xuICAgIGJ1dHRvbjogbnVtYmVyO1xuICAgIGNsaWVudFg6IG51bWJlcjtcbiAgICBjbGllbnRZOiBudW1iZXI7XG4gICAgb2Zmc2V0WDogbnVtYmVyO1xuICAgIG9mZnNldFk6IG51bWJlcjtcbiAgICBwYWdlWDogbnVtYmVyO1xuICAgIHBhZ2VZOiBudW1iZXI7XG4gICAgc2NyZWVuWDogbnVtYmVyO1xuICAgIHNjcmVlblk6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIEpRdWVyeUtleUV2ZW50T2JqZWN0IGV4dGVuZHMgSlF1ZXJ5SW5wdXRFdmVudE9iamVjdCB7XG4gICAgY2hhcjogYW55O1xuICAgIGNoYXJDb2RlOiBudW1iZXI7XG4gICAga2V5OiBhbnk7XG4gICAga2V5Q29kZTogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgSlF1ZXJ5RXZlbnRPYmplY3QgZXh0ZW5kcyBCYXNlSlF1ZXJ5RXZlbnRPYmplY3QsIEpRdWVyeUlucHV0RXZlbnRPYmplY3QsIEpRdWVyeU1vdXNlRXZlbnRPYmplY3QsIEpRdWVyeUtleUV2ZW50T2JqZWN0e1xufVxuXG4vKlxuICAgIENvbGxlY3Rpb24gb2YgcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCBicm93c2VyXG4qL1xuXG5pbnRlcmZhY2UgSlF1ZXJ5U3VwcG9ydCB7XG4gICAgYWpheD86IGJvb2xlYW47XG4gICAgYm94TW9kZWw/OiBib29sZWFuO1xuICAgIGNoYW5nZUJ1YmJsZXM/OiBib29sZWFuO1xuICAgIGNoZWNrQ2xvbmU/OiBib29sZWFuO1xuICAgIGNoZWNrT24/OiBib29sZWFuO1xuICAgIGNvcnM/OiBib29sZWFuO1xuICAgIGNzc0Zsb2F0PzogYm9vbGVhbjtcbiAgICBocmVmTm9ybWFsaXplZD86IGJvb2xlYW47XG4gICAgaHRtbFNlcmlhbGl6ZT86IGJvb2xlYW47XG4gICAgbGVhZGluZ1doaXRlc3BhY2U/OiBib29sZWFuO1xuICAgIG5vQ2xvbmVDaGVja2VkPzogYm9vbGVhbjtcbiAgICBub0Nsb25lRXZlbnQ/OiBib29sZWFuO1xuICAgIG9wYWNpdHk/OiBib29sZWFuO1xuICAgIG9wdERpc2FibGVkPzogYm9vbGVhbjtcbiAgICBvcHRTZWxlY3RlZD86IGJvb2xlYW47XG4gICAgc2NyaXB0RXZhbD8gKCk6IGJvb2xlYW47XG4gICAgc3R5bGU/OiBib29sZWFuO1xuICAgIHN1Ym1pdEJ1YmJsZXM/OiBib29sZWFuO1xuICAgIHRib2R5PzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEpRdWVyeVBhcmFtIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIGFuIGFycmF5IG9yIG9iamVjdCwgc3VpdGFibGUgZm9yIHVzZSBpbiBhIFVSTCBxdWVyeSBzdHJpbmcgb3IgQWpheCByZXF1ZXN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQW4gYXJyYXkgb3Igb2JqZWN0IHRvIHNlcmlhbGl6ZS5cbiAgICAgKi9cbiAgICAob2JqOiBhbnkpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIGFuIGFycmF5IG9yIG9iamVjdCwgc3VpdGFibGUgZm9yIHVzZSBpbiBhIFVSTCBxdWVyeSBzdHJpbmcgb3IgQWpheCByZXF1ZXN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQW4gYXJyYXkgb3Igb2JqZWN0IHRvIHNlcmlhbGl6ZS5cbiAgICAgKiBAcGFyYW0gdHJhZGl0aW9uYWwgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBwZXJmb3JtIGEgdHJhZGl0aW9uYWwgXCJzaGFsbG93XCIgc2VyaWFsaXphdGlvbi5cbiAgICAgKi9cbiAgICAob2JqOiBhbnksIHRyYWRpdGlvbmFsOiBib29sZWFuKTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgdXNlZCB0byBjb25zdHJ1Y3QgalF1ZXJ5IGV2ZW50cyAod2l0aCAkLkV2ZW50KS4gSXQgaXNcbiAqIGRlZmluZWQgc2VwYXJhdGVseSBpbnN0ZWFkIG9mIGlubGluZSBpbiBKUXVlcnlTdGF0aWMgdG8gYWxsb3dcbiAqIG92ZXJyaWRpbmcgdGhlIGNvbnN0cnVjdGlvbiBmdW5jdGlvbiB3aXRoIHNwZWNpZmljIHN0cmluZ3NcbiAqIHJldHVybmluZyBzcGVjaWZpYyBldmVudCBvYmplY3RzLlxuICovXG5pbnRlcmZhY2UgSlF1ZXJ5RXZlbnRDb25zdHJ1Y3RvciB7XG4gICAgKG5hbWU6IHN0cmluZywgZXZlbnRQcm9wZXJ0aWVzPzogYW55KTogSlF1ZXJ5RXZlbnRPYmplY3Q7XG4gICAgbmV3IChuYW1lOiBzdHJpbmcsIGV2ZW50UHJvcGVydGllcz86IGFueSk6IEpRdWVyeUV2ZW50T2JqZWN0O1xufVxuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgdXNlZCB0byBzcGVjaWZ5IGNvb3JkaW5hdGVzLlxuICovXG5pbnRlcmZhY2UgSlF1ZXJ5Q29vcmRpbmF0ZXMge1xuICAgIGxlZnQ6IG51bWJlcjtcbiAgICB0b3A6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBFbGVtZW50cyBpbiB0aGUgYXJyYXkgcmV0dXJuZWQgYnkgc2VyaWFsaXplQXJyYXkoKVxuICovXG5pbnRlcmZhY2UgSlF1ZXJ5U2VyaWFsaXplQXJyYXlFbGVtZW50IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMgeyBcbiAgICAvKipcbiAgICAgKiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKi9cbiAgICBkdXJhdGlvbj86IGFueTsgXG4gICAgLyoqXG4gICAgICogQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKi9cbiAgICBlYXNpbmc/OiBzdHJpbmc7IFxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgY29tcGxldGU/OiBGdW5jdGlvbjsgXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2ggYW5pbWF0ZWQgcHJvcGVydHkgb2YgZWFjaCBhbmltYXRlZCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIGFuIG9wcG9ydHVuaXR5IHRvIG1vZGlmeSB0aGUgVHdlZW4gb2JqZWN0IHRvIGNoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGJlZm9yZSBpdCBpcyBzZXQuXG4gICAgICovXG4gICAgc3RlcD86IChub3c6IG51bWJlciwgdHdlZW46IGFueSkgPT4gYW55OyBcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhZnRlciBlYWNoIHN0ZXAgb2YgdGhlIGFuaW1hdGlvbiwgb25seSBvbmNlIHBlciBhbmltYXRlZCBlbGVtZW50IHJlZ2FyZGxlc3Mgb2YgdGhlIG51bWJlciBvZiBhbmltYXRlZCBwcm9wZXJ0aWVzLiAodmVyc2lvbiBhZGRlZDogMS44KVxuICAgICAqL1xuICAgIHByb2dyZXNzPzogKGFuaW1hdGlvbjogSlF1ZXJ5UHJvbWlzZTxhbnk+LCBwcm9ncmVzczogbnVtYmVyLCByZW1haW5pbmdNczogbnVtYmVyKSA9PiBhbnk7IFxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBhbmltYXRpb24gYmVnaW5zLiAodmVyc2lvbiBhZGRlZDogMS44KVxuICAgICAqL1xuICAgIHN0YXJ0PzogKGFuaW1hdGlvbjogSlF1ZXJ5UHJvbWlzZTxhbnk+KSA9PiBhbnk7IFxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXMgKGl0cyBQcm9taXNlIG9iamVjdCBpcyByZXNvbHZlZCkuICh2ZXJzaW9uIGFkZGVkOiAxLjgpXG4gICAgICovXG4gICAgZG9uZT86IChhbmltYXRpb246IEpRdWVyeVByb21pc2U8YW55PiwganVtcGVkVG9FbmQ6IGJvb2xlYW4pID0+IGFueTsgXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGZhaWxzIHRvIGNvbXBsZXRlIChpdHMgUHJvbWlzZSBvYmplY3QgaXMgcmVqZWN0ZWQpLiAodmVyc2lvbiBhZGRlZDogMS44KVxuICAgICAqL1xuICAgIGZhaWw/OiAoYW5pbWF0aW9uOiBKUXVlcnlQcm9taXNlPGFueT4sIGp1bXBlZFRvRW5kOiBib29sZWFuKSA9PiBhbnk7IFxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXMgb3Igc3RvcHMgd2l0aG91dCBjb21wbGV0aW5nIChpdHMgUHJvbWlzZSBvYmplY3QgaXMgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkKS4gKHZlcnNpb24gYWRkZWQ6IDEuOClcbiAgICAgKi9cbiAgICBhbHdheXM/OiAoYW5pbWF0aW9uOiBKUXVlcnlQcm9taXNlPGFueT4sIGp1bXBlZFRvRW5kOiBib29sZWFuKSA9PiBhbnk7IFxuICAgIC8qKlxuICAgICAqIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gcGxhY2UgdGhlIGFuaW1hdGlvbiBpbiB0aGUgZWZmZWN0cyBxdWV1ZS4gSWYgZmFsc2UsIHRoZSBhbmltYXRpb24gd2lsbCBiZWdpbiBpbW1lZGlhdGVseS4gQXMgb2YgalF1ZXJ5IDEuNywgdGhlIHF1ZXVlIG9wdGlvbiBjYW4gYWxzbyBhY2NlcHQgYSBzdHJpbmcsIGluIHdoaWNoIGNhc2UgdGhlIGFuaW1hdGlvbiBpcyBhZGRlZCB0byB0aGUgcXVldWUgcmVwcmVzZW50ZWQgYnkgdGhhdCBzdHJpbmcuIFdoZW4gYSBjdXN0b20gcXVldWUgbmFtZSBpcyB1c2VkIHRoZSBhbmltYXRpb24gZG9lcyBub3QgYXV0b21hdGljYWxseSBzdGFydDsgeW91IG11c3QgY2FsbCAuZGVxdWV1ZShcInF1ZXVlbmFtZVwiKSB0byBzdGFydCBpdC5cbiAgICAgKi9cbiAgICBxdWV1ZT86IGFueTsgXG4gICAgLyoqXG4gICAgICogQSBtYXAgb2Ygb25lIG9yIG1vcmUgb2YgdGhlIENTUyBwcm9wZXJ0aWVzIGRlZmluZWQgYnkgdGhlIHByb3BlcnRpZXMgYXJndW1lbnQgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgZWFzaW5nIGZ1bmN0aW9ucy4gKHZlcnNpb24gYWRkZWQ6IDEuNClcbiAgICAgKi9cbiAgICBzcGVjaWFsRWFzaW5nPzogT2JqZWN0O1xufVxuXG4vKipcbiAqIFN0YXRpYyBtZW1iZXJzIG9mIGpRdWVyeSAodGhvc2Ugb24gJCBhbmQgalF1ZXJ5IHRoZW1zZWx2ZXMpXG4gKi9cbmludGVyZmFjZSBKUXVlcnlTdGF0aWMge1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhbiBhc3luY2hyb25vdXMgSFRUUCAoQWpheCkgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyBBIHNldCBvZiBrZXkvdmFsdWUgcGFpcnMgdGhhdCBjb25maWd1cmUgdGhlIEFqYXggcmVxdWVzdC4gQWxsIHNldHRpbmdzIGFyZSBvcHRpb25hbC4gQSBkZWZhdWx0IGNhbiBiZSBzZXQgZm9yIGFueSBvcHRpb24gd2l0aCAkLmFqYXhTZXR1cCgpLlxuICAgICAqL1xuICAgIGFqYXgoc2V0dGluZ3M6IEpRdWVyeUFqYXhTZXR0aW5ncyk6IEpRdWVyeVhIUjtcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGFuIGFzeW5jaHJvbm91cyBIVFRQIChBamF4KSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCBBIHN0cmluZyBjb250YWluaW5nIHRoZSBVUkwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudC5cbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgQSBzZXQgb2Yga2V5L3ZhbHVlIHBhaXJzIHRoYXQgY29uZmlndXJlIHRoZSBBamF4IHJlcXVlc3QuIEFsbCBzZXR0aW5ncyBhcmUgb3B0aW9uYWwuIEEgZGVmYXVsdCBjYW4gYmUgc2V0IGZvciBhbnkgb3B0aW9uIHdpdGggJC5hamF4U2V0dXAoKS5cbiAgICAgKi9cbiAgICBhamF4KHVybDogc3RyaW5nLCBzZXR0aW5ncz86IEpRdWVyeUFqYXhTZXR0aW5ncyk6IEpRdWVyeVhIUjtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBjdXN0b20gQWpheCBvcHRpb25zIG9yIG1vZGlmeSBleGlzdGluZyBvcHRpb25zIGJlZm9yZSBlYWNoIHJlcXVlc3QgaXMgc2VudCBhbmQgYmVmb3JlIHRoZXkgYXJlIHByb2Nlc3NlZCBieSAkLmFqYXgoKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhVHlwZXMgQW4gb3B0aW9uYWwgc3RyaW5nIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGRhdGFUeXBlc1xuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgaGFuZGxlciB0byBzZXQgZGVmYXVsdCB2YWx1ZXMgZm9yIGZ1dHVyZSBBamF4IHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGFqYXhQcmVmaWx0ZXIoZGF0YVR5cGVzOiBzdHJpbmcsIGhhbmRsZXI6IChvcHRzOiBhbnksIG9yaWdpbmFsT3B0czogSlF1ZXJ5QWpheFNldHRpbmdzLCBqcVhIUjogSlF1ZXJ5WEhSKSA9PiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBjdXN0b20gQWpheCBvcHRpb25zIG9yIG1vZGlmeSBleGlzdGluZyBvcHRpb25zIGJlZm9yZSBlYWNoIHJlcXVlc3QgaXMgc2VudCBhbmQgYmVmb3JlIHRoZXkgYXJlIHByb2Nlc3NlZCBieSAkLmFqYXgoKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgaGFuZGxlciB0byBzZXQgZGVmYXVsdCB2YWx1ZXMgZm9yIGZ1dHVyZSBBamF4IHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGFqYXhQcmVmaWx0ZXIoaGFuZGxlcjogKG9wdHM6IGFueSwgb3JpZ2luYWxPcHRzOiBKUXVlcnlBamF4U2V0dGluZ3MsIGpxWEhSOiBKUXVlcnlYSFIpID0+IGFueSk6IHZvaWQ7XG5cbiAgICBhamF4U2V0dGluZ3M6IEpRdWVyeUFqYXhTZXR0aW5ncztcblxuICAgICAvKipcbiAgICAgICogU2V0IGRlZmF1bHQgdmFsdWVzIGZvciBmdXR1cmUgQWpheCByZXF1ZXN0cy4gSXRzIHVzZSBpcyBub3QgcmVjb21tZW5kZWQuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSBvcHRpb25zIEEgc2V0IG9mIGtleS92YWx1ZSBwYWlycyB0aGF0IGNvbmZpZ3VyZSB0aGUgZGVmYXVsdCBBamF4IHJlcXVlc3QuIEFsbCBvcHRpb25zIGFyZSBvcHRpb25hbC5cbiAgICAgICovXG4gICAgYWpheFNldHVwKG9wdGlvbnM6IEpRdWVyeUFqYXhTZXR0aW5ncyk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBMb2FkIGRhdGEgZnJvbSB0aGUgc2VydmVyIHVzaW5nIGEgSFRUUCBHRVQgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmwgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgVVJMIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAgICogQHBhcmFtIHN1Y2Nlc3MgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLlxuICAgICAqIEBwYXJhbSBkYXRhVHlwZSBUaGUgdHlwZSBvZiBkYXRhIGV4cGVjdGVkIGZyb20gdGhlIHNlcnZlci4gRGVmYXVsdDogSW50ZWxsaWdlbnQgR3Vlc3MgKHhtbCwganNvbiwgc2NyaXB0LCBvciBodG1sKS5cbiAgICAgKi9cbiAgICBnZXQodXJsOiBzdHJpbmcsIHN1Y2Nlc3M/OiAoZGF0YTogYW55LCB0ZXh0U3RhdHVzOiBzdHJpbmcsIGpxWEhSOiBKUXVlcnlYSFIpID0+IGFueSwgZGF0YVR5cGU/OiBzdHJpbmcpOiBKUXVlcnlYSFI7XG4gICAgLyoqXG4gICAgICogTG9hZCBkYXRhIGZyb20gdGhlIHNlcnZlciB1c2luZyBhIEhUVFAgR0VUIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgICAqIEBwYXJhbSBkYXRhIEEgcGxhaW4gb2JqZWN0IG9yIHN0cmluZyB0aGF0IGlzIHNlbnQgdG8gdGhlIHNlcnZlciB3aXRoIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcy5cbiAgICAgKiBAcGFyYW0gZGF0YVR5cGUgVGhlIHR5cGUgb2YgZGF0YSBleHBlY3RlZCBmcm9tIHRoZSBzZXJ2ZXIuIERlZmF1bHQ6IEludGVsbGlnZW50IEd1ZXNzICh4bWwsIGpzb24sIHNjcmlwdCwgb3IgaHRtbCkuXG4gICAgICovXG4gICAgZ2V0KHVybDogc3RyaW5nLCBkYXRhPzogT2JqZWN0fHN0cmluZywgc3VjY2Vzcz86IChkYXRhOiBhbnksIHRleHRTdGF0dXM6IHN0cmluZywganFYSFI6IEpRdWVyeVhIUikgPT4gYW55LCBkYXRhVHlwZT86IHN0cmluZyk6IEpRdWVyeVhIUjtcbiAgICAvKipcbiAgICAgKiBMb2FkIEpTT04tZW5jb2RlZCBkYXRhIGZyb20gdGhlIHNlcnZlciB1c2luZyBhIEdFVCBIVFRQIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgICAqIEBwYXJhbSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcy5cbiAgICAgKi9cbiAgICBnZXRKU09OKHVybDogc3RyaW5nLCBzdWNjZXNzPzogKGRhdGE6IGFueSwgdGV4dFN0YXR1czogc3RyaW5nLCBqcVhIUjogSlF1ZXJ5WEhSKSA9PiBhbnkpOiBKUXVlcnlYSFI7XG4gICAgLyoqXG4gICAgICogTG9hZCBKU09OLWVuY29kZWQgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmcgYSBHRVQgSFRUUCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCBBIHN0cmluZyBjb250YWluaW5nIHRoZSBVUkwgdG8gd2hpY2ggdGhlIHJlcXVlc3QgaXMgc2VudC5cbiAgICAgKiBAcGFyYW0gZGF0YSBBIHBsYWluIG9iamVjdCBvciBzdHJpbmcgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIgd2l0aCB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0gc3VjY2VzcyBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMuXG4gICAgICovXG4gICAgZ2V0SlNPTih1cmw6IHN0cmluZywgZGF0YT86IE9iamVjdHxzdHJpbmcsIHN1Y2Nlc3M/OiAoZGF0YTogYW55LCB0ZXh0U3RhdHVzOiBzdHJpbmcsIGpxWEhSOiBKUXVlcnlYSFIpID0+IGFueSk6IEpRdWVyeVhIUjtcbiAgICAvKipcbiAgICAgKiBMb2FkIGEgSmF2YVNjcmlwdCBmaWxlIGZyb20gdGhlIHNlcnZlciB1c2luZyBhIEdFVCBIVFRQIHJlcXVlc3QsIHRoZW4gZXhlY3V0ZSBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmwgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgVVJMIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAgICogQHBhcmFtIHN1Y2Nlc3MgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLlxuICAgICAqL1xuICAgIGdldFNjcmlwdCh1cmw6IHN0cmluZywgc3VjY2Vzcz86IChzY3JpcHQ6IHN0cmluZywgdGV4dFN0YXR1czogc3RyaW5nLCBqcVhIUjogSlF1ZXJ5WEhSKSA9PiBhbnkpOiBKUXVlcnlYSFI7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIGFuIGFycmF5IG9yIG9iamVjdCwgc3VpdGFibGUgZm9yIHVzZSBpbiBhIFVSTCBxdWVyeSBzdHJpbmcgb3IgQWpheCByZXF1ZXN0LlxuICAgICAqL1xuICAgIHBhcmFtOiBKUXVlcnlQYXJhbTtcblxuICAgIC8qKlxuICAgICAqIExvYWQgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmcgYSBIVFRQIFBPU1QgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmwgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgVVJMIHRvIHdoaWNoIHRoZSByZXF1ZXN0IGlzIHNlbnQuXG4gICAgICogQHBhcmFtIHN1Y2Nlc3MgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLiBSZXF1aXJlZCBpZiBkYXRhVHlwZSBpcyBwcm92aWRlZCwgYnV0IGNhbiBiZSBudWxsIGluIHRoYXQgY2FzZS5cbiAgICAgKiBAcGFyYW0gZGF0YVR5cGUgVGhlIHR5cGUgb2YgZGF0YSBleHBlY3RlZCBmcm9tIHRoZSBzZXJ2ZXIuIERlZmF1bHQ6IEludGVsbGlnZW50IEd1ZXNzICh4bWwsIGpzb24sIHNjcmlwdCwgdGV4dCwgaHRtbCkuXG4gICAgICovXG4gICAgcG9zdCh1cmw6IHN0cmluZywgc3VjY2Vzcz86IChkYXRhOiBhbnksIHRleHRTdGF0dXM6IHN0cmluZywganFYSFI6IEpRdWVyeVhIUikgPT4gYW55LCBkYXRhVHlwZT86IHN0cmluZyk6IEpRdWVyeVhIUjtcbiAgICAvKipcbiAgICAgKiBMb2FkIGRhdGEgZnJvbSB0aGUgc2VydmVyIHVzaW5nIGEgSFRUUCBQT1NUIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgICAqIEBwYXJhbSBkYXRhIEEgcGxhaW4gb2JqZWN0IG9yIHN0cmluZyB0aGF0IGlzIHNlbnQgdG8gdGhlIHNlcnZlciB3aXRoIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBzdWNjZXNzIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcy4gUmVxdWlyZWQgaWYgZGF0YVR5cGUgaXMgcHJvdmlkZWQsIGJ1dCBjYW4gYmUgbnVsbCBpbiB0aGF0IGNhc2UuXG4gICAgICogQHBhcmFtIGRhdGFUeXBlIFRoZSB0eXBlIG9mIGRhdGEgZXhwZWN0ZWQgZnJvbSB0aGUgc2VydmVyLiBEZWZhdWx0OiBJbnRlbGxpZ2VudCBHdWVzcyAoeG1sLCBqc29uLCBzY3JpcHQsIHRleHQsIGh0bWwpLlxuICAgICAqL1xuICAgIHBvc3QodXJsOiBzdHJpbmcsIGRhdGE/OiBPYmplY3R8c3RyaW5nLCBzdWNjZXNzPzogKGRhdGE6IGFueSwgdGV4dFN0YXR1czogc3RyaW5nLCBqcVhIUjogSlF1ZXJ5WEhSKSA9PiBhbnksIGRhdGFUeXBlPzogc3RyaW5nKTogSlF1ZXJ5WEhSO1xuXG4gICAgLyoqXG4gICAgICogQSBtdWx0aS1wdXJwb3NlIGNhbGxiYWNrcyBsaXN0IG9iamVjdCB0aGF0IHByb3ZpZGVzIGEgcG93ZXJmdWwgd2F5IHRvIG1hbmFnZSBjYWxsYmFjayBsaXN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmbGFncyBBbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBmbGFncyB0aGF0IGNoYW5nZSBob3cgdGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcy5cbiAgICAgKi9cbiAgICBDYWxsYmFja3MoZmxhZ3M/OiBzdHJpbmcpOiBKUXVlcnlDYWxsYmFjaztcblxuICAgIC8qKlxuICAgICAqIEhvbGRzIG9yIHJlbGVhc2VzIHRoZSBleGVjdXRpb24gb2YgalF1ZXJ5J3MgcmVhZHkgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaG9sZCBJbmRpY2F0ZXMgd2hldGhlciB0aGUgcmVhZHkgaG9sZCBpcyBiZWluZyByZXF1ZXN0ZWQgb3IgcmVsZWFzZWRcbiAgICAgKi9cbiAgICBob2xkUmVhZHkoaG9sZDogYm9vbGVhbik6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBDU1Mgc2VsZWN0b3Igd2hpY2ggaXMgdGhlbiB1c2VkIHRvIG1hdGNoIGEgc2V0IG9mIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uXG4gICAgICogQHBhcmFtIGNvbnRleHQgQSBET00gRWxlbWVudCwgRG9jdW1lbnQsIG9yIGpRdWVyeSB0byB1c2UgYXMgY29udGV4dFxuICAgICAqL1xuICAgIChzZWxlY3Rvcjogc3RyaW5nLCBjb250ZXh0PzogRWxlbWVudHxKUXVlcnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBhIHN0cmluZyBjb250YWluaW5nIGEgQ1NTIHNlbGVjdG9yIHdoaWNoIGlzIHRoZW4gdXNlZCB0byBtYXRjaCBhIHNldCBvZiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IEEgRE9NIGVsZW1lbnQgdG8gd3JhcCBpbiBhIGpRdWVyeSBvYmplY3QuXG4gICAgICovXG4gICAgKGVsZW1lbnQ6IEVsZW1lbnQpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBhIHN0cmluZyBjb250YWluaW5nIGEgQ1NTIHNlbGVjdG9yIHdoaWNoIGlzIHRoZW4gdXNlZCB0byBtYXRjaCBhIHNldCBvZiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50QXJyYXkgQW4gYXJyYXkgY29udGFpbmluZyBhIHNldCBvZiBET00gZWxlbWVudHMgdG8gd3JhcCBpbiBhIGpRdWVyeSBvYmplY3QuXG4gICAgICovXG4gICAgKGVsZW1lbnRBcnJheTogRWxlbWVudFtdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYSBzdHJpbmcgY29udGFpbmluZyBhIENTUyBzZWxlY3RvciB3aGljaCBpcyB0aGVuIHVzZWQgdG8gbWF0Y2ggYSBzZXQgb2YgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0IEEgcGxhaW4gb2JqZWN0IHRvIHdyYXAgaW4gYSBqUXVlcnkgb2JqZWN0LlxuICAgICAqL1xuICAgIChvYmplY3Q6IHt9KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYSBzdHJpbmcgY29udGFpbmluZyBhIENTUyBzZWxlY3RvciB3aGljaCBpcyB0aGVuIHVzZWQgdG8gbWF0Y2ggYSBzZXQgb2YgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0IEFuIGV4aXN0aW5nIGpRdWVyeSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICovXG4gICAgKG9iamVjdDogSlF1ZXJ5KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgYSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIERPTSBpcyBmdWxseSBsb2FkZWQuXG4gICAgICovXG4gICAgKCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgRE9NIGVsZW1lbnRzIG9uIHRoZSBmbHkgZnJvbSB0aGUgcHJvdmlkZWQgc3RyaW5nIG9mIHJhdyBIVE1MLlxuICAgICAqXG4gICAgICogQHBhcmFtIGh0bWwgQSBzdHJpbmcgb2YgSFRNTCB0byBjcmVhdGUgb24gdGhlIGZseS4gTm90ZSB0aGF0IHRoaXMgcGFyc2VzIEhUTUwsIG5vdCBYTUwuXG4gICAgICogQHBhcmFtIG93bmVyRG9jdW1lbnQgQSBkb2N1bWVudCBpbiB3aGljaCB0aGUgbmV3IGVsZW1lbnRzIHdpbGwgYmUgY3JlYXRlZC5cbiAgICAgKi9cbiAgICAoaHRtbDogc3RyaW5nLCBvd25lckRvY3VtZW50PzogRG9jdW1lbnQpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBET00gZWxlbWVudHMgb24gdGhlIGZseSBmcm9tIHRoZSBwcm92aWRlZCBzdHJpbmcgb2YgcmF3IEhUTUwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHRtbCBBIHN0cmluZyBkZWZpbmluZyBhIHNpbmdsZSwgc3RhbmRhbG9uZSwgSFRNTCBlbGVtZW50IChlLmcuIDxkaXYvPiBvciA8ZGl2PjwvZGl2PikuXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQW4gb2JqZWN0IG9mIGF0dHJpYnV0ZXMsIGV2ZW50cywgYW5kIG1ldGhvZHMgdG8gY2FsbCBvbiB0aGUgbmV3bHktY3JlYXRlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIChodG1sOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IE9iamVjdCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIGEgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgRE9NIGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhZnRlciB0aGUgRE9NIGlzIHJlYWR5LlxuICAgICAqL1xuICAgIChjYWxsYmFjazogRnVuY3Rpb24pOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZWxpbnF1aXNoIGpRdWVyeSdzIGNvbnRyb2wgb2YgdGhlICQgdmFyaWFibGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVtb3ZlQWxsIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBqUXVlcnkgdmFyaWFibGVzIGZyb20gdGhlIGdsb2JhbCBzY29wZSAoaW5jbHVkaW5nIGpRdWVyeSBpdHNlbGYpLlxuICAgICAqL1xuICAgIG5vQ29uZmxpY3QocmVtb3ZlQWxsPzogYm9vbGVhbik6IE9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgd2F5IHRvIGV4ZWN1dGUgY2FsbGJhY2sgZnVuY3Rpb25zIGJhc2VkIG9uIG9uZSBvciBtb3JlIG9iamVjdHMsIHVzdWFsbHkgRGVmZXJyZWQgb2JqZWN0cyB0aGF0IHJlcHJlc2VudCBhc3luY2hyb25vdXMgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlZmVycmVkcyBPbmUgb3IgbW9yZSBEZWZlcnJlZCBvYmplY3RzLCBvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gICAgICovXG4gICAgd2hlbjxUPiguLi5kZWZlcnJlZHM6IEpRdWVyeUdlbmVyaWNQcm9taXNlPFQ+W10pOiBKUXVlcnlQcm9taXNlPFQ+O1xuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgd2F5IHRvIGV4ZWN1dGUgY2FsbGJhY2sgZnVuY3Rpb25zIGJhc2VkIG9uIG9uZSBvciBtb3JlIG9iamVjdHMsIHVzdWFsbHkgRGVmZXJyZWQgb2JqZWN0cyB0aGF0IHJlcHJlc2VudCBhc3luY2hyb25vdXMgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlZmVycmVkcyBPbmUgb3IgbW9yZSBEZWZlcnJlZCBvYmplY3RzLCBvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gICAgICovXG4gICAgd2hlbjxUPiguLi5kZWZlcnJlZHM6IFRbXSk6IEpRdWVyeVByb21pc2U8VD47XG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYSB3YXkgdG8gZXhlY3V0ZSBjYWxsYmFjayBmdW5jdGlvbnMgYmFzZWQgb24gb25lIG9yIG1vcmUgb2JqZWN0cywgdXN1YWxseSBEZWZlcnJlZCBvYmplY3RzIHRoYXQgcmVwcmVzZW50IGFzeW5jaHJvbm91cyBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVmZXJyZWRzIE9uZSBvciBtb3JlIERlZmVycmVkIG9iamVjdHMsIG9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAgICAgKi9cbiAgICB3aGVuPFQ+KC4uLmRlZmVycmVkczogYW55W10pOiBKUXVlcnlQcm9taXNlPFQ+O1xuXG4gICAgLyoqXG4gICAgICogSG9vayBkaXJlY3RseSBpbnRvIGpRdWVyeSB0byBvdmVycmlkZSBob3cgcGFydGljdWxhciBDU1MgcHJvcGVydGllcyBhcmUgcmV0cmlldmVkIG9yIHNldCwgbm9ybWFsaXplIENTUyBwcm9wZXJ0eSBuYW1pbmcsIG9yIGNyZWF0ZSBjdXN0b20gcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBjc3NIb29rczogeyBba2V5OiBzdHJpbmddOiBhbnk7IH07XG4gICAgY3NzTnVtYmVyOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZSBhcmJpdHJhcnkgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCBlbGVtZW50LiBSZXR1cm5zIHRoZSB2YWx1ZSB0aGF0IHdhcyBzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgRE9NIGVsZW1lbnQgdG8gYXNzb2NpYXRlIHdpdGggdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIGtleSBBIHN0cmluZyBuYW1pbmcgdGhlIHBpZWNlIG9mIGRhdGEgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgbmV3IGRhdGEgdmFsdWUuXG4gICAgICovXG4gICAgZGF0YTxUPihlbGVtZW50OiBFbGVtZW50LCBrZXk6IHN0cmluZywgdmFsdWU6IFQpOiBUO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdmFsdWUgYXQgbmFtZWQgZGF0YSBzdG9yZSBmb3IgdGhlIGVsZW1lbnQsIGFzIHNldCBieSBqUXVlcnkuZGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSksIG9yIHRoZSBmdWxsIGRhdGEgc3RvcmUgZm9yIHRoZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSBrZXkgQSBzdHJpbmcgbmFtaW5nIHRoZSBwaWVjZSBvZiBkYXRhIHRvIHNldC5cbiAgICAgKi9cbiAgICBkYXRhKGVsZW1lbnQ6IEVsZW1lbnQsIGtleTogc3RyaW5nKTogYW55O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdmFsdWUgYXQgbmFtZWQgZGF0YSBzdG9yZSBmb3IgdGhlIGVsZW1lbnQsIGFzIHNldCBieSBqUXVlcnkuZGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSksIG9yIHRoZSBmdWxsIGRhdGEgc3RvcmUgZm9yIHRoZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIERPTSBlbGVtZW50IHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBkYXRhLlxuICAgICAqL1xuICAgIGRhdGEoZWxlbWVudDogRWxlbWVudCk6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIG5leHQgZnVuY3Rpb24gb24gdGhlIHF1ZXVlIGZvciB0aGUgbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgQSBET00gZWxlbWVudCBmcm9tIHdoaWNoIHRvIHJlbW92ZSBhbmQgZXhlY3V0ZSBhIHF1ZXVlZCBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gcXVldWVOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHF1ZXVlLiBEZWZhdWx0cyB0byBmeCwgdGhlIHN0YW5kYXJkIGVmZmVjdHMgcXVldWUuXG4gICAgICovXG4gICAgZGVxdWV1ZShlbGVtZW50OiBFbGVtZW50LCBxdWV1ZU5hbWU/OiBzdHJpbmcpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYW4gZWxlbWVudCBoYXMgYW55IGpRdWVyeSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IEEgRE9NIGVsZW1lbnQgdG8gYmUgY2hlY2tlZCBmb3IgZGF0YS5cbiAgICAgKi9cbiAgICBoYXNEYXRhKGVsZW1lbnQ6IEVsZW1lbnQpOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgcXVldWUgb2YgZnVuY3Rpb25zIHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBBIERPTSBlbGVtZW50IHRvIGluc3BlY3QgZm9yIGFuIGF0dGFjaGVkIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBxdWV1ZU5hbWUgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgcXVldWUuIERlZmF1bHRzIHRvIGZ4LCB0aGUgc3RhbmRhcmQgZWZmZWN0cyBxdWV1ZS5cbiAgICAgKi9cbiAgICBxdWV1ZShlbGVtZW50OiBFbGVtZW50LCBxdWV1ZU5hbWU/OiBzdHJpbmcpOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBNYW5pcHVsYXRlIHRoZSBxdWV1ZSBvZiBmdW5jdGlvbnMgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IEEgRE9NIGVsZW1lbnQgd2hlcmUgdGhlIGFycmF5IG9mIHF1ZXVlZCBmdW5jdGlvbnMgaXMgYXR0YWNoZWQuXG4gICAgICogQHBhcmFtIHF1ZXVlTmFtZSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gRGVmYXVsdHMgdG8gZngsIHRoZSBzdGFuZGFyZCBlZmZlY3RzIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBuZXdRdWV1ZSBBbiBhcnJheSBvZiBmdW5jdGlvbnMgdG8gcmVwbGFjZSB0aGUgY3VycmVudCBxdWV1ZSBjb250ZW50cy5cbiAgICAgKi9cbiAgICBxdWV1ZShlbGVtZW50OiBFbGVtZW50LCBxdWV1ZU5hbWU6IHN0cmluZywgbmV3UXVldWU6IEZ1bmN0aW9uW10pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogTWFuaXB1bGF0ZSB0aGUgcXVldWUgb2YgZnVuY3Rpb25zIHRvIGJlIGV4ZWN1dGVkIG9uIHRoZSBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBBIERPTSBlbGVtZW50IG9uIHdoaWNoIHRvIGFkZCBhIHF1ZXVlZCBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gcXVldWVOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHF1ZXVlLiBEZWZhdWx0cyB0byBmeCwgdGhlIHN0YW5kYXJkIGVmZmVjdHMgcXVldWUuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBuZXcgZnVuY3Rpb24gdG8gYWRkIHRvIHRoZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBxdWV1ZShlbGVtZW50OiBFbGVtZW50LCBxdWV1ZU5hbWU6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcHJldmlvdXNseS1zdG9yZWQgcGllY2Ugb2YgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IEEgRE9NIGVsZW1lbnQgZnJvbSB3aGljaCB0byByZW1vdmUgZGF0YS5cbiAgICAgKiBAcGFyYW0gbmFtZSBBIHN0cmluZyBuYW1pbmcgdGhlIHBpZWNlIG9mIGRhdGEgdG8gcmVtb3ZlLlxuICAgICAqL1xuICAgIHJlbW92ZURhdGEoZWxlbWVudDogRWxlbWVudCwgbmFtZT86IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY2hhaW5hYmxlIHV0aWxpdHkgb2JqZWN0IHdpdGggbWV0aG9kcyB0byByZWdpc3RlciBtdWx0aXBsZSBjYWxsYmFja3MgaW50byBjYWxsYmFjayBxdWV1ZXMsIGludm9rZSBjYWxsYmFjayBxdWV1ZXMsIGFuZCByZWxheSB0aGUgc3VjY2VzcyBvciBmYWlsdXJlIHN0YXRlIG9mIGFueSBzeW5jaHJvbm91cyBvciBhc3luY2hyb25vdXMgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmVmb3JlU3RhcnQgQSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCBqdXN0IGJlZm9yZSB0aGUgY29uc3RydWN0b3IgcmV0dXJucy5cbiAgICAgKi9cbiAgICBEZWZlcnJlZDxUPihiZWZvcmVTdGFydD86IChkZWZlcnJlZDogSlF1ZXJ5RGVmZXJyZWQ8VD4pID0+IGFueSk6IEpRdWVyeURlZmVycmVkPFQ+O1xuXG4gICAgLyoqXG4gICAgICogRWZmZWN0c1xuICAgICAqL1xuICAgIGZ4OiB7XG4gICAgICAgIHRpY2s6ICgpID0+IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmF0ZSAoaW4gbWlsbGlzZWNvbmRzKSBhdCB3aGljaCBhbmltYXRpb25zIGZpcmUuXG4gICAgICAgICAqL1xuICAgICAgICBpbnRlcnZhbDogbnVtYmVyO1xuICAgICAgICBzdG9wOiAoKSA9PiB2b2lkO1xuICAgICAgICBzcGVlZHM6IHsgc2xvdzogbnVtYmVyOyBmYXN0OiBudW1iZXI7IH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHbG9iYWxseSBkaXNhYmxlIGFsbCBhbmltYXRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgb2ZmOiBib29sZWFuO1xuICAgICAgICBzdGVwOiBhbnk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgZnVuY3Rpb24gYW5kIHJldHVybnMgYSBuZXcgb25lIHRoYXQgd2lsbCBhbHdheXMgaGF2ZSBhIHBhcnRpY3VsYXIgY29udGV4dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmbmN0aW9uIFRoZSBmdW5jdGlvbiB3aG9zZSBjb250ZXh0IHdpbGwgYmUgY2hhbmdlZC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCBUaGUgb2JqZWN0IHRvIHdoaWNoIHRoZSBjb250ZXh0ICh0aGlzKSBvZiB0aGUgZnVuY3Rpb24gc2hvdWxkIGJlIHNldC5cbiAgICAgKiBAcGFyYW0gYWRkaXRpb25hbEFyZ3VtZW50cyBBbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uIHJlZmVyZW5jZWQgaW4gdGhlIGZ1bmN0aW9uIGFyZ3VtZW50LlxuICAgICAqL1xuICAgIHByb3h5KGZuY3Rpb246ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55LCBjb250ZXh0OiBPYmplY3QsIC4uLmFkZGl0aW9uYWxBcmd1bWVudHM6IGFueVtdKTogYW55O1xuICAgIC8qKlxuICAgICAqIFRha2VzIGEgZnVuY3Rpb24gYW5kIHJldHVybnMgYSBuZXcgb25lIHRoYXQgd2lsbCBhbHdheXMgaGF2ZSBhIHBhcnRpY3VsYXIgY29udGV4dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZXh0IFRoZSBvYmplY3QgdG8gd2hpY2ggdGhlIGNvbnRleHQgKHRoaXMpIG9mIHRoZSBmdW5jdGlvbiBzaG91bGQgYmUgc2V0LlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB3aG9zZSBjb250ZXh0IHdpbGwgYmUgY2hhbmdlZCAoc2hvdWxkIGJlIGEgcHJvcGVydHkgb2YgdGhlIGNvbnRleHQgb2JqZWN0KS5cbiAgICAgKiBAcGFyYW0gYWRkaXRpb25hbEFyZ3VtZW50cyBBbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uIG5hbWVkIGluIHRoZSBuYW1lIGFyZ3VtZW50LlxuICAgICAqL1xuICAgIHByb3h5KGNvbnRleHQ6IE9iamVjdCwgbmFtZTogc3RyaW5nLCAuLi5hZGRpdGlvbmFsQXJndW1lbnRzOiBhbnlbXSk6IGFueTtcblxuICAgIEV2ZW50OiBKUXVlcnlFdmVudENvbnN0cnVjdG9yO1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBzdHJpbmcgYW5kIHRocm93cyBhbiBleGNlcHRpb24gY29udGFpbmluZyBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHNlbmQgb3V0LlxuICAgICAqL1xuICAgIGVycm9yKG1lc3NhZ2U6IGFueSk6IEpRdWVyeTtcblxuICAgIGV4cHI6IGFueTtcbiAgICBmbjogYW55OyAgLy9UT0RPOiBEZWNpZGUgaG93IHdlIHdhbnQgdG8gdHlwZSB0aGlzXG5cbiAgICBpc1JlYWR5OiBib29sZWFuO1xuXG4gICAgLy8gUHJvcGVydGllc1xuICAgIHN1cHBvcnQ6IEpRdWVyeVN1cHBvcnQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0byBzZWUgaWYgYSBET00gZWxlbWVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYW5vdGhlciBET00gZWxlbWVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyIFRoZSBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluIHRoZSBvdGhlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBjb250YWluZWQgVGhlIERPTSBlbGVtZW50IHRoYXQgbWF5IGJlIGNvbnRhaW5lZCBieSAoYSBkZXNjZW5kYW50IG9mKSB0aGUgb3RoZXIgZWxlbWVudC5cbiAgICAgKi9cbiAgICBjb250YWlucyhjb250YWluZXI6IEVsZW1lbnQsIGNvbnRhaW5lZDogRWxlbWVudCk6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBIGdlbmVyaWMgaXRlcmF0b3IgZnVuY3Rpb24sIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHNlYW1sZXNzbHkgaXRlcmF0ZSBvdmVyIGJvdGggb2JqZWN0cyBhbmQgYXJyYXlzLiBBcnJheXMgYW5kIGFycmF5LWxpa2Ugb2JqZWN0cyB3aXRoIGEgbGVuZ3RoIHByb3BlcnR5IChzdWNoIGFzIGEgZnVuY3Rpb24ncyBhcmd1bWVudHMgb2JqZWN0KSBhcmUgaXRlcmF0ZWQgYnkgbnVtZXJpYyBpbmRleCwgZnJvbSAwIHRvIGxlbmd0aC0xLiBPdGhlciBvYmplY3RzIGFyZSBpdGVyYXRlZCB2aWEgdGhlaXIgbmFtZWQgcHJvcGVydGllcy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbiBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBvbiBldmVyeSBvYmplY3QuXG4gICAgICovXG4gICAgZWFjaDxUPihcbiAgICAgICAgY29sbGVjdGlvbjogVFtdLFxuICAgICAgICBjYWxsYmFjazogKGluZGV4SW5BcnJheTogbnVtYmVyLCB2YWx1ZU9mRWxlbWVudDogVCkgPT4gYW55XG4gICAgICAgICk6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEEgZ2VuZXJpYyBpdGVyYXRvciBmdW5jdGlvbiwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gc2VhbWxlc3NseSBpdGVyYXRlIG92ZXIgYm90aCBvYmplY3RzIGFuZCBhcnJheXMuIEFycmF5cyBhbmQgYXJyYXktbGlrZSBvYmplY3RzIHdpdGggYSBsZW5ndGggcHJvcGVydHkgKHN1Y2ggYXMgYSBmdW5jdGlvbidzIGFyZ3VtZW50cyBvYmplY3QpIGFyZSBpdGVyYXRlZCBieSBudW1lcmljIGluZGV4LCBmcm9tIDAgdG8gbGVuZ3RoLTEuIE90aGVyIG9iamVjdHMgYXJlIGl0ZXJhdGVkIHZpYSB0aGVpciBuYW1lZCBwcm9wZXJ0aWVzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIG9uIGV2ZXJ5IG9iamVjdC5cbiAgICAgKi9cbiAgICBlYWNoKFxuICAgICAgICBjb2xsZWN0aW9uOiBhbnksXG4gICAgICAgIGNhbGxiYWNrOiAoaW5kZXhJbkFycmF5OiBhbnksIHZhbHVlT2ZFbGVtZW50OiBhbnkpID0+IGFueVxuICAgICAgICApOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSB0aGUgY29udGVudHMgb2YgdHdvIG9yIG1vcmUgb2JqZWN0cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IEFuIG9iamVjdCB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgbmV3IHByb3BlcnRpZXMgaWYgYWRkaXRpb25hbCBvYmplY3RzIGFyZSBwYXNzZWQgaW4gb3IgdGhhdCB3aWxsIGV4dGVuZCB0aGUgalF1ZXJ5IG5hbWVzcGFjZSBpZiBpdCBpcyB0aGUgc29sZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0gb2JqZWN0MSBBbiBvYmplY3QgY29udGFpbmluZyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4uXG4gICAgICogQHBhcmFtIG9iamVjdE4gQWRkaXRpb25hbCBvYmplY3RzIGNvbnRhaW5pbmcgcHJvcGVydGllcyB0byBtZXJnZSBpbi5cbiAgICAgKi9cbiAgICBleHRlbmQodGFyZ2V0OiBhbnksIG9iamVjdDE/OiBhbnksIC4uLm9iamVjdE46IGFueVtdKTogYW55O1xuICAgIC8qKlxuICAgICAqIE1lcmdlIHRoZSBjb250ZW50cyBvZiB0d28gb3IgbW9yZSBvYmplY3RzIHRvZ2V0aGVyIGludG8gdGhlIGZpcnN0IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWVwIElmIHRydWUsIHRoZSBtZXJnZSBiZWNvbWVzIHJlY3Vyc2l2ZSAoYWthLiBkZWVwIGNvcHkpLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIG9iamVjdCB0byBleHRlbmQuIEl0IHdpbGwgcmVjZWl2ZSB0aGUgbmV3IHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIG9iamVjdDEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIG1lcmdlIGluLlxuICAgICAqIEBwYXJhbSBvYmplY3ROIEFkZGl0aW9uYWwgb2JqZWN0cyBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4uXG4gICAgICovXG4gICAgZXh0ZW5kKGRlZXA6IGJvb2xlYW4sIHRhcmdldDogYW55LCBvYmplY3QxPzogYW55LCAuLi5vYmplY3ROOiBhbnlbXSk6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgc29tZSBKYXZhU2NyaXB0IGNvZGUgZ2xvYmFsbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29kZSBUaGUgSmF2YVNjcmlwdCBjb2RlIHRvIGV4ZWN1dGUuXG4gICAgICovXG4gICAgZ2xvYmFsRXZhbChjb2RlOiBzdHJpbmcpOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgZWxlbWVudHMgb2YgYW4gYXJyYXkgd2hpY2ggc2F0aXNmeSBhIGZpbHRlciBmdW5jdGlvbi4gVGhlIG9yaWdpbmFsIGFycmF5IGlzIG5vdCBhZmZlY3RlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoIHRocm91Z2guXG4gICAgICogQHBhcmFtIGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHByb2Nlc3MgZWFjaCBpdGVtIGFnYWluc3QuIFRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZnVuY3Rpb24gaXMgdGhlIGl0ZW0sIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIHRoZSBpbmRleC4gVGhlIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBCb29sZWFuIHZhbHVlLiAgdGhpcyB3aWxsIGJlIHRoZSBnbG9iYWwgd2luZG93IG9iamVjdC5cbiAgICAgKiBAcGFyYW0gaW52ZXJ0IElmIFwiaW52ZXJ0XCIgaXMgZmFsc2UsIG9yIG5vdCBwcm92aWRlZCwgdGhlbiB0aGUgZnVuY3Rpb24gcmV0dXJucyBhbiBhcnJheSBjb25zaXN0aW5nIG9mIGFsbCBlbGVtZW50cyBmb3Igd2hpY2ggXCJjYWxsYmFja1wiIHJldHVybnMgdHJ1ZS4gSWYgXCJpbnZlcnRcIiBpcyB0cnVlLCB0aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zIGFuIGFycmF5IGNvbnNpc3Rpbmcgb2YgYWxsIGVsZW1lbnRzIGZvciB3aGljaCBcImNhbGxiYWNrXCIgcmV0dXJucyBmYWxzZS5cbiAgICAgKi9cbiAgICBncmVwPFQ+KGFycmF5OiBUW10sIGZ1bmM6IChlbGVtZW50T2ZBcnJheTogVCwgaW5kZXhJbkFycmF5OiBudW1iZXIpID0+IGJvb2xlYW4sIGludmVydD86IGJvb2xlYW4pOiBUW107XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggZm9yIGEgc3BlY2lmaWVkIHZhbHVlIHdpdGhpbiBhbiBhcnJheSBhbmQgcmV0dXJuIGl0cyBpbmRleCAob3IgLTEgaWYgbm90IGZvdW5kKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0gYXJyYXkgQW4gYXJyYXkgdGhyb3VnaCB3aGljaCB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIGZyb21JbmRleCBoZSBpbmRleCBvZiB0aGUgYXJyYXkgYXQgd2hpY2ggdG8gYmVnaW4gdGhlIHNlYXJjaC4gVGhlIGRlZmF1bHQgaXMgMCwgd2hpY2ggd2lsbCBzZWFyY2ggdGhlIHdob2xlIGFycmF5LlxuICAgICAqL1xuICAgIGluQXJyYXk8VD4odmFsdWU6IFQsIGFycmF5OiBUW10sIGZyb21JbmRleD86IG51bWJlcik6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSB3aGV0aGVyIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIHRlc3Qgd2hldGhlciBvciBub3QgaXQgaXMgYW4gYXJyYXkuXG4gICAgICovXG4gICAgaXNBcnJheShvYmo6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdG8gc2VlIGlmIGFuIG9iamVjdCBpcyBlbXB0eSAoY29udGFpbnMgbm8gZW51bWVyYWJsZSBwcm9wZXJ0aWVzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmogVGhlIG9iamVjdCB0aGF0IHdpbGwgYmUgY2hlY2tlZCB0byBzZWUgaWYgaXQncyBlbXB0eS5cbiAgICAgKi9cbiAgICBpc0VtcHR5T2JqZWN0KG9iajogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIGFyZ3VtZW50IHBhc3NlZCBpcyBhIEphdmFzY3JpcHQgZnVuY3Rpb24gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9iaiBPYmplY3QgdG8gdGVzdCB3aGV0aGVyIG9yIG5vdCBpdCBpcyBhIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGlzRnVuY3Rpb24ob2JqOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciBpdHMgYXJndW1lbnQgaXMgYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqIFRoZSB2YWx1ZSB0byBiZSB0ZXN0ZWQuXG4gICAgICovXG4gICAgaXNOdW1lcmljKHZhbHVlOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRvIHNlZSBpZiBhbiBvYmplY3QgaXMgYSBwbGFpbiBvYmplY3QgKGNyZWF0ZWQgdXNpbmcgXCJ7fVwiIG9yIFwibmV3IE9iamVjdFwiKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmogVGhlIG9iamVjdCB0aGF0IHdpbGwgYmUgY2hlY2tlZCB0byBzZWUgaWYgaXQncyBhIHBsYWluIG9iamVjdC5cbiAgICAgKi9cbiAgICBpc1BsYWluT2JqZWN0KG9iajogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgYXJndW1lbnQgaXMgYSB3aW5kb3cuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqIE9iamVjdCB0byB0ZXN0IHdoZXRoZXIgb3Igbm90IGl0IGlzIGEgd2luZG93LlxuICAgICAqL1xuICAgIGlzV2luZG93KG9iajogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDaGVjayB0byBzZWUgaWYgYSBET00gbm9kZSBpcyB3aXRoaW4gYW4gWE1MIGRvY3VtZW50IChvciBpcyBhbiBYTUwgZG9jdW1lbnQpLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGUgaGUgRE9NIG5vZGUgdGhhdCB3aWxsIGJlIGNoZWNrZWQgdG8gc2VlIGlmIGl0J3MgaW4gYW4gWE1MIGRvY3VtZW50LlxuICAgICAqL1xuICAgIGlzWE1MRG9jKG5vZGU6IE5vZGUpOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCBpbnRvIGEgdHJ1ZSBKYXZhU2NyaXB0IGFycmF5LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQW55IG9iamVjdCB0byB0dXJuIGludG8gYSBuYXRpdmUgQXJyYXkuXG4gICAgICovXG4gICAgbWFrZUFycmF5KG9iajogYW55KTogYW55W107XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgYWxsIGl0ZW1zIGluIGFuIGFycmF5IG9yIG9iamVjdCB0byBuZXcgYXJyYXkgb2YgaXRlbXMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGFycmF5IFRoZSBBcnJheSB0byB0cmFuc2xhdGUuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzIGVhY2ggaXRlbSBhZ2FpbnN0LiBUaGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZ1bmN0aW9uIGlzIHRoZSBhcnJheSBpdGVtLCB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIHRoZSBpbmRleCBpbiBhcnJheSBUaGUgZnVuY3Rpb24gY2FuIHJldHVybiBhbnkgdmFsdWUuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBnbG9iYWwgKHdpbmRvdykgb2JqZWN0LlxuICAgICAqL1xuICAgIG1hcDxULCBVPihhcnJheTogVFtdLCBjYWxsYmFjazogKGVsZW1lbnRPZkFycmF5OiBULCBpbmRleEluQXJyYXk6IG51bWJlcikgPT4gVSk6IFVbXTtcbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgYWxsIGl0ZW1zIGluIGFuIGFycmF5IG9yIG9iamVjdCB0byBuZXcgYXJyYXkgb2YgaXRlbXMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGFycmF5T3JPYmplY3QgVGhlIEFycmF5IG9yIE9iamVjdCB0byB0cmFuc2xhdGUuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzIGVhY2ggaXRlbSBhZ2FpbnN0LiBUaGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZ1bmN0aW9uIGlzIHRoZSB2YWx1ZTsgdGhlIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgaW5kZXggb3Iga2V5IG9mIHRoZSBhcnJheSBvciBvYmplY3QgcHJvcGVydHkuIFRoZSBmdW5jdGlvbiBjYW4gcmV0dXJuIGFueSB2YWx1ZSB0byBhZGQgdG8gdGhlIGFycmF5LiBBIHJldHVybmVkIGFycmF5IHdpbGwgYmUgZmxhdHRlbmVkIGludG8gdGhlIHJlc3VsdGluZyBhcnJheS4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGdsb2JhbCAod2luZG93KSBvYmplY3QuXG4gICAgICovXG4gICAgbWFwKGFycmF5T3JPYmplY3Q6IGFueSwgY2FsbGJhY2s6ICh2YWx1ZTogYW55LCBpbmRleE9yS2V5OiBhbnkpID0+IGFueSk6IGFueTtcblxuICAgIC8qKlxuICAgICAqIE1lcmdlIHRoZSBjb250ZW50cyBvZiB0d28gYXJyYXlzIHRvZ2V0aGVyIGludG8gdGhlIGZpcnN0IGFycmF5LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmaXJzdCBUaGUgZmlyc3QgYXJyYXkgdG8gbWVyZ2UsIHRoZSBlbGVtZW50cyBvZiBzZWNvbmQgYWRkZWQuXG4gICAgICogQHBhcmFtIHNlY29uZCBUaGUgc2Vjb25kIGFycmF5IHRvIG1lcmdlIGludG8gdGhlIGZpcnN0LCB1bmFsdGVyZWQuXG4gICAgICovXG4gICAgbWVyZ2U8VD4oZmlyc3Q6IFRbXSwgc2Vjb25kOiBUW10pOiBUW107XG5cbiAgICAvKipcbiAgICAgKiBBbiBlbXB0eSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBub29wKCk6IGFueTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgdGltZS5cbiAgICAgKi9cbiAgICBub3coKTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSB3ZWxsLWZvcm1lZCBKU09OIHN0cmluZyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0aW5nIEphdmFTY3JpcHQgb2JqZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBqc29uIFRoZSBKU09OIHN0cmluZyB0byBwYXJzZS5cbiAgICAgKi9cbiAgICBwYXJzZUpTT04oanNvbjogc3RyaW5nKTogYW55O1xuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgc3RyaW5nIGludG8gYW4gWE1MIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgYSB3ZWxsLWZvcm1lZCBYTUwgc3RyaW5nIHRvIGJlIHBhcnNlZFxuICAgICAqL1xuICAgIHBhcnNlWE1MKGRhdGE6IHN0cmluZyk6IFhNTERvY3VtZW50O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSB3aGl0ZXNwYWNlIGZyb20gdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzdHIgUmVtb3ZlIHRoZSB3aGl0ZXNwYWNlIGZyb20gdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nLlxuICAgICAqL1xuICAgIHRyaW0oc3RyOiBzdHJpbmcpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgdGhlIGludGVybmFsIEphdmFTY3JpcHQgW1tDbGFzc11dIG9mIGFuIG9iamVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIE9iamVjdCB0byBnZXQgdGhlIGludGVybmFsIEphdmFTY3JpcHQgW1tDbGFzc11dIG9mLlxuICAgICAqL1xuICAgIHR5cGUob2JqOiBhbnkpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBTb3J0cyBhbiBhcnJheSBvZiBET00gZWxlbWVudHMsIGluIHBsYWNlLCB3aXRoIHRoZSBkdXBsaWNhdGVzIHJlbW92ZWQuIE5vdGUgdGhhdCB0aGlzIG9ubHkgd29ya3Mgb24gYXJyYXlzIG9mIERPTSBlbGVtZW50cywgbm90IHN0cmluZ3Mgb3IgbnVtYmVycy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gYXJyYXkgVGhlIEFycmF5IG9mIERPTSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICB1bmlxdWUoYXJyYXk6IEVsZW1lbnRbXSk6IEVsZW1lbnRbXTtcblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIERPTSBub2Rlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIEhUTUwgc3RyaW5nIHRvIGJlIHBhcnNlZFxuICAgICAqIEBwYXJhbSBjb250ZXh0IERPTSBlbGVtZW50IHRvIHNlcnZlIGFzIHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBIVE1MIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIEBwYXJhbSBrZWVwU2NyaXB0cyBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIEhUTUwgc3RyaW5nXG4gICAgICovXG4gICAgcGFyc2VIVE1MKGRhdGE6IHN0cmluZywgY29udGV4dD86IEhUTUxFbGVtZW50LCBrZWVwU2NyaXB0cz86IGJvb2xlYW4pOiBhbnlbXTtcblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIERPTSBub2Rlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIEhUTUwgc3RyaW5nIHRvIGJlIHBhcnNlZFxuICAgICAqIEBwYXJhbSBjb250ZXh0IERPTSBlbGVtZW50IHRvIHNlcnZlIGFzIHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBIVE1MIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIEBwYXJhbSBrZWVwU2NyaXB0cyBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIEhUTUwgc3RyaW5nXG4gICAgICovXG4gICAgcGFyc2VIVE1MKGRhdGE6IHN0cmluZywgY29udGV4dD86IERvY3VtZW50LCBrZWVwU2NyaXB0cz86IGJvb2xlYW4pOiBhbnlbXTtcbn1cblxuLyoqXG4gKiBUaGUgalF1ZXJ5IGluc3RhbmNlIG1lbWJlcnNcbiAqL1xuaW50ZXJmYWNlIEpRdWVyeSB7XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBoYW5kbGVyIHRvIGJlIGNhbGxlZCB3aGVuIEFqYXggcmVxdWVzdHMgY29tcGxldGUuIFRoaXMgaXMgYW4gQWpheEV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQuXG4gICAgICovXG4gICAgYWpheENvbXBsZXRlKGhhbmRsZXI6IChldmVudDogSlF1ZXJ5RXZlbnRPYmplY3QsIFhNTEh0dHBSZXF1ZXN0OiBYTUxIdHRwUmVxdWVzdCwgYWpheE9wdGlvbnM6IGFueSkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgaGFuZGxlciB0byBiZSBjYWxsZWQgd2hlbiBBamF4IHJlcXVlc3RzIGNvbXBsZXRlIHdpdGggYW4gZXJyb3IuIFRoaXMgaXMgYW4gQWpheCBFdmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkLlxuICAgICAqL1xuICAgIGFqYXhFcnJvcihoYW5kbGVyOiAoZXZlbnQ6IEpRdWVyeUV2ZW50T2JqZWN0LCBqcVhIUjogSlF1ZXJ5WEhSLCBhamF4U2V0dGluZ3M6IEpRdWVyeUFqYXhTZXR0aW5ncywgdGhyb3duRXJyb3I6IGFueSkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGJlZm9yZSBhbiBBamF4IHJlcXVlc3QgaXMgc2VudC4gVGhpcyBpcyBhbiBBamF4IEV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQuXG4gICAgICovXG4gICAgYWpheFNlbmQoaGFuZGxlcjogKGV2ZW50OiBKUXVlcnlFdmVudE9iamVjdCwganFYSFI6IEpRdWVyeVhIUiwgYWpheE9wdGlvbnM6IEpRdWVyeUFqYXhTZXR0aW5ncykgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgaGFuZGxlciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZmlyc3QgQWpheCByZXF1ZXN0IGJlZ2lucy4gVGhpcyBpcyBhbiBBamF4IEV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQuXG4gICAgICovXG4gICAgYWpheFN0YXJ0KGhhbmRsZXI6ICgpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGhhbmRsZXIgdG8gYmUgY2FsbGVkIHdoZW4gYWxsIEFqYXggcmVxdWVzdHMgaGF2ZSBjb21wbGV0ZWQuIFRoaXMgaXMgYW4gQWpheCBFdmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkLlxuICAgICAqL1xuICAgIGFqYXhTdG9wKGhhbmRsZXI6ICgpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCB3aGVuZXZlciBhbiBBamF4IHJlcXVlc3QgY29tcGxldGVzIHN1Y2Nlc3NmdWxseS4gVGhpcyBpcyBhbiBBamF4IEV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQuXG4gICAgICovXG4gICAgYWpheFN1Y2Nlc3MoaGFuZGxlcjogKGV2ZW50OiBKUXVlcnlFdmVudE9iamVjdCwgWE1MSHR0cFJlcXVlc3Q6IFhNTEh0dHBSZXF1ZXN0LCBhamF4T3B0aW9uczogSlF1ZXJ5QWpheFNldHRpbmdzKSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBMb2FkIGRhdGEgZnJvbSB0aGUgc2VydmVyIGFuZCBwbGFjZSB0aGUgcmV0dXJuZWQgSFRNTCBpbnRvIHRoZSBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFVSTCB0byB3aGljaCB0aGUgcmVxdWVzdCBpcyBzZW50LlxuICAgICAqIEBwYXJhbSBkYXRhIEEgcGxhaW4gb2JqZWN0IG9yIHN0cmluZyB0aGF0IGlzIHNlbnQgdG8gdGhlIHNlcnZlciB3aXRoIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAgICovXG4gICAgbG9hZCh1cmw6IHN0cmluZywgZGF0YT86IHN0cmluZ3xPYmplY3QsIGNvbXBsZXRlPzogKHJlc3BvbnNlVGV4dDogc3RyaW5nLCB0ZXh0U3RhdHVzOiBzdHJpbmcsIFhNTEh0dHBSZXF1ZXN0OiBYTUxIdHRwUmVxdWVzdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlIGEgc2V0IG9mIGZvcm0gZWxlbWVudHMgYXMgYSBzdHJpbmcgZm9yIHN1Ym1pc3Npb24uXG4gICAgICovXG4gICAgc2VyaWFsaXplKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYSBzZXQgb2YgZm9ybSBlbGVtZW50cyBhcyBhbiBhcnJheSBvZiBuYW1lcyBhbmQgdmFsdWVzLlxuICAgICAqL1xuICAgIHNlcmlhbGl6ZUFycmF5KCk6IEpRdWVyeVNlcmlhbGl6ZUFycmF5RWxlbWVudFtdO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgc3BlY2lmaWVkIGNsYXNzKGVzKSB0byBlYWNoIG9mIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjbGFzc05hbWUgT25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvZiBlYWNoIG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKi9cbiAgICBhZGRDbGFzcyhjbGFzc05hbWU6IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBzcGVjaWZpZWQgY2xhc3MoZXMpIHRvIGVhY2ggb2YgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmN0aW9uIEEgZnVuY3Rpb24gcmV0dXJuaW5nIG9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBjbGFzcyBuYW1lcyB0byBiZSBhZGRlZCB0byB0aGUgZXhpc3RpbmcgY2xhc3MgbmFtZShzKS4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYW5kIHRoZSBleGlzdGluZyBjbGFzcyBuYW1lKHMpIGFzIGFyZ3VtZW50cy4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgc2V0LlxuICAgICAqL1xuICAgIGFkZENsYXNzKGZ1bmM6IChpbmRleDogbnVtYmVyLCBjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBwcmV2aW91cyBzZXQgb2YgZWxlbWVudHMgb24gdGhlIHN0YWNrIHRvIHRoZSBjdXJyZW50IHNldCwgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBhIHNlbGVjdG9yLlxuICAgICAqL1xuICAgIGFkZEJhY2soc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZU5hbWUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBnZXQuXG4gICAgICovXG4gICAgYXR0cihhdHRyaWJ1dGVOYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0IG9uZSBvciBtb3JlIGF0dHJpYnV0ZXMgZm9yIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVOYW1lIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBIHZhbHVlIHRvIHNldCBmb3IgdGhlIGF0dHJpYnV0ZS5cbiAgICAgKi9cbiAgICBhdHRyKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZ3xudW1iZXIpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU2V0IG9uZSBvciBtb3JlIGF0dHJpYnV0ZXMgZm9yIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVOYW1lIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSB2YWx1ZSB0byBzZXQuIHRoaXMgaXMgdGhlIGN1cnJlbnQgZWxlbWVudC4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYW5kIHRoZSBvbGQgYXR0cmlidXRlIHZhbHVlIGFzIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBhdHRyKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgZnVuYzogKGluZGV4OiBudW1iZXIsIGF0dHI6IHN0cmluZykgPT4gc3RyaW5nfG51bWJlcik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgb25lIG9yIG1vcmUgYXR0cmlidXRlcyBmb3IgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQW4gb2JqZWN0IG9mIGF0dHJpYnV0ZS12YWx1ZSBwYWlycyB0byBzZXQuXG4gICAgICovXG4gICAgYXR0cihhdHRyaWJ1dGVzOiBPYmplY3QpOiBKUXVlcnk7XG4gICAgXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYW55IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnRzIGFyZSBhc3NpZ25lZCB0aGUgZ2l2ZW4gY2xhc3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2xhc3NOYW1lIFRoZSBjbGFzcyBuYW1lIHRvIHNlYXJjaCBmb3IuXG4gICAgICovXG4gICAgaGFzQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBIVE1MIGNvbnRlbnRzIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBodG1sKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIEhUTUwgY29udGVudHMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBodG1sU3RyaW5nIEEgc3RyaW5nIG9mIEhUTUwgdG8gc2V0IGFzIHRoZSBjb250ZW50IG9mIGVhY2ggbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIGh0bWwoaHRtbFN0cmluZzogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgSFRNTCBjb250ZW50cyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIEhUTUwgY29udGVudCB0byBzZXQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIEhUTUwgdmFsdWUgYXMgYXJndW1lbnRzLiBqUXVlcnkgZW1wdGllcyB0aGUgZWxlbWVudCBiZWZvcmUgY2FsbGluZyB0aGUgZnVuY3Rpb247IHVzZSB0aGUgb2xkaHRtbCBhcmd1bWVudCB0byByZWZlcmVuY2UgdGhlIHByZXZpb3VzIGNvbnRlbnQuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICBodG1sKGZ1bmM6IChpbmRleDogbnVtYmVyLCBvbGRodG1sOiBzdHJpbmcpID0+IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIEhUTUwgY29udGVudHMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBIVE1MIGNvbnRlbnQgdG8gc2V0LiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhbmQgdGhlIG9sZCBIVE1MIHZhbHVlIGFzIGFyZ3VtZW50cy4galF1ZXJ5IGVtcHRpZXMgdGhlIGVsZW1lbnQgYmVmb3JlIGNhbGxpbmcgdGhlIGZ1bmN0aW9uOyB1c2UgdGhlIG9sZGh0bWwgYXJndW1lbnQgdG8gcmVmZXJlbmNlIHRoZSBwcmV2aW91cyBjb250ZW50LiBXaXRoaW4gdGhlIGZ1bmN0aW9uLCB0aGlzIHJlZmVycyB0byB0aGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBzZXQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKi9cbiAgICBwcm9wKHByb3BlcnR5TmFtZTogc3RyaW5nKTogYW55O1xuICAgIC8qKlxuICAgICAqIFNldCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzIGZvciB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHZhbHVlIEEgdmFsdWUgdG8gc2V0IGZvciB0aGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgcHJvcChwcm9wZXJ0eU5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZ3xudW1iZXJ8Ym9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgb25lIG9yIG1vcmUgcHJvcGVydGllcyBmb3IgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3BlcnRpZXMgQW4gb2JqZWN0IG9mIHByb3BlcnR5LXZhbHVlIHBhaXJzIHRvIHNldC5cbiAgICAgKi9cbiAgICBwcm9wKHByb3BlcnRpZXM6IE9iamVjdCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgb25lIG9yIG1vcmUgcHJvcGVydGllcyBmb3IgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSB2YWx1ZSB0byBzZXQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIHByb3BlcnR5IHZhbHVlIGFzIGFyZ3VtZW50cy4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhlIGtleXdvcmQgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudC5cbiAgICAgKi9cbiAgICBwcm9wKHByb3BlcnR5TmFtZTogc3RyaW5nLCBmdW5jOiAoaW5kZXg6IG51bWJlciwgb2xkUHJvcGVydHlWYWx1ZTogYW55KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gYXR0cmlidXRlIGZyb20gZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVOYW1lIEFuIGF0dHJpYnV0ZSB0byByZW1vdmU7IGFzIG9mIHZlcnNpb24gMS43LCBpdCBjYW4gYmUgYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzLlxuICAgICAqL1xuICAgIHJlbW92ZUF0dHIoYXR0cmlidXRlTmFtZTogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgc2luZ2xlIGNsYXNzLCBtdWx0aXBsZSBjbGFzc2VzLCBvciBhbGwgY2xhc3NlcyBmcm9tIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2xhc3NOYW1lIE9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBjbGFzc2VzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIGVhY2ggbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIHJlbW92ZUNsYXNzKGNsYXNzTmFtZT86IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBzaW5nbGUgY2xhc3MsIG11bHRpcGxlIGNsYXNzZXMsIG9yIGFsbCBjbGFzc2VzIGZyb20gZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmdW5jdGlvbiBBIGZ1bmN0aW9uIHJldHVybmluZyBvbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgY2xhc3MgbmFtZXMgdG8gYmUgcmVtb3ZlZC4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYW5kIHRoZSBvbGQgY2xhc3MgdmFsdWUgYXMgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIHJlbW92ZUNsYXNzKGZ1bmM6IChpbmRleDogbnVtYmVyLCBjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcHJvcGVydHkgZm9yIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmVQcm9wKHByb3BlcnR5TmFtZTogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQWRkIG9yIHJlbW92ZSBvbmUgb3IgbW9yZSBjbGFzc2VzIGZyb20gZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgZGVwZW5kaW5nIG9uIGVpdGhlciB0aGUgY2xhc3MncyBwcmVzZW5jZSBvciB0aGUgdmFsdWUgb2YgdGhlIHN3aXRjaCBhcmd1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjbGFzc05hbWUgT25lIG9yIG1vcmUgY2xhc3MgbmFtZXMgKHNlcGFyYXRlZCBieSBzcGFjZXMpIHRvIGJlIHRvZ2dsZWQgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG4gICAgICogQHBhcmFtIHN3dGNoIEEgQm9vbGVhbiAobm90IGp1c3QgdHJ1dGh5L2ZhbHN5KSB2YWx1ZSB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgY2xhc3Mgc2hvdWxkIGJlIGFkZGVkIG9yIHJlbW92ZWQuXG4gICAgICovXG4gICAgdG9nZ2xlQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcsIHN3dGNoPzogYm9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBZGQgb3IgcmVtb3ZlIG9uZSBvciBtb3JlIGNsYXNzZXMgZnJvbSBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBkZXBlbmRpbmcgb24gZWl0aGVyIHRoZSBjbGFzcydzIHByZXNlbmNlIG9yIHRoZSB2YWx1ZSBvZiB0aGUgc3dpdGNoIGFyZ3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHN3dGNoIEEgYm9vbGVhbiB2YWx1ZSB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgY2xhc3Mgc2hvdWxkIGJlIGFkZGVkIG9yIHJlbW92ZWQuXG4gICAgICovXG4gICAgdG9nZ2xlQ2xhc3Moc3d0Y2g/OiBib29sZWFuKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEFkZCBvciByZW1vdmUgb25lIG9yIG1vcmUgY2xhc3NlcyBmcm9tIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGRlcGVuZGluZyBvbiBlaXRoZXIgdGhlIGNsYXNzJ3MgcHJlc2VuY2Ugb3IgdGhlIHZhbHVlIG9mIHRoZSBzd2l0Y2ggYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBjbGFzcyBuYW1lcyB0byBiZSB0b2dnbGVkIGluIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQsIHRoZSBvbGQgY2xhc3MgdmFsdWUsIGFuZCB0aGUgc3dpdGNoIGFzIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0gc3d0Y2ggQSBib29sZWFuIHZhbHVlIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBjbGFzcyBzaG91bGQgYmUgYWRkZWQgb3IgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICB0b2dnbGVDbGFzcyhmdW5jOiAoaW5kZXg6IG51bWJlciwgY2xhc3NOYW1lOiBzdHJpbmcsIHN3dGNoOiBib29sZWFuKSA9PiBzdHJpbmcsIHN3dGNoPzogYm9vbGVhbik6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgdmFsKCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZhbHVlIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQSBzdHJpbmcgb2YgdGV4dCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHZhbHVlIG9mIGVhY2ggbWF0Y2hlZCBlbGVtZW50IHRvIHNldCBhcyBzZWxlY3RlZC9jaGVja2VkLlxuICAgICAqL1xuICAgIHZhbCh2YWx1ZTogc3RyaW5nfHN0cmluZ1tdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdmFsdWUgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSB2YWx1ZSB0byBzZXQuIHRoaXMgaXMgdGhlIGN1cnJlbnQgZWxlbWVudC4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYW5kIHRoZSBvbGQgdmFsdWUgYXMgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIHZhbChmdW5jOiAoaW5kZXg6IG51bWJlciwgdmFsdWU6IHN0cmluZykgPT4gc3RyaW5nKTogSlF1ZXJ5O1xuXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIHN0eWxlIHByb3BlcnRpZXMgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgQSBDU1MgcHJvcGVydHkuXG4gICAgICovXG4gICAgY3NzKHByb3BlcnR5TmFtZTogc3RyaW5nKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCBvbmUgb3IgbW9yZSBDU1MgcHJvcGVydGllcyBmb3IgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSBBIENTUyBwcm9wZXJ0eSBuYW1lLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBIHZhbHVlIHRvIHNldCBmb3IgdGhlIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGNzcyhwcm9wZXJ0eU5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZ3xudW1iZXIpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogU2V0IG9uZSBvciBtb3JlIENTUyBwcm9wZXJ0aWVzIGZvciB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIEEgQ1NTIHByb3BlcnR5IG5hbWUuXG4gICAgICogQHBhcmFtIHZhbHVlIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSB2YWx1ZSB0byBzZXQuIHRoaXMgaXMgdGhlIGN1cnJlbnQgZWxlbWVudC4gUmVjZWl2ZXMgdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzZXQgYW5kIHRoZSBvbGQgdmFsdWUgYXMgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGNzcyhwcm9wZXJ0eU5hbWU6IHN0cmluZywgdmFsdWU6IChpbmRleDogbnVtYmVyLCB2YWx1ZTogc3RyaW5nKSA9PiBzdHJpbmd8bnVtYmVyKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFNldCBvbmUgb3IgbW9yZSBDU1MgcHJvcGVydGllcyBmb3IgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3BlcnRpZXMgQW4gb2JqZWN0IG9mIHByb3BlcnR5LXZhbHVlIHBhaXJzIHRvIHNldC5cbiAgICAgKi9cbiAgICBjc3MocHJvcGVydGllczogT2JqZWN0KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbXB1dGVkIGhlaWdodCBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGhlaWdodCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBDU1MgaGVpZ2h0IG9mIGV2ZXJ5IG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHBpeGVscywgb3IgYW4gaW50ZWdlciB3aXRoIGFuIG9wdGlvbmFsIHVuaXQgb2YgbWVhc3VyZSBhcHBlbmRlZCAoYXMgYSBzdHJpbmcpLlxuICAgICAqL1xuICAgIGhlaWdodCh2YWx1ZTogbnVtYmVyfHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIENTUyBoZWlnaHQgb2YgZXZlcnkgbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIGhlaWdodCB0byBzZXQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIGhlaWdodCBhcyBhcmd1bWVudHMuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICBoZWlnaHQoZnVuYzogKGluZGV4OiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiBudW1iZXJ8c3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbXB1dGVkIGhlaWdodCBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgcGFkZGluZyBidXQgbm90IGJvcmRlci5cbiAgICAgKi9cbiAgICBpbm5lckhlaWdodCgpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbm5lciBoZWlnaHQgb24gZWxlbWVudHMgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgcGFkZGluZyBidXQgbm90IGJvcmRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHBpeGVscywgb3IgYW4gaW50ZWdlciBhbG9uZyB3aXRoIGFuIG9wdGlvbmFsIHVuaXQgb2YgbWVhc3VyZSBhcHBlbmRlZCAoYXMgYSBzdHJpbmcpLlxuICAgICAqL1xuICAgIGlubmVySGVpZ2h0KGhlaWdodDogbnVtYmVyfHN0cmluZyk6IEpRdWVyeTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgY29tcHV0ZWQgd2lkdGggZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgaW5jbHVkaW5nIHBhZGRpbmcgYnV0IG5vdCBib3JkZXIuXG4gICAgICovXG4gICAgaW5uZXJXaWR0aCgpOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbm5lciB3aWR0aCBvbiBlbGVtZW50cyBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGluY2x1ZGluZyBwYWRkaW5nIGJ1dCBub3QgYm9yZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIEFuIGludGVnZXIgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgcGl4ZWxzLCBvciBhbiBpbnRlZ2VyIGFsb25nIHdpdGggYW4gb3B0aW9uYWwgdW5pdCBvZiBtZWFzdXJlIGFwcGVuZGVkIChhcyBhIHN0cmluZykuXG4gICAgICovXG4gICAgaW5uZXJXaWR0aCh3aWR0aDogbnVtYmVyfHN0cmluZyk6IEpRdWVyeTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgY29vcmRpbmF0ZXMgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQuXG4gICAgICovXG4gICAgb2Zmc2V0KCk6IEpRdWVyeUNvb3JkaW5hdGVzO1xuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIHRvcCBhbmQgbGVmdCwgd2hpY2ggYXJlIGludGVnZXJzIGluZGljYXRpbmcgdGhlIG5ldyB0b3AgYW5kIGxlZnQgY29vcmRpbmF0ZXMgZm9yIHRoZSBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb29yZGluYXRlcyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgcHJvcGVydGllcyB0b3AgYW5kIGxlZnQsIHdoaWNoIGFyZSBpbnRlZ2VycyBpbmRpY2F0aW5nIHRoZSBuZXcgdG9wIGFuZCBsZWZ0IGNvb3JkaW5hdGVzIGZvciB0aGUgZWxlbWVudHMuXG4gICAgICovXG4gICAgb2Zmc2V0KGNvb3JkaW5hdGVzOiBKUXVlcnlDb29yZGluYXRlcyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgcHJvcGVydGllcyB0b3AgYW5kIGxlZnQsIHdoaWNoIGFyZSBpbnRlZ2VycyBpbmRpY2F0aW5nIHRoZSBuZXcgdG9wIGFuZCBsZWZ0IGNvb3JkaW5hdGVzIGZvciB0aGUgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHRvIHJldHVybiB0aGUgY29vcmRpbmF0ZXMgdG8gc2V0LiBSZWNlaXZlcyB0aGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgaW4gdGhlIGNvbGxlY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IGFuZCB0aGUgY3VycmVudCBjb29yZGluYXRlcyBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LiBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUgbmV3IHRvcCBhbmQgbGVmdCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIG9mZnNldChmdW5jOiAoaW5kZXg6IG51bWJlciwgY29vcmRzOiBKUXVlcnlDb29yZGluYXRlcykgPT4gSlF1ZXJ5Q29vcmRpbmF0ZXMpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgY29tcHV0ZWQgaGVpZ2h0IGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGluY2x1ZGluZyBwYWRkaW5nLCBib3JkZXIsIGFuZCBvcHRpb25hbGx5IG1hcmdpbi4gUmV0dXJucyBhbiBpbnRlZ2VyICh3aXRob3V0IFwicHhcIikgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlIG9yIG51bGwgaWYgY2FsbGVkIG9uIGFuIGVtcHR5IHNldCBvZiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmNsdWRlTWFyZ2luIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUgZWxlbWVudCdzIG1hcmdpbiBpbiB0aGUgY2FsY3VsYXRpb24uXG4gICAgICovXG4gICAgb3V0ZXJIZWlnaHQoaW5jbHVkZU1hcmdpbj86IGJvb2xlYW4pOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBvdXRlciBoZWlnaHQgb24gZWxlbWVudHMgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmcgcGFkZGluZyBhbmQgYm9yZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIEFuIGludGVnZXIgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgcGl4ZWxzLCBvciBhbiBpbnRlZ2VyIGFsb25nIHdpdGggYW4gb3B0aW9uYWwgdW5pdCBvZiBtZWFzdXJlIGFwcGVuZGVkIChhcyBhIHN0cmluZykuXG4gICAgICovXG4gICAgb3V0ZXJIZWlnaHQoaGVpZ2h0OiBudW1iZXJ8c3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbXB1dGVkIHdpZHRoIGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGluY2x1ZGluZyBwYWRkaW5nIGFuZCBib3JkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5jbHVkZU1hcmdpbiBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlIGVsZW1lbnQncyBtYXJnaW4gaW4gdGhlIGNhbGN1bGF0aW9uLlxuICAgICAqL1xuICAgIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbj86IGJvb2xlYW4pOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBvdXRlciB3aWR0aCBvbiBlbGVtZW50cyBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGluY2x1ZGluZyBwYWRkaW5nIGFuZCBib3JkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgQW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBwaXhlbHMsIG9yIGFuIGludGVnZXIgYWxvbmcgd2l0aCBhbiBvcHRpb25hbCB1bml0IG9mIG1lYXN1cmUgYXBwZW5kZWQgKGFzIGEgc3RyaW5nKS5cbiAgICAgKi9cbiAgICBvdXRlcldpZHRoKHdpZHRoOiBudW1iZXJ8c3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvb3JkaW5hdGVzIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgcmVsYXRpdmUgdG8gdGhlIG9mZnNldCBwYXJlbnQuXG4gICAgICovXG4gICAgcG9zaXRpb24oKTogSlF1ZXJ5Q29vcmRpbmF0ZXM7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgc2Nyb2xsIGJhciBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIG9yIHNldCB0aGUgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgc2Nyb2xsIGJhciBmb3IgZXZlcnkgbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIHNjcm9sbExlZnQoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBob3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBzY3JvbGwgYmFyIGZvciBlYWNoIG9mIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIG5ldyBwb3NpdGlvbiB0byBzZXQgdGhlIHNjcm9sbCBiYXIgdG8uXG4gICAgICovXG4gICAgc2Nyb2xsTGVmdCh2YWx1ZTogbnVtYmVyKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSBzY3JvbGwgYmFyIGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgb3Igc2V0IHRoZSB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgc2Nyb2xsIGJhciBmb3IgZXZlcnkgbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIHNjcm9sbFRvcCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50IHZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSBzY3JvbGwgYmFyIGZvciBlYWNoIG9mIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIG5ldyBwb3NpdGlvbiB0byBzZXQgdGhlIHNjcm9sbCBiYXIgdG8uXG4gICAgICovXG4gICAgc2Nyb2xsVG9wKHZhbHVlOiBudW1iZXIpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgY29tcHV0ZWQgd2lkdGggZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICB3aWR0aCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBDU1Mgd2lkdGggb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIHBpeGVscywgb3IgYW4gaW50ZWdlciBhbG9uZyB3aXRoIGFuIG9wdGlvbmFsIHVuaXQgb2YgbWVhc3VyZSBhcHBlbmRlZCAoYXMgYSBzdHJpbmcpLlxuICAgICAqL1xuICAgIHdpZHRoKHZhbHVlOiBudW1iZXJ8c3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgQ1NTIHdpZHRoIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgd2lkdGggdG8gc2V0LiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhbmQgdGhlIG9sZCB3aWR0aCBhcyBhcmd1bWVudHMuIFdpdGhpbiB0aGUgZnVuY3Rpb24sIHRoaXMgcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICB3aWR0aChmdW5jOiAoaW5kZXg6IG51bWJlciwgd2lkdGg6IG51bWJlcikgPT4gbnVtYmVyfHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBmcm9tIHRoZSBxdWV1ZSBhbGwgaXRlbXMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBydW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVldWVOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHF1ZXVlLiBEZWZhdWx0cyB0byBmeCwgdGhlIHN0YW5kYXJkIGVmZmVjdHMgcXVldWUuXG4gICAgICovXG4gICAgY2xlYXJRdWV1ZShxdWV1ZU5hbWU/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZSBhcmJpdHJhcnkgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IEEgc3RyaW5nIG5hbWluZyB0aGUgcGllY2Ugb2YgZGF0YSB0byBzZXQuXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBuZXcgZGF0YSB2YWx1ZTsgaXQgY2FuIGJlIGFueSBKYXZhc2NyaXB0IHR5cGUgaW5jbHVkaW5nIEFycmF5IG9yIE9iamVjdC5cbiAgICAgKi9cbiAgICBkYXRhKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFN0b3JlIGFyYml0cmFyeSBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmogQW4gb2JqZWN0IG9mIGtleS12YWx1ZSBwYWlycyBvZiBkYXRhIHRvIHVwZGF0ZS5cbiAgICAgKi9cbiAgICBkYXRhKG9iajogeyBba2V5OiBzdHJpbmddOiBhbnk7IH0pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSB2YWx1ZSBhdCB0aGUgbmFtZWQgZGF0YSBzdG9yZSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGpRdWVyeSBjb2xsZWN0aW9uLCBhcyBzZXQgYnkgZGF0YShuYW1lLCB2YWx1ZSkgb3IgYnkgYW4gSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgTmFtZSBvZiB0aGUgZGF0YSBzdG9yZWQuXG4gICAgICovXG4gICAgZGF0YShrZXk6IHN0cmluZyk6IGFueTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHZhbHVlIGF0IHRoZSBuYW1lZCBkYXRhIHN0b3JlIGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgalF1ZXJ5IGNvbGxlY3Rpb24sIGFzIHNldCBieSBkYXRhKG5hbWUsIHZhbHVlKSBvciBieSBhbiBIVE1MNSBkYXRhLSogYXR0cmlidXRlLlxuICAgICAqL1xuICAgIGRhdGEoKTogYW55O1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSB0aGUgbmV4dCBmdW5jdGlvbiBvbiB0aGUgcXVldWUgZm9yIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXVlTmFtZSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gRGVmYXVsdHMgdG8gZngsIHRoZSBzdGFuZGFyZCBlZmZlY3RzIHF1ZXVlLlxuICAgICAqL1xuICAgIGRlcXVldWUocXVldWVOYW1lPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcHJldmlvdXNseS1zdG9yZWQgcGllY2Ugb2YgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIEEgc3RyaW5nIG5hbWluZyB0aGUgcGllY2Ugb2YgZGF0YSB0byBkZWxldGUgb3Igc3BhY2Utc2VwYXJhdGVkIHN0cmluZyBuYW1pbmcgdGhlIHBpZWNlcyBvZiBkYXRhIHRvIGRlbGV0ZS5cbiAgICAgKi9cbiAgICByZW1vdmVEYXRhKG5hbWU6IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBwcmV2aW91c2x5LXN0b3JlZCBwaWVjZSBvZiBkYXRhLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpc3QgQW4gYXJyYXkgb2Ygc3RyaW5ncyBuYW1pbmcgdGhlIHBpZWNlcyBvZiBkYXRhIHRvIGRlbGV0ZS5cbiAgICAgKi9cbiAgICByZW1vdmVEYXRhKGxpc3Q6IHN0cmluZ1tdKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgUHJvbWlzZSBvYmplY3QgdG8gb2JzZXJ2ZSB3aGVuIGFsbCBhY3Rpb25zIG9mIGEgY2VydGFpbiB0eXBlIGJvdW5kIHRvIHRoZSBjb2xsZWN0aW9uLCBxdWV1ZWQgb3Igbm90LCBoYXZlIGZpbmlzaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgcXVldWUgdGhhdCBuZWVkcyB0byBiZSBvYnNlcnZlZC4gKGRlZmF1bHQ6IGZ4KVxuICAgICAqIEBwYXJhbSB0YXJnZXQgT2JqZWN0IG9udG8gd2hpY2ggdGhlIHByb21pc2UgbWV0aG9kcyBoYXZlIHRvIGJlIGF0dGFjaGVkXG4gICAgICovXG4gICAgcHJvbWlzZSh0eXBlPzogc3RyaW5nLCB0YXJnZXQ/OiBPYmplY3QpOiBKUXVlcnlQcm9taXNlPGFueT47XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgY3VzdG9tIGFuaW1hdGlvbiBvZiBhIHNldCBvZiBDU1MgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIEFuIG9iamVjdCBvZiBDU1MgcHJvcGVydGllcyBhbmQgdmFsdWVzIHRoYXQgdGhlIGFuaW1hdGlvbiB3aWxsIG1vdmUgdG93YXJkLlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBhbmltYXRlKHByb3BlcnRpZXM6IE9iamVjdCwgZHVyYXRpb24/OiBzdHJpbmd8bnVtYmVyLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBjdXN0b20gYW5pbWF0aW9uIG9mIGEgc2V0IG9mIENTUyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3BlcnRpZXMgQW4gb2JqZWN0IG9mIENTUyBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgdGhhdCB0aGUgYW5pbWF0aW9uIHdpbGwgbW92ZSB0b3dhcmQuXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBlYXNpbmcgQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi4gKGRlZmF1bHQ6IHN3aW5nKVxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGFuaW1hdGUocHJvcGVydGllczogT2JqZWN0LCBkdXJhdGlvbj86IHN0cmluZ3xudW1iZXIsIGVhc2luZz86IHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgY3VzdG9tIGFuaW1hdGlvbiBvZiBhIHNldCBvZiBDU1MgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIEFuIG9iamVjdCBvZiBDU1MgcHJvcGVydGllcyBhbmQgdmFsdWVzIHRoYXQgdGhlIGFuaW1hdGlvbiB3aWxsIG1vdmUgdG93YXJkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEEgbWFwIG9mIGFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgYW5pbWF0ZShwcm9wZXJ0aWVzOiBPYmplY3QsIG9wdGlvbnM6IEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYSB0aW1lciB0byBkZWxheSBleGVjdXRpb24gb2Ygc3Vic2VxdWVudCBpdGVtcyBpbiB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGV4ZWN1dGlvbiBvZiB0aGUgbmV4dCBpdGVtIGluIHRoZSBxdWV1ZS5cbiAgICAgKiBAcGFyYW0gcXVldWVOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHF1ZXVlLiBEZWZhdWx0cyB0byBmeCwgdGhlIHN0YW5kYXJkIGVmZmVjdHMgcXVldWUuXG4gICAgICovXG4gICAgZGVsYXkoZHVyYXRpb246IG51bWJlciwgcXVldWVOYW1lPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgbWF0Y2hlZCBlbGVtZW50cyBieSBmYWRpbmcgdGhlbSB0byBvcGFxdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgZmFkZUluKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IHRoZSBtYXRjaGVkIGVsZW1lbnRzIGJ5IGZhZGluZyB0aGVtIHRvIG9wYXF1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gZWFzaW5nIEEgc3RyaW5nIGluZGljYXRpbmcgd2hpY2ggZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgZmFkZUluKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgZWFzaW5nPzogc3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIG1hdGNoZWQgZWxlbWVudHMgYnkgZmFkaW5nIHRoZW0gdG8gb3BhcXVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBtYXAgb2YgYWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmYWRlSW4ob3B0aW9uczogSlF1ZXJ5QW5pbWF0aW9uT3B0aW9ucyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgYnkgZmFkaW5nIHRoZW0gdG8gdHJhbnNwYXJlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgZmFkZU91dChkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cyBieSBmYWRpbmcgdGhlbSB0byB0cmFuc3BhcmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gZWFzaW5nIEEgc3RyaW5nIGluZGljYXRpbmcgd2hpY2ggZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgZmFkZU91dChkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGVhc2luZz86IHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzIGJ5IGZhZGluZyB0aGVtIHRvIHRyYW5zcGFyZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBtYXAgb2YgYWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmYWRlT3V0KG9wdGlvbnM6IEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBBZGp1c3QgdGhlIG9wYWNpdHkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIG9wYWNpdHkgQSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxIGRlbm90aW5nIHRoZSB0YXJnZXQgb3BhY2l0eS5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBmYWRlVG8oZHVyYXRpb246IHN0cmluZ3xudW1iZXIsIG9wYWNpdHk6IG51bWJlciwgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBZGp1c3QgdGhlIG9wYWNpdHkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIG9wYWNpdHkgQSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxIGRlbm90aW5nIHRoZSB0YXJnZXQgb3BhY2l0eS5cbiAgICAgKiBAcGFyYW0gZWFzaW5nIEEgc3RyaW5nIGluZGljYXRpbmcgd2hpY2ggZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgZmFkZVRvKGR1cmF0aW9uOiBzdHJpbmd8bnVtYmVyLCBvcGFjaXR5OiBudW1iZXIsIGVhc2luZz86IHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgb3IgaGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cyBieSBhbmltYXRpbmcgdGhlaXIgb3BhY2l0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBmYWRlVG9nZ2xlKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IG9yIGhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgYnkgYW5pbWF0aW5nIHRoZWlyIG9wYWNpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGVhc2luZyBBIHN0cmluZyBpbmRpY2F0aW5nIHdoaWNoIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGZhZGVUb2dnbGUoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzIGJ5IGFuaW1hdGluZyB0aGVpciBvcGFjaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBtYXAgb2YgYWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmYWRlVG9nZ2xlKG9wdGlvbnM6IEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBjdXJyZW50bHktcnVubmluZyBhbmltYXRpb24sIHJlbW92ZSBhbGwgcXVldWVkIGFuaW1hdGlvbnMsIGFuZCBjb21wbGV0ZSBhbGwgYW5pbWF0aW9ucyBmb3IgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIG5hbWUgb2YgdGhlIHF1ZXVlIGluIHdoaWNoIHRvIHN0b3AgYW5pbWF0aW9ucy5cbiAgICAgKi9cbiAgICBmaW5pc2gocXVldWU/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGhpZGUoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGVhc2luZyBBIHN0cmluZyBpbmRpY2F0aW5nIHdoaWNoIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGhpZGUoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEEgbWFwIG9mIGFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgaGlkZShvcHRpb25zOiBKUXVlcnlBbmltYXRpb25PcHRpb25zKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiBBIHN0cmluZyBvciBudW1iZXIgZGV0ZXJtaW5pbmcgaG93IGxvbmcgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzaG93KGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBlYXNpbmcgQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzaG93KGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgZWFzaW5nPzogc3RyaW5nLCBjb21wbGV0ZT86IEZ1bmN0aW9uKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIG1hcCBvZiBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgICAqL1xuICAgIHNob3cob3B0aW9uczogSlF1ZXJ5QW5pbWF0aW9uT3B0aW9ucyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIG1hdGNoZWQgZWxlbWVudHMgd2l0aCBhIHNsaWRpbmcgbW90aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHNsaWRlRG93bihkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgbWF0Y2hlZCBlbGVtZW50cyB3aXRoIGEgc2xpZGluZyBtb3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGVhc2luZyBBIHN0cmluZyBpbmRpY2F0aW5nIHdoaWNoIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHNsaWRlRG93bihkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGVhc2luZz86IHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IHRoZSBtYXRjaGVkIGVsZW1lbnRzIHdpdGggYSBzbGlkaW5nIG1vdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEEgbWFwIG9mIGFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAgICovXG4gICAgc2xpZGVEb3duKG9wdGlvbnM6IEpRdWVyeUFuaW1hdGlvbk9wdGlvbnMpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IG9yIGhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgd2l0aCBhIHNsaWRpbmcgbW90aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHNsaWRlVG9nZ2xlKGR1cmF0aW9uPzogbnVtYmVyfHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IG9yIGhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgd2l0aCBhIHNsaWRpbmcgbW90aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBlYXNpbmcgQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzbGlkZVRvZ2dsZShkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGVhc2luZz86IHN0cmluZywgY29tcGxldGU/OiBGdW5jdGlvbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IG9yIGhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMgd2l0aCBhIHNsaWRpbmcgbW90aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBtYXAgb2YgYWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICBzbGlkZVRvZ2dsZShvcHRpb25zOiBKUXVlcnlBbmltYXRpb25PcHRpb25zKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cyB3aXRoIGEgc2xpZGluZyBtb3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGNvbXBsZXRlIEEgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgc2xpZGVVcChkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cyB3aXRoIGEgc2xpZGluZyBtb3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gQSBzdHJpbmcgb3IgbnVtYmVyIGRldGVybWluaW5nIGhvdyBsb25nIHRoZSBhbmltYXRpb24gd2lsbCBydW4uXG4gICAgICogQHBhcmFtIGVhc2luZyBBIHN0cmluZyBpbmRpY2F0aW5nIHdoaWNoIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHNsaWRlVXAoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgbWF0Y2hlZCBlbGVtZW50cyB3aXRoIGEgc2xpZGluZyBtb3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIG1hcCBvZiBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgICAqL1xuICAgIHNsaWRlVXAob3B0aW9uczogSlF1ZXJ5QW5pbWF0aW9uT3B0aW9ucyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFN0b3AgdGhlIGN1cnJlbnRseS1ydW5uaW5nIGFuaW1hdGlvbiBvbiB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjbGVhclF1ZXVlIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gcmVtb3ZlIHF1ZXVlZCBhbmltYXRpb24gYXMgd2VsbC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICogQHBhcmFtIGp1bXBUb0VuZCBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIGNvbXBsZXRlIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBpbW1lZGlhdGVseS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICovXG4gICAgc3RvcChjbGVhclF1ZXVlPzogYm9vbGVhbiwganVtcFRvRW5kPzogYm9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBjdXJyZW50bHktcnVubmluZyBhbmltYXRpb24gb24gdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIG5hbWUgb2YgdGhlIHF1ZXVlIGluIHdoaWNoIHRvIHN0b3AgYW5pbWF0aW9ucy5cbiAgICAgKiBAcGFyYW0gY2xlYXJRdWV1ZSBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIHJlbW92ZSBxdWV1ZWQgYW5pbWF0aW9uIGFzIHdlbGwuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqIEBwYXJhbSBqdW1wVG9FbmQgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0byBjb21wbGV0ZSB0aGUgY3VycmVudCBhbmltYXRpb24gaW1tZWRpYXRlbHkuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqL1xuICAgIHN0b3AocXVldWU/OiBzdHJpbmcsIGNsZWFyUXVldWU/OiBib29sZWFuLCBqdW1wVG9FbmQ/OiBib29sZWFuKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBjb21wbGV0ZSBBIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIHRvZ2dsZShkdXJhdGlvbj86IG51bWJlcnxzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIEEgc3RyaW5nIG9yIG51bWJlciBkZXRlcm1pbmluZyBob3cgbG9uZyB0aGUgYW5pbWF0aW9uIHdpbGwgcnVuLlxuICAgICAqIEBwYXJhbSBlYXNpbmcgQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiBAcGFyYW0gY29tcGxldGUgQSBmdW5jdGlvbiB0byBjYWxsIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICB0b2dnbGUoZHVyYXRpb24/OiBudW1iZXJ8c3RyaW5nLCBlYXNpbmc/OiBzdHJpbmcsIGNvbXBsZXRlPzogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBvciBoaWRlIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBtYXAgb2YgYWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICB0b2dnbGUob3B0aW9uczogSlF1ZXJ5QW5pbWF0aW9uT3B0aW9ucyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IG9yIGhpZGUgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2hvd09ySGlkZSBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIHNob3cgb3IgaGlkZSB0aGUgZWxlbWVudHMuXG4gICAgICovXG4gICAgdG9nZ2xlKHNob3dPckhpZGU6IGJvb2xlYW4pOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoYW5kbGVyIHRvIGFuIGV2ZW50IGZvciB0aGUgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSBBIHN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIERPTSBldmVudCB0eXBlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJzdWJtaXQsXCIgb3IgY3VzdG9tIGV2ZW50IG5hbWVzLlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBiaW5kKGV2ZW50VHlwZTogc3RyaW5nLCBldmVudERhdGE6IGFueSwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGhhbmRsZXIgdG8gYW4gZXZlbnQgZm9yIHRoZSBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIEEgc3RyaW5nIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgRE9NIGV2ZW50IHR5cGVzLCBzdWNoIGFzIFwiY2xpY2tcIiBvciBcInN1Ym1pdCxcIiBvciBjdXN0b20gZXZlbnQgbmFtZXMuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGJpbmQoZXZlbnRUeXBlOiBzdHJpbmcsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoYW5kbGVyIHRvIGFuIGV2ZW50IGZvciB0aGUgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSBBIHN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIERPTSBldmVudCB0eXBlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJzdWJtaXQsXCIgb3IgY3VzdG9tIGV2ZW50IG5hbWVzLlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBwcmV2ZW50QnViYmxlIFNldHRpbmcgdGhlIHRoaXJkIGFyZ3VtZW50IHRvIGZhbHNlIHdpbGwgYXR0YWNoIGEgZnVuY3Rpb24gdGhhdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gZnJvbSBvY2N1cnJpbmcgYW5kIHN0b3BzIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nLiBUaGUgZGVmYXVsdCBpcyB0cnVlLlxuICAgICAqL1xuICAgIGJpbmQoZXZlbnRUeXBlOiBzdHJpbmcsIGV2ZW50RGF0YTogYW55LCBwcmV2ZW50QnViYmxlOiBib29sZWFuKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGhhbmRsZXIgdG8gYW4gZXZlbnQgZm9yIHRoZSBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIEEgc3RyaW5nIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgRE9NIGV2ZW50IHR5cGVzLCBzdWNoIGFzIFwiY2xpY2tcIiBvciBcInN1Ym1pdCxcIiBvciBjdXN0b20gZXZlbnQgbmFtZXMuXG4gICAgICogQHBhcmFtIHByZXZlbnRCdWJibGUgU2V0dGluZyB0aGUgdGhpcmQgYXJndW1lbnQgdG8gZmFsc2Ugd2lsbCBhdHRhY2ggYSBmdW5jdGlvbiB0aGF0IHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiBmcm9tIG9jY3VycmluZyBhbmQgc3RvcHMgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcuIFRoZSBkZWZhdWx0IGlzIHRydWUuXG4gICAgICovXG4gICAgYmluZChldmVudFR5cGU6IHN0cmluZywgcHJldmVudEJ1YmJsZTogYm9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoYW5kbGVyIHRvIGFuIGV2ZW50IGZvciB0aGUgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50cyBBbiBvYmplY3QgY29udGFpbmluZyBvbmUgb3IgbW9yZSBET00gZXZlbnQgdHlwZXMgYW5kIGZ1bmN0aW9ucyB0byBleGVjdXRlIGZvciB0aGVtLlxuICAgICAqL1xuICAgIGJpbmQoZXZlbnRzOiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcImJsdXJcIiBldmVudCBvbiBhbiBlbGVtZW50XG4gICAgICovXG4gICAgYmx1cigpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImJsdXJcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgYmx1cihoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImJsdXJcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgYmx1cihldmVudERhdGE/OiBhbnksIGhhbmRsZXI/OiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcImNoYW5nZVwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgY2hhbmdlKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwiY2hhbmdlXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGNoYW5nZShoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImNoYW5nZVwiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBjaGFuZ2UoZXZlbnREYXRhPzogYW55LCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJjbGlja1wiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgY2xpY2soKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJjbGlja1wiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqL1xuICAgIGNsaWNrKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwiY2xpY2tcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgY2xpY2soZXZlbnREYXRhPzogYW55LCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJkYmxjbGlja1wiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgZGJsY2xpY2soKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJkYmxjbGlja1wiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBkYmxjbGljayhoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImRibGNsaWNrXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGRibGNsaWNrKGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIGRlbGVnYXRlKHNlbGVjdG9yOiBhbnksIGV2ZW50VHlwZTogc3RyaW5nLCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgZGVsZWdhdGUoc2VsZWN0b3I6IGFueSwgZXZlbnRUeXBlOiBzdHJpbmcsIGV2ZW50RGF0YTogYW55LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcImZvY3VzXCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmb2N1cygpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImZvY3VzXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGZvY3VzKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwiZm9jdXNcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgZm9jdXMoZXZlbnREYXRhPzogYW55LCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImZvY3VzaW5cIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgZm9jdXNpbihoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImZvY3VzaW5cIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgZm9jdXNpbihldmVudERhdGE6IE9iamVjdCwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImZvY3Vzb3V0XCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGZvY3Vzb3V0KGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwiZm9jdXNvdXRcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgZm9jdXNvdXQoZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEJpbmQgdHdvIGhhbmRsZXJzIHRvIHRoZSBtYXRjaGVkIGVsZW1lbnRzLCB0byBiZSBleGVjdXRlZCB3aGVuIHRoZSBtb3VzZSBwb2ludGVyIGVudGVycyBhbmQgbGVhdmVzIHRoZSBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVySW4gQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIG1vdXNlIHBvaW50ZXIgZW50ZXJzIHRoZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBoYW5kbGVyT3V0IEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBtb3VzZSBwb2ludGVyIGxlYXZlcyB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBob3ZlcihoYW5kbGVySW46IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSwgaGFuZGxlck91dDogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYSBzaW5nbGUgaGFuZGxlciB0byB0aGUgbWF0Y2hlZCBlbGVtZW50cywgdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgbW91c2UgcG9pbnRlciBlbnRlcnMgb3IgbGVhdmVzIHRoZSBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVySW5PdXQgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIG1vdXNlIHBvaW50ZXIgZW50ZXJzIG9yIGxlYXZlcyB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBob3ZlcihoYW5kbGVySW5PdXQ6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwia2V5ZG93blwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAga2V5ZG93bigpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImtleWRvd25cIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAga2V5ZG93bihoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUtleUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImtleWRvd25cIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAga2V5ZG93bihldmVudERhdGE/OiBhbnksIGhhbmRsZXI/OiAoZXZlbnRPYmplY3Q6IEpRdWVyeUtleUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcImtleXByZXNzXCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBrZXlwcmVzcygpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImtleXByZXNzXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGtleXByZXNzKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5S2V5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwia2V5cHJlc3NcIiBKYXZhU2NyaXB0IGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAga2V5cHJlc3MoZXZlbnREYXRhPzogYW55LCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlLZXlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJrZXl1cFwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAga2V5dXAoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJrZXl1cFwiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBrZXl1cChoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUtleUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImtleXVwXCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGtleXVwKGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5S2V5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJsb2FkXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbG9hZChoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcImxvYWRcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBsb2FkKGV2ZW50RGF0YT86IGFueSwgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwibW91c2Vkb3duXCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBtb3VzZWRvd24oKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZWRvd25cIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZWRvd24oaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcIm1vdXNlZG93blwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlZG93bihldmVudERhdGE6IE9iamVjdCwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcIm1vdXNlZW50ZXJcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIG1vdXNlZW50ZXIoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byBiZSBmaXJlZCB3aGVuIHRoZSBtb3VzZSBlbnRlcnMgYW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2VlbnRlcihoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeU1vdXNlRXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gYmUgZmlyZWQgd2hlbiB0aGUgbW91c2UgZW50ZXJzIGFuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlZW50ZXIoZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJtb3VzZWxlYXZlXCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBtb3VzZWxlYXZlKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gYmUgZmlyZWQgd2hlbiB0aGUgbW91c2UgbGVhdmVzIGFuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlbGVhdmUoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIGJlIGZpcmVkIHdoZW4gdGhlIG1vdXNlIGxlYXZlcyBhbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZWxlYXZlKGV2ZW50RGF0YTogT2JqZWN0LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeU1vdXNlRXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwibW91c2Vtb3ZlXCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBtb3VzZW1vdmUoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZW1vdmVcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZW1vdmUoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcIm1vdXNlbW92ZVwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlbW92ZShldmVudERhdGE6IE9iamVjdCwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcIm1vdXNlb3V0XCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBtb3VzZW91dCgpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcIm1vdXNlb3V0XCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2VvdXQoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcIm1vdXNlb3V0XCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2VvdXQoZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJtb3VzZW92ZXJcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIG1vdXNlb3ZlcigpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcIm1vdXNlb3ZlclwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG1vdXNlb3ZlcihoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeU1vdXNlRXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwibW91c2VvdmVyXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2VvdmVyKGV2ZW50RGF0YTogT2JqZWN0LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeU1vdXNlRXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwibW91c2V1cFwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgbW91c2V1cCgpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcIm1vdXNldXBcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBtb3VzZXVwKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5TW91c2VFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJtb3VzZXVwXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgbW91c2V1cChldmVudERhdGE6IE9iamVjdCwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlNb3VzZUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgaGFuZGxlci5cbiAgICAgKi9cbiAgICBvZmYoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBPbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIG9yIGp1c3QgbmFtZXNwYWNlcywgc3VjaCBhcyBcImNsaWNrXCIsIFwia2V5ZG93bi5teVBsdWdpblwiLCBvciBcIi5teVBsdWdpblwiLlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHNlbGVjdG9yIHdoaWNoIHNob3VsZCBtYXRjaCB0aGUgb25lIG9yaWdpbmFsbHkgcGFzc2VkIHRvIC5vbigpIHdoZW4gYXR0YWNoaW5nIGV2ZW50IGhhbmRsZXJzLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgaGFuZGxlciBmdW5jdGlvbiBwcmV2aW91c2x5IGF0dGFjaGVkIGZvciB0aGUgZXZlbnQocyksIG9yIHRoZSBzcGVjaWFsIHZhbHVlIGZhbHNlLlxuICAgICAqL1xuICAgIG9mZihldmVudHM6IHN0cmluZywgc2VsZWN0b3I/OiBzdHJpbmcsIGhhbmRsZXI/OiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIE9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgb3IganVzdCBuYW1lc3BhY2VzLCBzdWNoIGFzIFwiY2xpY2tcIiwgXCJrZXlkb3duLm15UGx1Z2luXCIsIG9yIFwiLm15UGx1Z2luXCIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBoYW5kbGVyIGZ1bmN0aW9uIHByZXZpb3VzbHkgYXR0YWNoZWQgZm9yIHRoZSBldmVudChzKSwgb3IgdGhlIHNwZWNpYWwgdmFsdWUgZmFsc2UuXG4gICAgICovXG4gICAgb2ZmKGV2ZW50czogc3RyaW5nLCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIEFuIG9iamVjdCB3aGVyZSB0aGUgc3RyaW5nIGtleXMgcmVwcmVzZW50IG9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgYW5kIHRoZSB2YWx1ZXMgcmVwcmVzZW50IGhhbmRsZXIgZnVuY3Rpb25zIHByZXZpb3VzbHkgYXR0YWNoZWQgZm9yIHRoZSBldmVudChzKS5cbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzZWxlY3RvciB3aGljaCBzaG91bGQgbWF0Y2ggdGhlIG9uZSBvcmlnaW5hbGx5IHBhc3NlZCB0byAub24oKSB3aGVuIGF0dGFjaGluZyBldmVudCBoYW5kbGVycy5cbiAgICAgKi9cbiAgICBvZmYoZXZlbnRzOiB7IFtrZXk6IHN0cmluZ106IGFueTsgfSwgc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYW4gZXZlbnQgaGFuZGxlciBmdW5jdGlvbiBmb3Igb25lIG9yIG1vcmUgZXZlbnRzIHRvIHRoZSBzZWxlY3RlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudHMgT25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGV2ZW50IHR5cGVzIGFuZCBvcHRpb25hbCBuYW1lc3BhY2VzLCBzdWNoIGFzIFwiY2xpY2tcIiBvciBcImtleWRvd24ubXlQbHVnaW5cIi5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLiBUaGUgdmFsdWUgZmFsc2UgaXMgYWxzbyBhbGxvd2VkIGFzIGEgc2hvcnRoYW5kIGZvciBhIGZ1bmN0aW9uIHRoYXQgc2ltcGx5IGRvZXMgcmV0dXJuIGZhbHNlLiBSZXN0IHBhcmFtZXRlciBhcmdzIGlzIGZvciBvcHRpb25hbCBwYXJhbWV0ZXJzIHBhc3NlZCB0byBqUXVlcnkudHJpZ2dlcigpLiBOb3RlIHRoYXQgdGhlIGFjdHVhbCBwYXJhbWV0ZXJzIG9uIHRoZSBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIG11c3QgYmUgbWFya2VkIGFzIG9wdGlvbmFsICg/IHN5bnRheCkuXG4gICAgICovXG4gICAgb24oZXZlbnRzOiBzdHJpbmcsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QsIC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQXR0YWNoIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24gZm9yIG9uZSBvciBtb3JlIGV2ZW50cyB0byB0aGUgc2VsZWN0ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIE9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJrZXlkb3duLm15UGx1Z2luXCIuXG4gICAgICogQHBhcmFtIGRhdGEgRGF0YSB0byBiZSBwYXNzZWQgdG8gdGhlIGhhbmRsZXIgaW4gZXZlbnQuZGF0YSB3aGVuIGFuIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLiBUaGUgdmFsdWUgZmFsc2UgaXMgYWxzbyBhbGxvd2VkIGFzIGEgc2hvcnRoYW5kIGZvciBhIGZ1bmN0aW9uIHRoYXQgc2ltcGx5IGRvZXMgcmV0dXJuIGZhbHNlLlxuICAgICovXG4gICAgb24oZXZlbnRzOiBzdHJpbmcsIGRhdGEgOiBhbnksIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QsIC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQXR0YWNoIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24gZm9yIG9uZSBvciBtb3JlIGV2ZW50cyB0byB0aGUgc2VsZWN0ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIE9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJrZXlkb3duLm15UGx1Z2luXCIuXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3Igc3RyaW5nIHRvIGZpbHRlciB0aGUgZGVzY2VuZGFudHMgb2YgdGhlIHNlbGVjdGVkIGVsZW1lbnRzIHRoYXQgdHJpZ2dlciB0aGUgZXZlbnQuIElmIHRoZSBzZWxlY3RvciBpcyBudWxsIG9yIG9taXR0ZWQsIHRoZSBldmVudCBpcyBhbHdheXMgdHJpZ2dlcmVkIHdoZW4gaXQgcmVhY2hlcyB0aGUgc2VsZWN0ZWQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLiBUaGUgdmFsdWUgZmFsc2UgaXMgYWxzbyBhbGxvd2VkIGFzIGEgc2hvcnRoYW5kIGZvciBhIGZ1bmN0aW9uIHRoYXQgc2ltcGx5IGRvZXMgcmV0dXJuIGZhbHNlLlxuICAgICAqL1xuICAgIG9uKGV2ZW50czogc3RyaW5nLCBzZWxlY3Rvcjogc3RyaW5nLCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0LCAuLi5ldmVudERhdGE6IGFueVtdKSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQXR0YWNoIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24gZm9yIG9uZSBvciBtb3JlIGV2ZW50cyB0byB0aGUgc2VsZWN0ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIE9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJrZXlkb3duLm15UGx1Z2luXCIuXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3Igc3RyaW5nIHRvIGZpbHRlciB0aGUgZGVzY2VuZGFudHMgb2YgdGhlIHNlbGVjdGVkIGVsZW1lbnRzIHRoYXQgdHJpZ2dlciB0aGUgZXZlbnQuIElmIHRoZSBzZWxlY3RvciBpcyBudWxsIG9yIG9taXR0ZWQsIHRoZSBldmVudCBpcyBhbHdheXMgdHJpZ2dlcmVkIHdoZW4gaXQgcmVhY2hlcyB0aGUgc2VsZWN0ZWQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIGJlIHBhc3NlZCB0byB0aGUgaGFuZGxlciBpbiBldmVudC5kYXRhIHdoZW4gYW4gZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuIFRoZSB2YWx1ZSBmYWxzZSBpcyBhbHNvIGFsbG93ZWQgYXMgYSBzaG9ydGhhbmQgZm9yIGEgZnVuY3Rpb24gdGhhdCBzaW1wbHkgZG9lcyByZXR1cm4gZmFsc2UuXG4gICAgICovXG4gICAgb24oZXZlbnRzOiBzdHJpbmcsIHNlbGVjdG9yOiBzdHJpbmcsIGRhdGE6IGFueSwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCwgLi4uZXZlbnREYXRhOiBhbnlbXSkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIGZvciBvbmUgb3IgbW9yZSBldmVudHMgdG8gdGhlIHNlbGVjdGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBBbiBvYmplY3QgaW4gd2hpY2ggdGhlIHN0cmluZyBrZXlzIHJlcHJlc2VudCBvbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIGFuZCB0aGUgdmFsdWVzIHJlcHJlc2VudCBhIGhhbmRsZXIgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGZvciB0aGUgZXZlbnQocykuXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3Igc3RyaW5nIHRvIGZpbHRlciB0aGUgZGVzY2VuZGFudHMgb2YgdGhlIHNlbGVjdGVkIGVsZW1lbnRzIHRoYXQgd2lsbCBjYWxsIHRoZSBoYW5kbGVyLiBJZiB0aGUgc2VsZWN0b3IgaXMgbnVsbCBvciBvbWl0dGVkLCB0aGUgaGFuZGxlciBpcyBhbHdheXMgY2FsbGVkIHdoZW4gaXQgcmVhY2hlcyB0aGUgc2VsZWN0ZWQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIGJlIHBhc3NlZCB0byB0aGUgaGFuZGxlciBpbiBldmVudC5kYXRhIHdoZW4gYW4gZXZlbnQgb2NjdXJzLlxuICAgICAqL1xuICAgIG9uKGV2ZW50czogeyBba2V5OiBzdHJpbmddOiBhbnk7IH0sIHNlbGVjdG9yPzogc3RyaW5nLCBkYXRhPzogYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIGZvciBvbmUgb3IgbW9yZSBldmVudHMgdG8gdGhlIHNlbGVjdGVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBBbiBvYmplY3QgaW4gd2hpY2ggdGhlIHN0cmluZyBrZXlzIHJlcHJlc2VudCBvbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIGFuZCB0aGUgdmFsdWVzIHJlcHJlc2VudCBhIGhhbmRsZXIgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGZvciB0aGUgZXZlbnQocykuXG4gICAgICogQHBhcmFtIGRhdGEgRGF0YSB0byBiZSBwYXNzZWQgdG8gdGhlIGhhbmRsZXIgaW4gZXZlbnQuZGF0YSB3aGVuIGFuIGV2ZW50IG9jY3Vycy5cbiAgICAgKi9cbiAgICBvbihldmVudHM6IHsgW2tleTogc3RyaW5nXTogYW55OyB9LCBkYXRhPzogYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgaGFuZGxlciB0byBhbiBldmVudCBmb3IgdGhlIGVsZW1lbnRzLiBUaGUgaGFuZGxlciBpcyBleGVjdXRlZCBhdCBtb3N0IG9uY2UgcGVyIGVsZW1lbnQgcGVyIGV2ZW50IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIEEgc3RyaW5nIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgSmF2YVNjcmlwdCBldmVudCB0eXBlcywgc3VjaCBhcyBcImNsaWNrXCIgb3IgXCJzdWJtaXQsXCIgb3IgY3VzdG9tIGV2ZW50IG5hbWVzLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhdCB0aGUgdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIG9uZShldmVudHM6IHN0cmluZywgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGhhbmRsZXIgdG8gYW4gZXZlbnQgZm9yIHRoZSBlbGVtZW50cy4gVGhlIGhhbmRsZXIgaXMgZXhlY3V0ZWQgYXQgbW9zdCBvbmNlIHBlciBlbGVtZW50IHBlciBldmVudCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBBIHN0cmluZyBjb250YWluaW5nIG9uZSBvciBtb3JlIEphdmFTY3JpcHQgZXZlbnQgdHlwZXMsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwic3VibWl0LFwiIG9yIGN1c3RvbSBldmVudCBuYW1lcy5cbiAgICAgKiBAcGFyYW0gZGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGF0IHRoZSB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgb25lKGV2ZW50czogc3RyaW5nLCBkYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGhhbmRsZXIgdG8gYW4gZXZlbnQgZm9yIHRoZSBlbGVtZW50cy4gVGhlIGhhbmRsZXIgaXMgZXhlY3V0ZWQgYXQgbW9zdCBvbmNlIHBlciBlbGVtZW50IHBlciBldmVudCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50cyBPbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgZXZlbnQgdHlwZXMgYW5kIG9wdGlvbmFsIG5hbWVzcGFjZXMsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwia2V5ZG93bi5teVBsdWdpblwiLlxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHNlbGVjdG9yIHN0cmluZyB0byBmaWx0ZXIgdGhlIGRlc2NlbmRhbnRzIG9mIHRoZSBzZWxlY3RlZCBlbGVtZW50cyB0aGF0IHRyaWdnZXIgdGhlIGV2ZW50LiBJZiB0aGUgc2VsZWN0b3IgaXMgbnVsbCBvciBvbWl0dGVkLCB0aGUgZXZlbnQgaXMgYWx3YXlzIHRyaWdnZXJlZCB3aGVuIGl0IHJlYWNoZXMgdGhlIHNlbGVjdGVkIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC4gVGhlIHZhbHVlIGZhbHNlIGlzIGFsc28gYWxsb3dlZCBhcyBhIHNob3J0aGFuZCBmb3IgYSBmdW5jdGlvbiB0aGF0IHNpbXBseSBkb2VzIHJldHVybiBmYWxzZS5cbiAgICAgKi9cbiAgICBvbmUoZXZlbnRzOiBzdHJpbmcsIHNlbGVjdG9yOiBzdHJpbmcsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2ggYSBoYW5kbGVyIHRvIGFuIGV2ZW50IGZvciB0aGUgZWxlbWVudHMuIFRoZSBoYW5kbGVyIGlzIGV4ZWN1dGVkIGF0IG1vc3Qgb25jZSBwZXIgZWxlbWVudCBwZXIgZXZlbnQgdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudHMgT25lIG9yIG1vcmUgc3BhY2Utc2VwYXJhdGVkIGV2ZW50IHR5cGVzIGFuZCBvcHRpb25hbCBuYW1lc3BhY2VzLCBzdWNoIGFzIFwiY2xpY2tcIiBvciBcImtleWRvd24ubXlQbHVnaW5cIi5cbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzZWxlY3RvciBzdHJpbmcgdG8gZmlsdGVyIHRoZSBkZXNjZW5kYW50cyBvZiB0aGUgc2VsZWN0ZWQgZWxlbWVudHMgdGhhdCB0cmlnZ2VyIHRoZSBldmVudC4gSWYgdGhlIHNlbGVjdG9yIGlzIG51bGwgb3Igb21pdHRlZCwgdGhlIGV2ZW50IGlzIGFsd2F5cyB0cmlnZ2VyZWQgd2hlbiBpdCByZWFjaGVzIHRoZSBzZWxlY3RlZCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgdG8gYmUgcGFzc2VkIHRvIHRoZSBoYW5kbGVyIGluIGV2ZW50LmRhdGEgd2hlbiBhbiBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC4gVGhlIHZhbHVlIGZhbHNlIGlzIGFsc28gYWxsb3dlZCBhcyBhIHNob3J0aGFuZCBmb3IgYSBmdW5jdGlvbiB0aGF0IHNpbXBseSBkb2VzIHJldHVybiBmYWxzZS5cbiAgICAgKi9cbiAgICBvbmUoZXZlbnRzOiBzdHJpbmcsIHNlbGVjdG9yOiBzdHJpbmcsIGRhdGE6IGFueSwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgaGFuZGxlciB0byBhbiBldmVudCBmb3IgdGhlIGVsZW1lbnRzLiBUaGUgaGFuZGxlciBpcyBleGVjdXRlZCBhdCBtb3N0IG9uY2UgcGVyIGVsZW1lbnQgcGVyIGV2ZW50IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIEFuIG9iamVjdCBpbiB3aGljaCB0aGUgc3RyaW5nIGtleXMgcmVwcmVzZW50IG9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgYW5kIHRoZSB2YWx1ZXMgcmVwcmVzZW50IGEgaGFuZGxlciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIHRoZSBldmVudChzKS5cbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzZWxlY3RvciBzdHJpbmcgdG8gZmlsdGVyIHRoZSBkZXNjZW5kYW50cyBvZiB0aGUgc2VsZWN0ZWQgZWxlbWVudHMgdGhhdCB3aWxsIGNhbGwgdGhlIGhhbmRsZXIuIElmIHRoZSBzZWxlY3RvciBpcyBudWxsIG9yIG9taXR0ZWQsIHRoZSBoYW5kbGVyIGlzIGFsd2F5cyBjYWxsZWQgd2hlbiBpdCByZWFjaGVzIHRoZSBzZWxlY3RlZCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgdG8gYmUgcGFzc2VkIHRvIHRoZSBoYW5kbGVyIGluIGV2ZW50LmRhdGEgd2hlbiBhbiBldmVudCBvY2N1cnMuXG4gICAgICovXG4gICAgb25lKGV2ZW50czogeyBba2V5OiBzdHJpbmddOiBhbnk7IH0sIHNlbGVjdG9yPzogc3RyaW5nLCBkYXRhPzogYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgaGFuZGxlciB0byBhbiBldmVudCBmb3IgdGhlIGVsZW1lbnRzLiBUaGUgaGFuZGxlciBpcyBleGVjdXRlZCBhdCBtb3N0IG9uY2UgcGVyIGVsZW1lbnQgcGVyIGV2ZW50IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnRzIEFuIG9iamVjdCBpbiB3aGljaCB0aGUgc3RyaW5nIGtleXMgcmVwcmVzZW50IG9uZSBvciBtb3JlIHNwYWNlLXNlcGFyYXRlZCBldmVudCB0eXBlcyBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlcywgYW5kIHRoZSB2YWx1ZXMgcmVwcmVzZW50IGEgaGFuZGxlciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIHRoZSBldmVudChzKS5cbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIGJlIHBhc3NlZCB0byB0aGUgaGFuZGxlciBpbiBldmVudC5kYXRhIHdoZW4gYW4gZXZlbnQgb2NjdXJzLlxuICAgICAqL1xuICAgIG9uZShldmVudHM6IHsgW2tleTogc3RyaW5nXTogYW55OyB9LCBkYXRhPzogYW55KTogSlF1ZXJ5O1xuXG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGEgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBET00gaXMgZnVsbHkgbG9hZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGFmdGVyIHRoZSBET00gaXMgcmVhZHkuXG4gICAgICovXG4gICAgcmVhZHkoaGFuZGxlcjogRnVuY3Rpb24pOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcInJlc2l6ZVwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgcmVzaXplKCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwicmVzaXplXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICByZXNpemUoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJyZXNpemVcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBbiBvYmplY3QgY29udGFpbmluZyBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIHJlc2l6ZShldmVudERhdGE6IE9iamVjdCwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgXCJzY3JvbGxcIiBldmVudCBvbiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIHNjcm9sbCgpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcInNjcm9sbFwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgc2Nyb2xsKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwic2Nyb2xsXCIgSmF2YVNjcmlwdCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBzY3JvbGwoZXZlbnREYXRhOiBPYmplY3QsIGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgdGhlIFwic2VsZWN0XCIgZXZlbnQgb24gYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBzZWxlY3QoKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJzZWxlY3RcIiBKYXZhU2NyaXB0IGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIHNlbGVjdChoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcInNlbGVjdFwiIEphdmFTY3JpcHQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgc2VsZWN0KGV2ZW50RGF0YTogT2JqZWN0LCBoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBcInN1Ym1pdFwiIGV2ZW50IG9uIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgc3VibWl0KCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwic3VibWl0XCIgSmF2YVNjcmlwdCBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIHN1Ym1pdChoYW5kbGVyOiAoZXZlbnRPYmplY3Q6IEpRdWVyeUV2ZW50T2JqZWN0KSA9PiBhbnkpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBcInN1Ym1pdFwiIEphdmFTY3JpcHQgZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBlYWNoIHRpbWUgdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBzdWJtaXQoZXZlbnREYXRhPzogYW55LCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhbGwgaGFuZGxlcnMgYW5kIGJlaGF2aW9ycyBhdHRhY2hlZCB0byB0aGUgbWF0Y2hlZCBlbGVtZW50cyBmb3IgdGhlIGdpdmVuIGV2ZW50IHR5cGUuXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSBBIHN0cmluZyBjb250YWluaW5nIGEgSmF2YVNjcmlwdCBldmVudCB0eXBlLCBzdWNoIGFzIGNsaWNrIG9yIHN1Ym1pdC5cbiAgICAgKiBAcGFyYW0gZXh0cmFQYXJhbWV0ZXJzIEFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byBwYXNzIGFsb25nIHRvIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAqL1xuICAgIHRyaWdnZXIoZXZlbnRUeXBlOiBzdHJpbmcsIGV4dHJhUGFyYW1ldGVycz86IGFueVtdfE9iamVjdCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGFsbCBoYW5kbGVycyBhbmQgYmVoYXZpb3JzIGF0dGFjaGVkIHRvIHRoZSBtYXRjaGVkIGVsZW1lbnRzIGZvciB0aGUgZ2l2ZW4gZXZlbnQgdHlwZS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZXZlbnQgQSBqUXVlcnkuRXZlbnQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBleHRyYVBhcmFtZXRlcnMgQWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIHBhc3MgYWxvbmcgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICovXG4gICAgdHJpZ2dlcihldmVudDogSlF1ZXJ5RXZlbnRPYmplY3QsIGV4dHJhUGFyYW1ldGVycz86IGFueVtdfE9iamVjdCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYWxsIGhhbmRsZXJzIGF0dGFjaGVkIHRvIGFuIGVsZW1lbnQgZm9yIGFuIGV2ZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBldmVudFR5cGUgQSBzdHJpbmcgY29udGFpbmluZyBhIEphdmFTY3JpcHQgZXZlbnQgdHlwZSwgc3VjaCBhcyBjbGljayBvciBzdWJtaXQuXG4gICAgICogQHBhcmFtIGV4dHJhUGFyYW1ldGVycyBBbiBhcnJheSBvZiBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gcGFzcyBhbG9uZyB0byB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgKi9cbiAgICB0cmlnZ2VySGFuZGxlcihldmVudFR5cGU6IHN0cmluZywgLi4uZXh0cmFQYXJhbWV0ZXJzOiBhbnlbXSk6IE9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHByZXZpb3VzbHktYXR0YWNoZWQgZXZlbnQgaGFuZGxlciBmcm9tIHRoZSBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBKYXZhU2NyaXB0IGV2ZW50IHR5cGUsIHN1Y2ggYXMgY2xpY2sgb3Igc3VibWl0LlxuICAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBmdW5jdGlvbiB0aGF0IGlzIHRvIGJlIG5vIGxvbmdlciBleGVjdXRlZC5cbiAgICAgKi9cbiAgICB1bmJpbmQoZXZlbnRUeXBlPzogc3RyaW5nLCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHByZXZpb3VzbHktYXR0YWNoZWQgZXZlbnQgaGFuZGxlciBmcm9tIHRoZSBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBKYXZhU2NyaXB0IGV2ZW50IHR5cGUsIHN1Y2ggYXMgY2xpY2sgb3Igc3VibWl0LlxuICAgICAqIEBwYXJhbSBmbHMgVW5iaW5kcyB0aGUgY29ycmVzcG9uZGluZyAncmV0dXJuIGZhbHNlJyBmdW5jdGlvbiB0aGF0IHdhcyBib3VuZCB1c2luZyAuYmluZCggZXZlbnRUeXBlLCBmYWxzZSApLlxuICAgICAqL1xuICAgIHVuYmluZChldmVudFR5cGU6IHN0cmluZywgZmxzOiBib29sZWFuKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHByZXZpb3VzbHktYXR0YWNoZWQgZXZlbnQgaGFuZGxlciBmcm9tIHRoZSBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZXZ0IEEgSmF2YVNjcmlwdCBldmVudCBvYmplY3QgYXMgcGFzc2VkIHRvIGFuIGV2ZW50IGhhbmRsZXIuXG4gICAgICovXG4gICAgdW5iaW5kKGV2dDogYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgaGFuZGxlciBmcm9tIHRoZSBldmVudCBmb3IgYWxsIGVsZW1lbnRzIHdoaWNoIG1hdGNoIHRoZSBjdXJyZW50IHNlbGVjdG9yLCBiYXNlZCB1cG9uIGEgc3BlY2lmaWMgc2V0IG9mIHJvb3QgZWxlbWVudHMuXG4gICAgICovXG4gICAgdW5kZWxlZ2F0ZSgpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgaGFuZGxlciBmcm9tIHRoZSBldmVudCBmb3IgYWxsIGVsZW1lbnRzIHdoaWNoIG1hdGNoIHRoZSBjdXJyZW50IHNlbGVjdG9yLCBiYXNlZCB1cG9uIGEgc3BlY2lmaWMgc2V0IG9mIHJvb3QgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3Igd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGZpbHRlciB0aGUgZXZlbnQgcmVzdWx0cy5cbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBKYXZhU2NyaXB0IGV2ZW50IHR5cGUsIHN1Y2ggYXMgXCJjbGlja1wiIG9yIFwia2V5ZG93blwiXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIGF0IHRoZSB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgdW5kZWxlZ2F0ZShzZWxlY3Rvcjogc3RyaW5nLCBldmVudFR5cGU6IHN0cmluZywgaGFuZGxlcj86IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBoYW5kbGVyIGZyb20gdGhlIGV2ZW50IGZvciBhbGwgZWxlbWVudHMgd2hpY2ggbWF0Y2ggdGhlIGN1cnJlbnQgc2VsZWN0b3IsIGJhc2VkIHVwb24gYSBzcGVjaWZpYyBzZXQgb2Ygcm9vdCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzZWxlY3RvciB3aGljaCB3aWxsIGJlIHVzZWQgdG8gZmlsdGVyIHRoZSBldmVudCByZXN1bHRzLlxuICAgICAqIEBwYXJhbSBldmVudHMgQW4gb2JqZWN0IG9mIG9uZSBvciBtb3JlIGV2ZW50IHR5cGVzIGFuZCBwcmV2aW91c2x5IGJvdW5kIGZ1bmN0aW9ucyB0byB1bmJpbmQgZnJvbSB0aGVtLlxuICAgICAqL1xuICAgIHVuZGVsZWdhdGUoc2VsZWN0b3I6IHN0cmluZywgZXZlbnRzOiBPYmplY3QpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgaGFuZGxlciBmcm9tIHRoZSBldmVudCBmb3IgYWxsIGVsZW1lbnRzIHdoaWNoIG1hdGNoIHRoZSBjdXJyZW50IHNlbGVjdG9yLCBiYXNlZCB1cG9uIGEgc3BlY2lmaWMgc2V0IG9mIHJvb3QgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIG5hbWVzcGFjZSBBIHN0cmluZyBjb250YWluaW5nIGEgbmFtZXNwYWNlIHRvIHVuYmluZCBhbGwgZXZlbnRzIGZyb20uXG4gICAgICovXG4gICAgdW5kZWxlZ2F0ZShuYW1lc3BhY2U6IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJ1bmxvYWRcIiBKYXZhU2NyaXB0IGV2ZW50LiAoREVQUkVDQVRFRCBmcm9tIHYxLjgpXG4gICAgICogXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICB1bmxvYWQoaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJ1bmxvYWRcIiBKYXZhU2NyaXB0IGV2ZW50LiAoREVQUkVDQVRFRCBmcm9tIHYxLjgpXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBIHBsYWluIG9iamVjdCBvZiBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICB1bmxvYWQoZXZlbnREYXRhPzogYW55LCBoYW5kbGVyPzogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIERPTSBub2RlIGNvbnRleHQgb3JpZ2luYWxseSBwYXNzZWQgdG8galF1ZXJ5KCk7IGlmIG5vbmUgd2FzIHBhc3NlZCB0aGVuIGNvbnRleHQgd2lsbCBsaWtlbHkgYmUgdGhlIGRvY3VtZW50LiAoREVQUkVDQVRFRCBmcm9tIHYxLjEwKVxuICAgICAqL1xuICAgIGNvbnRleHQ6IEVsZW1lbnQ7XG5cbiAgICBqcXVlcnk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEJpbmQgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgXCJlcnJvclwiIEphdmFTY3JpcHQgZXZlbnQuIChERVBSRUNBVEVEIGZyb20gdjEuOClcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gaGFuZGxlciBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqL1xuICAgIGVycm9yKGhhbmRsZXI6IChldmVudE9iamVjdDogSlF1ZXJ5RXZlbnRPYmplY3QpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIFwiZXJyb3JcIiBKYXZhU2NyaXB0IGV2ZW50LiAoREVQUkVDQVRFRCBmcm9tIHYxLjgpXG4gICAgICogXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBIHBsYWluIG9iamVjdCBvZiBkYXRhIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgQSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICBlcnJvcihldmVudERhdGE6IGFueSwgaGFuZGxlcjogKGV2ZW50T2JqZWN0OiBKUXVlcnlFdmVudE9iamVjdCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY29sbGVjdGlvbiBvZiBET00gZWxlbWVudHMgb250byB0aGUgalF1ZXJ5IHN0YWNrLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBlbGVtZW50cyBBbiBhcnJheSBvZiBlbGVtZW50cyB0byBwdXNoIG9udG8gdGhlIHN0YWNrIGFuZCBtYWtlIGludG8gYSBuZXcgalF1ZXJ5IG9iamVjdC5cbiAgICAgKi9cbiAgICBwdXNoU3RhY2soZWxlbWVudHM6IGFueVtdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEFkZCBhIGNvbGxlY3Rpb24gb2YgRE9NIGVsZW1lbnRzIG9udG8gdGhlIGpRdWVyeSBzdGFjay5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZWxlbWVudHMgQW4gYXJyYXkgb2YgZWxlbWVudHMgdG8gcHVzaCBvbnRvIHRoZSBzdGFjayBhbmQgbWFrZSBpbnRvIGEgbmV3IGpRdWVyeSBvYmplY3QuXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgYSBqUXVlcnkgbWV0aG9kIHRoYXQgZ2VuZXJhdGVkIHRoZSBhcnJheSBvZiBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gYXJndW1lbnRzIFRoZSBhcmd1bWVudHMgdGhhdCB3ZXJlIHBhc3NlZCBpbiB0byB0aGUgalF1ZXJ5IG1ldGhvZCAoZm9yIHNlcmlhbGl6YXRpb24pLlxuICAgICAqL1xuICAgIHB1c2hTdGFjayhlbGVtZW50czogYW55W10sIG5hbWU6IHN0cmluZywgYXJndW1lbnRzOiBhbnlbXSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEluc2VydCBjb250ZW50LCBzcGVjaWZpZWQgYnkgdGhlIHBhcmFtZXRlciwgYWZ0ZXIgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBjb250ZW50MSBIVE1MIHN0cmluZywgRE9NIGVsZW1lbnQsIGFycmF5IG9mIGVsZW1lbnRzLCBvciBqUXVlcnkgb2JqZWN0IHRvIGluc2VydCBhZnRlciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIHBhcmFtIGNvbnRlbnQyIE9uZSBvciBtb3JlIGFkZGl0aW9uYWwgRE9NIGVsZW1lbnRzLCBhcnJheXMgb2YgZWxlbWVudHMsIEhUTUwgc3RyaW5ncywgb3IgalF1ZXJ5IG9iamVjdHMgdG8gaW5zZXJ0IGFmdGVyIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgYWZ0ZXIoY29udGVudDE6IEpRdWVyeXxhbnlbXXxFbGVtZW50fFRleHR8c3RyaW5nLCAuLi5jb250ZW50MjogYW55W10pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGNvbnRlbnQsIHNwZWNpZmllZCBieSB0aGUgcGFyYW1ldGVyLCBhZnRlciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gSFRNTCBzdHJpbmcsIERPTSBlbGVtZW50KHMpLCBvciBqUXVlcnkgb2JqZWN0IHRvIGluc2VydCBhZnRlciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhcyBhbiBhcmd1bWVudC4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgc2V0LlxuICAgICAqL1xuICAgIGFmdGVyKGZ1bmM6IChpbmRleDogbnVtYmVyLCBodG1sOiBzdHJpbmcpID0+IHN0cmluZ3xFbGVtZW50fEpRdWVyeSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEluc2VydCBjb250ZW50LCBzcGVjaWZpZWQgYnkgdGhlIHBhcmFtZXRlciwgdG8gdGhlIGVuZCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIHBhcmFtIGNvbnRlbnQxIERPTSBlbGVtZW50LCBhcnJheSBvZiBlbGVtZW50cywgSFRNTCBzdHJpbmcsIG9yIGpRdWVyeSBvYmplY3QgdG8gaW5zZXJ0IGF0IHRoZSBlbmQgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBwYXJhbSBjb250ZW50MiBPbmUgb3IgbW9yZSBhZGRpdGlvbmFsIERPTSBlbGVtZW50cywgYXJyYXlzIG9mIGVsZW1lbnRzLCBIVE1MIHN0cmluZ3MsIG9yIGpRdWVyeSBvYmplY3RzIHRvIGluc2VydCBhdCB0aGUgZW5kIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgYXBwZW5kKGNvbnRlbnQxOiBKUXVlcnl8YW55W118RWxlbWVudHxUZXh0fHN0cmluZywgLi4uY29udGVudDI6IGFueVtdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEluc2VydCBjb250ZW50LCBzcGVjaWZpZWQgYnkgdGhlIHBhcmFtZXRlciwgdG8gdGhlIGVuZCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gSFRNTCBzdHJpbmcsIERPTSBlbGVtZW50KHMpLCBvciBqUXVlcnkgb2JqZWN0IHRvIGluc2VydCBhdCB0aGUgZW5kIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIEhUTUwgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYXMgYXJndW1lbnRzLiBXaXRoaW4gdGhlIGZ1bmN0aW9uLCB0aGlzIHJlZmVycyB0byB0aGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBzZXQuXG4gICAgICovXG4gICAgYXBwZW5kKGZ1bmM6IChpbmRleDogbnVtYmVyLCBodG1sOiBzdHJpbmcpID0+IHN0cmluZ3xFbGVtZW50fEpRdWVyeSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEluc2VydCBldmVyeSBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aGUgZW5kIG9mIHRoZSB0YXJnZXQuXG4gICAgICogXG4gICAgICogQHBhcmFtIHRhcmdldCBBIHNlbGVjdG9yLCBlbGVtZW50LCBIVE1MIHN0cmluZywgYXJyYXkgb2YgZWxlbWVudHMsIG9yIGpRdWVyeSBvYmplY3Q7IHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50cyB3aWxsIGJlIGluc2VydGVkIGF0IHRoZSBlbmQgb2YgdGhlIGVsZW1lbnQocykgc3BlY2lmaWVkIGJ5IHRoaXMgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGFwcGVuZFRvKHRhcmdldDogSlF1ZXJ5fGFueVtdfEVsZW1lbnR8c3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGNvbnRlbnQsIHNwZWNpZmllZCBieSB0aGUgcGFyYW1ldGVyLCBiZWZvcmUgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBjb250ZW50MSBIVE1MIHN0cmluZywgRE9NIGVsZW1lbnQsIGFycmF5IG9mIGVsZW1lbnRzLCBvciBqUXVlcnkgb2JqZWN0IHRvIGluc2VydCBiZWZvcmUgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBwYXJhbSBjb250ZW50MiBPbmUgb3IgbW9yZSBhZGRpdGlvbmFsIERPTSBlbGVtZW50cywgYXJyYXlzIG9mIGVsZW1lbnRzLCBIVE1MIHN0cmluZ3MsIG9yIGpRdWVyeSBvYmplY3RzIHRvIGluc2VydCBiZWZvcmUgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBiZWZvcmUoY29udGVudDE6IEpRdWVyeXxhbnlbXXxFbGVtZW50fFRleHR8c3RyaW5nLCAuLi5jb250ZW50MjogYW55W10pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGNvbnRlbnQsIHNwZWNpZmllZCBieSB0aGUgcGFyYW1ldGVyLCBiZWZvcmUgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIEhUTUwgc3RyaW5nLCBET00gZWxlbWVudChzKSwgb3IgalF1ZXJ5IG9iamVjdCB0byBpbnNlcnQgYmVmb3JlIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFzIGFuIGFyZ3VtZW50LiBXaXRoaW4gdGhlIGZ1bmN0aW9uLCB0aGlzIHJlZmVycyB0byB0aGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBzZXQuXG4gICAgICovXG4gICAgYmVmb3JlKGZ1bmM6IChpbmRleDogbnVtYmVyLCBodG1sOiBzdHJpbmcpID0+IHN0cmluZ3xFbGVtZW50fEpRdWVyeSk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRlZXAgY29weSBvZiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogcGFyYW0gd2l0aERhdGFBbmRFdmVudHMgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciBldmVudCBoYW5kbGVycyBhbmQgZGF0YSBzaG91bGQgYmUgY29waWVkIGFsb25nIHdpdGggdGhlIGVsZW1lbnRzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICAgKiBwYXJhbSBkZWVwV2l0aERhdGFBbmRFdmVudHMgQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciBldmVudCBoYW5kbGVycyBhbmQgZGF0YSBmb3IgYWxsIGNoaWxkcmVuIG9mIHRoZSBjbG9uZWQgZWxlbWVudCBzaG91bGQgYmUgY29waWVkLiBCeSBkZWZhdWx0IGl0cyB2YWx1ZSBtYXRjaGVzIHRoZSBmaXJzdCBhcmd1bWVudCdzIHZhbHVlICh3aGljaCBkZWZhdWx0cyB0byBmYWxzZSkuXG4gICAgICovXG4gICAgY2xvbmUod2l0aERhdGFBbmRFdmVudHM/OiBib29sZWFuLCBkZWVwV2l0aERhdGFBbmRFdmVudHM/OiBib29sZWFuKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHRoZSBET00uXG4gICAgICogXG4gICAgICogcGFyYW0gc2VsZWN0b3IgQSBzZWxlY3RvciBleHByZXNzaW9uIHRoYXQgZmlsdGVycyB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gYmUgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZXRhY2goc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGNoaWxkIG5vZGVzIG9mIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHRoZSBET00uXG4gICAgICovXG4gICAgZW1wdHkoKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIGFmdGVyIHRoZSB0YXJnZXQuXG4gICAgICogXG4gICAgICogcGFyYW0gdGFyZ2V0IEEgc2VsZWN0b3IsIGVsZW1lbnQsIGFycmF5IG9mIGVsZW1lbnRzLCBIVE1MIHN0cmluZywgb3IgalF1ZXJ5IG9iamVjdDsgdGhlIG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzIHdpbGwgYmUgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIGVsZW1lbnQocykgc3BlY2lmaWVkIGJ5IHRoaXMgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGluc2VydEFmdGVyKHRhcmdldDogSlF1ZXJ5fGFueVtdfEVsZW1lbnR8VGV4dHxzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgZXZlcnkgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgYmVmb3JlIHRoZSB0YXJnZXQuXG4gICAgICogXG4gICAgICogcGFyYW0gdGFyZ2V0IEEgc2VsZWN0b3IsIGVsZW1lbnQsIGFycmF5IG9mIGVsZW1lbnRzLCBIVE1MIHN0cmluZywgb3IgalF1ZXJ5IG9iamVjdDsgdGhlIG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzIHdpbGwgYmUgaW5zZXJ0ZWQgYmVmb3JlIHRoZSBlbGVtZW50KHMpIHNwZWNpZmllZCBieSB0aGlzIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBpbnNlcnRCZWZvcmUodGFyZ2V0OiBKUXVlcnl8YW55W118RWxlbWVudHxUZXh0fHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEluc2VydCBjb250ZW50LCBzcGVjaWZpZWQgYnkgdGhlIHBhcmFtZXRlciwgdG8gdGhlIGJlZ2lubmluZyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIHBhcmFtIGNvbnRlbnQxIERPTSBlbGVtZW50LCBhcnJheSBvZiBlbGVtZW50cywgSFRNTCBzdHJpbmcsIG9yIGpRdWVyeSBvYmplY3QgdG8gaW5zZXJ0IGF0IHRoZSBiZWdpbm5pbmcgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBwYXJhbSBjb250ZW50MiBPbmUgb3IgbW9yZSBhZGRpdGlvbmFsIERPTSBlbGVtZW50cywgYXJyYXlzIG9mIGVsZW1lbnRzLCBIVE1MIHN0cmluZ3MsIG9yIGpRdWVyeSBvYmplY3RzIHRvIGluc2VydCBhdCB0aGUgYmVnaW5uaW5nIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgcHJlcGVuZChjb250ZW50MTogSlF1ZXJ5fGFueVtdfEVsZW1lbnR8VGV4dHxzdHJpbmcsIC4uLmNvbnRlbnQyOiBhbnlbXSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBJbnNlcnQgY29udGVudCwgc3BlY2lmaWVkIGJ5IHRoZSBwYXJhbWV0ZXIsIHRvIHRoZSBiZWdpbm5pbmcgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIEhUTUwgc3RyaW5nLCBET00gZWxlbWVudChzKSwgb3IgalF1ZXJ5IG9iamVjdCB0byBpbnNlcnQgYXQgdGhlIGJlZ2lubmluZyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhbmQgdGhlIG9sZCBIVE1MIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFzIGFyZ3VtZW50cy4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgc2V0LlxuICAgICAqL1xuICAgIHByZXBlbmQoZnVuYzogKGluZGV4OiBudW1iZXIsIGh0bWw6IHN0cmluZykgPT4gc3RyaW5nfEVsZW1lbnR8SlF1ZXJ5KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHRhcmdldC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IEEgc2VsZWN0b3IsIGVsZW1lbnQsIEhUTUwgc3RyaW5nLCBhcnJheSBvZiBlbGVtZW50cywgb3IgalF1ZXJ5IG9iamVjdDsgdGhlIG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzIHdpbGwgYmUgaW5zZXJ0ZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgZWxlbWVudChzKSBzcGVjaWZpZWQgYnkgdGhpcyBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgcHJlcGVuZFRvKHRhcmdldDogSlF1ZXJ5fGFueVtdfEVsZW1lbnR8c3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHRoZSBET00uXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0aGF0IGZpbHRlcnMgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIGJlIHJlbW92ZWQuXG4gICAgICovXG4gICAgcmVtb3ZlKHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBlYWNoIHRhcmdldCBlbGVtZW50IHdpdGggdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB0YXJnZXQgQSBzZWxlY3RvciBzdHJpbmcsIGpRdWVyeSBvYmplY3QsIERPTSBlbGVtZW50LCBvciBhcnJheSBvZiBlbGVtZW50cyBpbmRpY2F0aW5nIHdoaWNoIGVsZW1lbnQocykgdG8gcmVwbGFjZS5cbiAgICAgKi9cbiAgICByZXBsYWNlQWxsKHRhcmdldDogSlF1ZXJ5fGFueVtdfEVsZW1lbnR8c3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHdpdGggdGhlIHByb3ZpZGVkIG5ldyBjb250ZW50IGFuZCByZXR1cm4gdGhlIHNldCBvZiBlbGVtZW50cyB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqIFxuICAgICAqIHBhcmFtIG5ld0NvbnRlbnQgVGhlIGNvbnRlbnQgdG8gaW5zZXJ0LiBNYXkgYmUgYW4gSFRNTCBzdHJpbmcsIERPTSBlbGVtZW50LCBhcnJheSBvZiBET00gZWxlbWVudHMsIG9yIGpRdWVyeSBvYmplY3QuXG4gICAgICovXG4gICAgcmVwbGFjZVdpdGgobmV3Q29udGVudDogSlF1ZXJ5fGFueVtdfEVsZW1lbnR8VGV4dHxzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHdpdGggdGhlIHByb3ZpZGVkIG5ldyBjb250ZW50IGFuZCByZXR1cm4gdGhlIHNldCBvZiBlbGVtZW50cyB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqIFxuICAgICAqIHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgY29udGVudCB3aXRoIHdoaWNoIHRvIHJlcGxhY2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIHJlcGxhY2VXaXRoKGZ1bmM6ICgpID0+IEVsZW1lbnR8SlF1ZXJ5KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjb21iaW5lZCB0ZXh0IGNvbnRlbnRzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGluY2x1ZGluZyB0aGVpciBkZXNjZW5kYW50cy5cbiAgICAgKi9cbiAgICB0ZXh0KCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNvbnRlbnQgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aGUgc3BlY2lmaWVkIHRleHQuXG4gICAgICogXG4gICAgICogQHBhcmFtIHRleHQgVGhlIHRleHQgdG8gc2V0IGFzIHRoZSBjb250ZW50IG9mIGVhY2ggbWF0Y2hlZCBlbGVtZW50LiBXaGVuIE51bWJlciBvciBCb29sZWFuIGlzIHN1cHBsaWVkLCBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cbiAgICB0ZXh0KHRleHQ6IHN0cmluZ3xudW1iZXJ8Ym9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNvbnRlbnQgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aGUgc3BlY2lmaWVkIHRleHQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIHRleHQgY29udGVudCB0byBzZXQuIFJlY2VpdmVzIHRoZSBpbmRleCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IGFuZCB0aGUgb2xkIHRleHQgdmFsdWUgYXMgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIHRleHQoZnVuYzogKGluZGV4OiBudW1iZXIsIHRleHQ6IHN0cmluZykgPT4gc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYWxsIHRoZSBlbGVtZW50cyBjb250YWluZWQgaW4gdGhlIGpRdWVyeSBzZXQsIGFzIGFuIGFycmF5LlxuICAgICAqL1xuICAgIHRvQXJyYXkoKTogYW55W107XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIHBhcmVudHMgb2YgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIGZyb20gdGhlIERPTSwgbGVhdmluZyB0aGUgbWF0Y2hlZCBlbGVtZW50cyBpbiB0aGVpciBwbGFjZS5cbiAgICAgKi9cbiAgICB1bndyYXAoKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogV3JhcCBhbiBIVE1MIHN0cnVjdHVyZSBhcm91bmQgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gd3JhcHBpbmdFbGVtZW50IEEgc2VsZWN0b3IsIGVsZW1lbnQsIEhUTUwgc3RyaW5nLCBvciBqUXVlcnkgb2JqZWN0IHNwZWNpZnlpbmcgdGhlIHN0cnVjdHVyZSB0byB3cmFwIGFyb3VuZCB0aGUgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICB3cmFwKHdyYXBwaW5nRWxlbWVudDogSlF1ZXJ5fEVsZW1lbnR8c3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFdyYXAgYW4gSFRNTCBzdHJ1Y3R1cmUgYXJvdW5kIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGZ1bmMgQSBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIEhUTUwgY29udGVudCBvciBqUXVlcnkgb2JqZWN0IHRvIHdyYXAgYXJvdW5kIHRoZSBtYXRjaGVkIGVsZW1lbnRzLiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhcyBhbiBhcmd1bWVudC4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgc2V0LlxuICAgICAqL1xuICAgIHdyYXAoZnVuYzogKGluZGV4OiBudW1iZXIpID0+IHN0cmluZ3xKUXVlcnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBXcmFwIGFuIEhUTUwgc3RydWN0dXJlIGFyb3VuZCBhbGwgZWxlbWVudHMgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB3cmFwcGluZ0VsZW1lbnQgQSBzZWxlY3RvciwgZWxlbWVudCwgSFRNTCBzdHJpbmcsIG9yIGpRdWVyeSBvYmplY3Qgc3BlY2lmeWluZyB0aGUgc3RydWN0dXJlIHRvIHdyYXAgYXJvdW5kIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIHdyYXBBbGwod3JhcHBpbmdFbGVtZW50OiBKUXVlcnl8RWxlbWVudHxzdHJpbmcpOiBKUXVlcnk7XG4gICAgd3JhcEFsbChmdW5jOiAoaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogV3JhcCBhbiBIVE1MIHN0cnVjdHVyZSBhcm91bmQgdGhlIGNvbnRlbnQgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gd3JhcHBpbmdFbGVtZW50IEFuIEhUTUwgc25pcHBldCwgc2VsZWN0b3IgZXhwcmVzc2lvbiwgalF1ZXJ5IG9iamVjdCwgb3IgRE9NIGVsZW1lbnQgc3BlY2lmeWluZyB0aGUgc3RydWN0dXJlIHRvIHdyYXAgYXJvdW5kIHRoZSBjb250ZW50IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIHdyYXBJbm5lcih3cmFwcGluZ0VsZW1lbnQ6IEpRdWVyeXxFbGVtZW50fHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBXcmFwIGFuIEhUTUwgc3RydWN0dXJlIGFyb3VuZCB0aGUgY29udGVudCBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmdW5jIEEgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIGEgc3RydWN0dXJlIHRvIHdyYXAgYXJvdW5kIHRoZSBjb250ZW50IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnRzLiBSZWNlaXZlcyB0aGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNldCBhcyBhbiBhcmd1bWVudC4gV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgc2V0LlxuICAgICAqL1xuICAgIHdyYXBJbm5lcihmdW5jOiAoaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZSBvdmVyIGEgalF1ZXJ5IG9iamVjdCwgZXhlY3V0aW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBmb3IgZWFjaCBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICovXG4gICAgZWFjaChmdW5jOiAoaW5kZXg6IG51bWJlciwgZWxlbTogRWxlbWVudCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgb25lIG9mIHRoZSBlbGVtZW50cyBtYXRjaGVkIGJ5IHRoZSBqUXVlcnkgb2JqZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBpbmRleCBBIHplcm8tYmFzZWQgaW50ZWdlciBpbmRpY2F0aW5nIHdoaWNoIGVsZW1lbnQgdG8gcmV0cmlldmUuXG4gICAgICovXG4gICAgZ2V0KGluZGV4OiBudW1iZXIpOiBIVE1MRWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgZWxlbWVudHMgbWF0Y2hlZCBieSB0aGUgalF1ZXJ5IG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXQoKTogYW55W107XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggZm9yIGEgZ2l2ZW4gZWxlbWVudCBmcm9tIGFtb25nIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGluZGV4KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTZWFyY2ggZm9yIGEgZ2l2ZW4gZWxlbWVudCBmcm9tIGFtb25nIHRoZSBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHNlbGVjdG9yIHJlcHJlc2VudGluZyBhIGpRdWVyeSBjb2xsZWN0aW9uIGluIHdoaWNoIHRvIGxvb2sgZm9yIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgaW5kZXgoc2VsZWN0b3I6IHN0cmluZ3xKUXVlcnl8RWxlbWVudCk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGpRdWVyeSBvYmplY3QuXG4gICAgICovXG4gICAgbGVuZ3RoOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQSBzZWxlY3RvciByZXByZXNlbnRpbmcgc2VsZWN0b3IgcGFzc2VkIHRvIGpRdWVyeSgpLCBpZiBhbnksIHdoZW4gY3JlYXRpbmcgdGhlIG9yaWdpbmFsIHNldC5cbiAgICAgKiB2ZXJzaW9uIGRlcHJlY2F0ZWQ6IDEuNywgcmVtb3ZlZDogMS45XG4gICAgICovXG4gICAgc2VsZWN0b3I6IHN0cmluZztcbiAgICBbaW5kZXg6IHN0cmluZ106IGFueTtcbiAgICBbaW5kZXg6IG51bWJlcl06IEhUTUxFbGVtZW50O1xuXG4gICAgLyoqXG4gICAgICogQWRkIGVsZW1lbnRzIHRvIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBmaW5kIGFkZGl0aW9uYWwgZWxlbWVudHMgdG8gYWRkIHRvIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gY29udGV4dCBUaGUgcG9pbnQgaW4gdGhlIGRvY3VtZW50IGF0IHdoaWNoIHRoZSBzZWxlY3RvciBzaG91bGQgYmVnaW4gbWF0Y2hpbmc7IHNpbWlsYXIgdG8gdGhlIGNvbnRleHQgYXJndW1lbnQgb2YgdGhlICQoc2VsZWN0b3IsIGNvbnRleHQpIG1ldGhvZC5cbiAgICAgKi9cbiAgICBhZGQoc2VsZWN0b3I6IHN0cmluZywgY29udGV4dD86IEVsZW1lbnQpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogQWRkIGVsZW1lbnRzIHRvIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZWxlbWVudHMgT25lIG9yIG1vcmUgZWxlbWVudHMgdG8gYWRkIHRvIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBhZGQoLi4uZWxlbWVudHM6IEVsZW1lbnRbXSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBBZGQgZWxlbWVudHMgdG8gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBodG1sIEFuIEhUTUwgZnJhZ21lbnQgdG8gYWRkIHRvIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBhZGQoaHRtbDogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEFkZCBlbGVtZW50cyB0byB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iaiBBbiBleGlzdGluZyBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0byB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgYWRkKG9iajogSlF1ZXJ5KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjaGlsZHJlbiBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBvcHRpb25hbGx5IGZpbHRlcmVkIGJ5IGEgc2VsZWN0b3IuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgY2hpbGRyZW4oc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgY2xvc2VzdChzZWxlY3Rvcjogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCwgZ2V0IHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgc2VsZWN0b3IgYnkgdGVzdGluZyB0aGUgZWxlbWVudCBpdHNlbGYgYW5kIHRyYXZlcnNpbmcgdXAgdGhyb3VnaCBpdHMgYW5jZXN0b3JzIGluIHRoZSBET00gdHJlZS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCBBIERPTSBlbGVtZW50IHdpdGhpbiB3aGljaCBhIG1hdGNoaW5nIGVsZW1lbnQgbWF5IGJlIGZvdW5kLiBJZiBubyBjb250ZXh0IGlzIHBhc3NlZCBpbiB0aGVuIHRoZSBjb250ZXh0IG9mIHRoZSBqUXVlcnkgc2V0IHdpbGwgYmUgdXNlZCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGNsb3Nlc3Qoc2VsZWN0b3I6IHN0cmluZywgY29udGV4dD86IEVsZW1lbnQpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBieSB0ZXN0aW5nIHRoZSBlbGVtZW50IGl0c2VsZiBhbmQgdHJhdmVyc2luZyB1cCB0aHJvdWdoIGl0cyBhbmNlc3RvcnMgaW4gdGhlIERPTSB0cmVlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQSBqUXVlcnkgb2JqZWN0IHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgY2xvc2VzdChvYmo6IEpRdWVyeSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnQgQW4gZWxlbWVudCB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGNsb3Nlc3QoZWxlbWVudDogRWxlbWVudCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCBhbiBhcnJheSBvZiBhbGwgdGhlIGVsZW1lbnRzIGFuZCBzZWxlY3RvcnMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBjdXJyZW50IGVsZW1lbnQgdXAgdGhyb3VnaCB0aGUgRE9NIHRyZWUuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9ycyBBbiBhcnJheSBvciBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdCAoY2FuIGFsc28gYmUgYSBqUXVlcnkgb2JqZWN0KS5cbiAgICAgKiBAcGFyYW0gY29udGV4dCBBIERPTSBlbGVtZW50IHdpdGhpbiB3aGljaCBhIG1hdGNoaW5nIGVsZW1lbnQgbWF5IGJlIGZvdW5kLiBJZiBubyBjb250ZXh0IGlzIHBhc3NlZCBpbiB0aGVuIHRoZSBjb250ZXh0IG9mIHRoZSBqUXVlcnkgc2V0IHdpbGwgYmUgdXNlZCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGNsb3Nlc3Qoc2VsZWN0b3JzOiBhbnksIGNvbnRleHQ/OiBFbGVtZW50KTogYW55W107XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNoaWxkcmVuIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGluY2x1ZGluZyB0ZXh0IGFuZCBjb21tZW50IG5vZGVzLlxuICAgICAqL1xuICAgIGNvbnRlbnRzKCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEVuZCB0aGUgbW9zdCByZWNlbnQgZmlsdGVyaW5nIG9wZXJhdGlvbiBpbiB0aGUgY3VycmVudCBjaGFpbiBhbmQgcmV0dXJuIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byBpdHMgcHJldmlvdXMgc3RhdGUuXG4gICAgICovXG4gICAgZW5kKCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gdGhlIG9uZSBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBpbmRleCBBbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIDAtYmFzZWQgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQuIE9SIEFuIGludGVnZXIgaW5kaWNhdGluZyB0aGUgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQsIGNvdW50aW5nIGJhY2t3YXJkcyBmcm9tIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIHNldC5cbiAgICAgKiAgXG4gICAgICovXG4gICAgZXEoaW5kZXg6IG51bWJlcik6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gdGhvc2UgdGhhdCBtYXRjaCB0aGUgc2VsZWN0b3Igb3IgcGFzcyB0aGUgZnVuY3Rpb24ncyB0ZXN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCB0aGUgY3VycmVudCBzZXQgb2YgZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBmaWx0ZXIoc2VsZWN0b3I6IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRob3NlIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9yIG9yIHBhc3MgdGhlIGZ1bmN0aW9uJ3MgdGVzdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZnVuYyBBIGZ1bmN0aW9uIHVzZWQgYXMgYSB0ZXN0IGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldC4gdGhpcyBpcyB0aGUgY3VycmVudCBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmaWx0ZXIoZnVuYzogKGluZGV4OiBudW1iZXIsIGVsZW1lbnQ6IEVsZW1lbnQpID0+IGFueSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRob3NlIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9yIG9yIHBhc3MgdGhlIGZ1bmN0aW9uJ3MgdGVzdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBBbiBlbGVtZW50IHRvIG1hdGNoIHRoZSBjdXJyZW50IHNldCBvZiBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGZpbHRlcihlbGVtZW50OiBFbGVtZW50KTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlZHVjZSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gdGhvc2UgdGhhdCBtYXRjaCB0aGUgc2VsZWN0b3Igb3IgcGFzcyB0aGUgZnVuY3Rpb24ncyB0ZXN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQW4gZXhpc3RpbmcgalF1ZXJ5IG9iamVjdCB0byBtYXRjaCB0aGUgY3VycmVudCBzZXQgb2YgZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBmaWx0ZXIob2JqOiBKUXVlcnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRlc2NlbmRhbnRzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgZmlsdGVyZWQgYnkgYSBzZWxlY3RvciwgalF1ZXJ5IG9iamVjdCwgb3IgZWxlbWVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBmaW5kKHNlbGVjdG9yOiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZXNjZW5kYW50cyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnQgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIGZpbHRlcmVkIGJ5IGEgc2VsZWN0b3IsIGpRdWVyeSBvYmplY3QsIG9yIGVsZW1lbnQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnQgQW4gZWxlbWVudCB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGZpbmQoZWxlbWVudDogRWxlbWVudCk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRlc2NlbmRhbnRzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgZmlsdGVyZWQgYnkgYSBzZWxlY3RvciwgalF1ZXJ5IG9iamVjdCwgb3IgZWxlbWVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIEEgalF1ZXJ5IG9iamVjdCB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGZpbmQob2JqOiBKUXVlcnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRoZSBmaXJzdCBpbiB0aGUgc2V0LlxuICAgICAqL1xuICAgIGZpcnN0KCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gdGhvc2UgdGhhdCBoYXZlIGEgZGVzY2VuZGFudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIG9yIERPTSBlbGVtZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGhhcyhzZWxlY3Rvcjogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIFJlZHVjZSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gdGhvc2UgdGhhdCBoYXZlIGEgZGVzY2VuZGFudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIG9yIERPTSBlbGVtZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBjb250YWluZWQgQSBET00gZWxlbWVudCB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIGhhcyhjb250YWluZWQ6IEVsZW1lbnQpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgY3VycmVudCBtYXRjaGVkIHNldCBvZiBlbGVtZW50cyBhZ2FpbnN0IGEgc2VsZWN0b3IsIGVsZW1lbnQsIG9yIGpRdWVyeSBvYmplY3QgYW5kIHJldHVybiB0cnVlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGVzZSBlbGVtZW50cyBtYXRjaGVzIHRoZSBnaXZlbiBhcmd1bWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgaXMoc2VsZWN0b3I6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIGN1cnJlbnQgbWF0Y2hlZCBzZXQgb2YgZWxlbWVudHMgYWdhaW5zdCBhIHNlbGVjdG9yLCBlbGVtZW50LCBvciBqUXVlcnkgb2JqZWN0IGFuZCByZXR1cm4gdHJ1ZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlc2UgZWxlbWVudHMgbWF0Y2hlcyB0aGUgZ2l2ZW4gYXJndW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gdXNlZCBhcyBhIHRlc3QgZm9yIHRoZSBzZXQgb2YgZWxlbWVudHMuIEl0IGFjY2VwdHMgb25lIGFyZ3VtZW50LCBpbmRleCwgd2hpY2ggaXMgdGhlIGVsZW1lbnQncyBpbmRleCBpbiB0aGUgalF1ZXJ5IGNvbGxlY3Rpb24uV2l0aGluIHRoZSBmdW5jdGlvbiwgdGhpcyByZWZlcnMgdG8gdGhlIGN1cnJlbnQgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgaXMoZnVuYzogKGluZGV4OiBudW1iZXIsIGVsZW1lbnQ6IEVsZW1lbnQpID0+IGJvb2xlYW4pOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSBjdXJyZW50IG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzIGFnYWluc3QgYSBzZWxlY3RvciwgZWxlbWVudCwgb3IgalF1ZXJ5IG9iamVjdCBhbmQgcmV0dXJuIHRydWUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZXNlIGVsZW1lbnRzIG1hdGNoZXMgdGhlIGdpdmVuIGFyZ3VtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gb2JqIEFuIGV4aXN0aW5nIGpRdWVyeSBvYmplY3QgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgc2V0IG9mIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgaXMob2JqOiBKUXVlcnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSBjdXJyZW50IG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzIGFnYWluc3QgYSBzZWxlY3RvciwgZWxlbWVudCwgb3IgalF1ZXJ5IG9iamVjdCBhbmQgcmV0dXJuIHRydWUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZXNlIGVsZW1lbnRzIG1hdGNoZXMgdGhlIGdpdmVuIGFyZ3VtZW50cy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZWxlbWVudHMgT25lIG9yIG1vcmUgZWxlbWVudHMgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgc2V0IG9mIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgaXMoZWxlbWVudHM6IGFueSk6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRoZSBmaW5hbCBvbmUgaW4gdGhlIHNldC5cbiAgICAgKi9cbiAgICBsYXN0KCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFBhc3MgZWFjaCBlbGVtZW50IGluIHRoZSBjdXJyZW50IG1hdGNoZWQgc2V0IHRocm91Z2ggYSBmdW5jdGlvbiwgcHJvZHVjaW5nIGEgbmV3IGpRdWVyeSBvYmplY3QgY29udGFpbmluZyB0aGUgcmV0dXJuIHZhbHVlcy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBmdW5jdGlvbiBvYmplY3QgdGhhdCB3aWxsIGJlIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZXQuXG4gICAgICovXG4gICAgbWFwKGNhbGxiYWNrOiAoaW5kZXg6IG51bWJlciwgZG9tRWxlbWVudDogRWxlbWVudCkgPT4gYW55KTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpbW1lZGlhdGVseSBmb2xsb3dpbmcgc2libGluZyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLiBJZiBhIHNlbGVjdG9yIGlzIHByb3ZpZGVkLCBpdCByZXRyaWV2ZXMgdGhlIG5leHQgc2libGluZyBvbmx5IGlmIGl0IG1hdGNoZXMgdGhhdCBzZWxlY3Rvci5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBuZXh0KHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBmb2xsb3dpbmcgc2libGluZ3Mgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBhIHNlbGVjdG9yLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIG5leHRBbGwoc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIGZvbGxvd2luZyBzaWJsaW5ncyBvZiBlYWNoIGVsZW1lbnQgdXAgdG8gYnV0IG5vdCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgbWF0Y2hlZCBieSB0aGUgc2VsZWN0b3IsIERPTSBub2RlLCBvciBqUXVlcnkgb2JqZWN0IHBhc3NlZC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgd2hlcmUgdG8gc3RvcCBtYXRjaGluZyBmb2xsb3dpbmcgc2libGluZyBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgbmV4dFVudGlsKHNlbGVjdG9yPzogc3RyaW5nLCBmaWx0ZXI/OiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBmb2xsb3dpbmcgc2libGluZ3Mgb2YgZWFjaCBlbGVtZW50IHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG1hdGNoZWQgYnkgdGhlIHNlbGVjdG9yLCBET00gbm9kZSwgb3IgalF1ZXJ5IG9iamVjdCBwYXNzZWQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnQgQSBET00gbm9kZSBvciBqUXVlcnkgb2JqZWN0IGluZGljYXRpbmcgd2hlcmUgdG8gc3RvcCBtYXRjaGluZyBmb2xsb3dpbmcgc2libGluZyBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgbmV4dFVudGlsKGVsZW1lbnQ/OiBFbGVtZW50LCBmaWx0ZXI/OiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBmb2xsb3dpbmcgc2libGluZ3Mgb2YgZWFjaCBlbGVtZW50IHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG1hdGNoZWQgYnkgdGhlIHNlbGVjdG9yLCBET00gbm9kZSwgb3IgalF1ZXJ5IG9iamVjdCBwYXNzZWQuXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iaiBBIERPTSBub2RlIG9yIGpRdWVyeSBvYmplY3QgaW5kaWNhdGluZyB3aGVyZSB0byBzdG9wIG1hdGNoaW5nIGZvbGxvd2luZyBzaWJsaW5nIGVsZW1lbnRzLlxuICAgICAqIEBwYXJhbSBmaWx0ZXIgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBuZXh0VW50aWwob2JqPzogSlF1ZXJ5LCBmaWx0ZXI/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgbm90KHNlbGVjdG9yOiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBmdW5jIEEgZnVuY3Rpb24gdXNlZCBhcyBhIHRlc3QgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LiB0aGlzIGlzIHRoZSBjdXJyZW50IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIG5vdChmdW5jOiAoaW5kZXg6IG51bWJlciwgZWxlbWVudDogRWxlbWVudCkgPT4gYm9vbGVhbik6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnRzIE9uZSBvciBtb3JlIERPTSBlbGVtZW50cyB0byByZW1vdmUgZnJvbSB0aGUgbWF0Y2hlZCBzZXQuXG4gICAgICovXG4gICAgbm90KC4uLmVsZW1lbnRzOiBFbGVtZW50W10pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBvYmogQW4gZXhpc3RpbmcgalF1ZXJ5IG9iamVjdCB0byBtYXRjaCB0aGUgY3VycmVudCBzZXQgb2YgZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBub3Qob2JqOiBKUXVlcnkpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZWxlbWVudCB0aGF0IGlzIHBvc2l0aW9uZWQuXG4gICAgICovXG4gICAgb2Zmc2V0UGFyZW50KCk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcGFyZW50IG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBhIHNlbGVjdG9yLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIHBhcmVudChzZWxlY3Rvcj86IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYW5jZXN0b3JzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBhIHNlbGVjdG9yLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIHBhcmVudHMoc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFuY2VzdG9ycyBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnQgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG1hdGNoZWQgYnkgdGhlIHNlbGVjdG9yLCBET00gbm9kZSwgb3IgalF1ZXJ5IG9iamVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgd2hlcmUgdG8gc3RvcCBtYXRjaGluZyBhbmNlc3RvciBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgcGFyZW50c1VudGlsKHNlbGVjdG9yPzogc3RyaW5nLCBmaWx0ZXI/OiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbmNlc3RvcnMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBjdXJyZW50IHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCB1cCB0byBidXQgbm90IGluY2x1ZGluZyB0aGUgZWxlbWVudCBtYXRjaGVkIGJ5IHRoZSBzZWxlY3RvciwgRE9NIG5vZGUsIG9yIGpRdWVyeSBvYmplY3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIGVsZW1lbnQgQSBET00gbm9kZSBvciBqUXVlcnkgb2JqZWN0IGluZGljYXRpbmcgd2hlcmUgdG8gc3RvcCBtYXRjaGluZyBhbmNlc3RvciBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSBzZWxlY3RvciBleHByZXNzaW9uIHRvIG1hdGNoIGVsZW1lbnRzIGFnYWluc3QuXG4gICAgICovXG4gICAgcGFyZW50c1VudGlsKGVsZW1lbnQ/OiBFbGVtZW50LCBmaWx0ZXI/OiBzdHJpbmcpOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbmNlc3RvcnMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBjdXJyZW50IHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCB1cCB0byBidXQgbm90IGluY2x1ZGluZyB0aGUgZWxlbWVudCBtYXRjaGVkIGJ5IHRoZSBzZWxlY3RvciwgRE9NIG5vZGUsIG9yIGpRdWVyeSBvYmplY3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iaiBBIERPTSBub2RlIG9yIGpRdWVyeSBvYmplY3QgaW5kaWNhdGluZyB3aGVyZSB0byBzdG9wIG1hdGNoaW5nIGFuY2VzdG9yIGVsZW1lbnRzLlxuICAgICAqIEBwYXJhbSBmaWx0ZXIgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBwYXJlbnRzVW50aWwob2JqPzogSlF1ZXJ5LCBmaWx0ZXI/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGltbWVkaWF0ZWx5IHByZWNlZGluZyBzaWJsaW5nIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBwcmV2KHNlbGVjdG9yPzogc3RyaW5nKTogSlF1ZXJ5O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBwcmVjZWRpbmcgc2libGluZ3Mgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cywgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBhIHNlbGVjdG9yLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIHByZXZBbGwoc2VsZWN0b3I/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHByZWNlZGluZyBzaWJsaW5ncyBvZiBlYWNoIGVsZW1lbnQgdXAgdG8gYnV0IG5vdCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgbWF0Y2hlZCBieSB0aGUgc2VsZWN0b3IsIERPTSBub2RlLCBvciBqUXVlcnkgb2JqZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBzZWxlY3RvciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBpbmRpY2F0ZSB3aGVyZSB0byBzdG9wIG1hdGNoaW5nIHByZWNlZGluZyBzaWJsaW5nIGVsZW1lbnRzLlxuICAgICAqIEBwYXJhbSBmaWx0ZXIgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBwcmV2VW50aWwoc2VsZWN0b3I/OiBzdHJpbmcsIGZpbHRlcj86IHN0cmluZyk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHByZWNlZGluZyBzaWJsaW5ncyBvZiBlYWNoIGVsZW1lbnQgdXAgdG8gYnV0IG5vdCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgbWF0Y2hlZCBieSB0aGUgc2VsZWN0b3IsIERPTSBub2RlLCBvciBqUXVlcnkgb2JqZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBlbGVtZW50IEEgRE9NIG5vZGUgb3IgalF1ZXJ5IG9iamVjdCBpbmRpY2F0aW5nIHdoZXJlIHRvIHN0b3AgbWF0Y2hpbmcgcHJlY2VkaW5nIHNpYmxpbmcgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIGZpbHRlciBBIHN0cmluZyBjb250YWluaW5nIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiB0byBtYXRjaCBlbGVtZW50cyBhZ2FpbnN0LlxuICAgICAqL1xuICAgIHByZXZVbnRpbChlbGVtZW50PzogRWxlbWVudCwgZmlsdGVyPzogc3RyaW5nKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgcHJlY2VkaW5nIHNpYmxpbmdzIG9mIGVhY2ggZWxlbWVudCB1cCB0byBidXQgbm90IGluY2x1ZGluZyB0aGUgZWxlbWVudCBtYXRjaGVkIGJ5IHRoZSBzZWxlY3RvciwgRE9NIG5vZGUsIG9yIGpRdWVyeSBvYmplY3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iaiBBIERPTSBub2RlIG9yIGpRdWVyeSBvYmplY3QgaW5kaWNhdGluZyB3aGVyZSB0byBzdG9wIG1hdGNoaW5nIHByZWNlZGluZyBzaWJsaW5nIGVsZW1lbnRzLlxuICAgICAqIEBwYXJhbSBmaWx0ZXIgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBwcmV2VW50aWwob2JqPzogSlF1ZXJ5LCBmaWx0ZXI/OiBzdHJpbmcpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNpYmxpbmdzIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgQSBzdHJpbmcgY29udGFpbmluZyBhIHNlbGVjdG9yIGV4cHJlc3Npb24gdG8gbWF0Y2ggZWxlbWVudHMgYWdhaW5zdC5cbiAgICAgKi9cbiAgICBzaWJsaW5ncyhzZWxlY3Rvcj86IHN0cmluZyk6IEpRdWVyeTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZSB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gYSBzdWJzZXQgc3BlY2lmaWVkIGJ5IGEgcmFuZ2Ugb2YgaW5kaWNlcy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc3RhcnQgQW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSAwLWJhc2VkIHBvc2l0aW9uIGF0IHdoaWNoIHRoZSBlbGVtZW50cyBiZWdpbiB0byBiZSBzZWxlY3RlZC4gSWYgbmVnYXRpdmUsIGl0IGluZGljYXRlcyBhbiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIHRoZSBzZXQuXG4gICAgICogQHBhcmFtIGVuZCBBbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIDAtYmFzZWQgcG9zaXRpb24gYXQgd2hpY2ggdGhlIGVsZW1lbnRzIHN0b3AgYmVpbmcgc2VsZWN0ZWQuIElmIG5lZ2F0aXZlLCBpdCBpbmRpY2F0ZXMgYW4gb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiB0aGUgc2V0LiBJZiBvbWl0dGVkLCB0aGUgcmFuZ2UgY29udGludWVzIHVudGlsIHRoZSBlbmQgb2YgdGhlIHNldC5cbiAgICAgKi9cbiAgICBzbGljZShzdGFydDogbnVtYmVyLCBlbmQ/OiBudW1iZXIpOiBKUXVlcnk7XG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBxdWV1ZSBvZiBmdW5jdGlvbnMgdG8gYmUgZXhlY3V0ZWQgb24gdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gICAgICogXG4gICAgICogQHBhcmFtIHF1ZXVlTmFtZSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBxdWV1ZS4gRGVmYXVsdHMgdG8gZngsIHRoZSBzdGFuZGFyZCBlZmZlY3RzIHF1ZXVlLlxuICAgICAqL1xuICAgIHF1ZXVlKHF1ZXVlTmFtZT86IHN0cmluZyk6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIE1hbmlwdWxhdGUgdGhlIHF1ZXVlIG9mIGZ1bmN0aW9ucyB0byBiZSBleGVjdXRlZCwgb25jZSBmb3IgZWFjaCBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICogXG4gICAgICogQHBhcmFtIG5ld1F1ZXVlIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyB0byByZXBsYWNlIHRoZSBjdXJyZW50IHF1ZXVlIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHF1ZXVlKG5ld1F1ZXVlOiBGdW5jdGlvbltdKTogSlF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIE1hbmlwdWxhdGUgdGhlIHF1ZXVlIG9mIGZ1bmN0aW9ucyB0byBiZSBleGVjdXRlZCwgb25jZSBmb3IgZWFjaCBtYXRjaGVkIGVsZW1lbnQuXG4gICAgICogXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBuZXcgZnVuY3Rpb24gdG8gYWRkIHRvIHRoZSBxdWV1ZSwgd2l0aCBhIGZ1bmN0aW9uIHRvIGNhbGwgdGhhdCB3aWxsIGRlcXVldWUgdGhlIG5leHQgaXRlbS5cbiAgICAgKi9cbiAgICBxdWV1ZShjYWxsYmFjazogRnVuY3Rpb24pOiBKUXVlcnk7XG4gICAgLyoqXG4gICAgICogTWFuaXB1bGF0ZSB0aGUgcXVldWUgb2YgZnVuY3Rpb25zIHRvIGJlIGV4ZWN1dGVkLCBvbmNlIGZvciBlYWNoIG1hdGNoZWQgZWxlbWVudC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gcXVldWVOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHF1ZXVlLiBEZWZhdWx0cyB0byBmeCwgdGhlIHN0YW5kYXJkIGVmZmVjdHMgcXVldWUuXG4gICAgICogQHBhcmFtIG5ld1F1ZXVlIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyB0byByZXBsYWNlIHRoZSBjdXJyZW50IHF1ZXVlIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHF1ZXVlKHF1ZXVlTmFtZTogc3RyaW5nLCBuZXdRdWV1ZTogRnVuY3Rpb25bXSk6IEpRdWVyeTtcbiAgICAvKipcbiAgICAgKiBNYW5pcHVsYXRlIHRoZSBxdWV1ZSBvZiBmdW5jdGlvbnMgdG8gYmUgZXhlY3V0ZWQsIG9uY2UgZm9yIGVhY2ggbWF0Y2hlZCBlbGVtZW50LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBxdWV1ZU5hbWUgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgcXVldWUuIERlZmF1bHRzIHRvIGZ4LCB0aGUgc3RhbmRhcmQgZWZmZWN0cyBxdWV1ZS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIG5ldyBmdW5jdGlvbiB0byBhZGQgdG8gdGhlIHF1ZXVlLCB3aXRoIGEgZnVuY3Rpb24gdG8gY2FsbCB0aGF0IHdpbGwgZGVxdWV1ZSB0aGUgbmV4dCBpdGVtLlxuICAgICAqL1xuICAgIHF1ZXVlKHF1ZXVlTmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pOiBKUXVlcnk7XG59XG5kZWNsYXJlIG1vZHVsZSBcImpxdWVyeVwiIHtcbiAgICBleHBvcnQgPSAkO1xufVxuZGVjbGFyZSB2YXIgalF1ZXJ5OiBKUXVlcnlTdGF0aWM7XG5kZWNsYXJlIHZhciAkOiBKUXVlcnlTdGF0aWM7XG4iXX0=
//# sourceURL=/Users/anas/.atom/packages/atom-typescript/lib/typings/jquery/jquery.d.ts
