(function() {
  var Project;

  Project = require('../lib/project');

  describe("Project", function() {
    it("recieves default properties", function() {
      var project, properties;
      properties = {
        title: "Test",
        paths: ["/Users/"]
      };
      project = new Project(properties);
      return expect(project.props.icon).toBe('icon-chevron-right');
    });
    it("does not validate without proper properties", function() {
      var project, properties;
      properties = {
        title: "Test"
      };
      project = new Project(properties);
      return expect(project.isValid()).toBe(false);
    });
    it("automatically updates it's properties", function() {
      var project, props;
      props = {
        _id: 'test',
        title: "Test",
        paths: ["/Users/test"]
      };
      project = new Project(props);
      spyOn(project, 'updateProps').andCallThrough();
      spyOn(project.db, 'readFile').andCallFake(function(callback) {
        props = {
          test: {
            _id: 'test',
            title: "Test",
            paths: ["/Users/test"],
            icon: 'icon-test'
          }
        };
        return callback(props);
      });
      project.db.emitter.emit('db-updated');
      expect(project.updateProps).toHaveBeenCalled();
      return expect(project.props.icon).toBe('icon-test');
    });
    it("automatically updates it's properties even though key have changed", function() {
      var project, props;
      props = {
        _id: 'test',
        title: "Test",
        paths: ["/Users/test"]
      };
      project = new Project(props);
      spyOn(project, 'updateProps').andCallThrough();
      spyOn(project.db, 'readFile').andCallFake(function(callback) {
        props = {
          testtest: {
            _id: 'testtest',
            title: "Test",
            paths: ["/Users/test"],
            icon: 'icon-test'
          }
        };
        return callback(props);
      });
      expect(project.db.searchKey).toBe('_id');
      expect(project.db.searchValue).toBe('test');
      project.db.emitter.emit('db-updated');
      expect(project.updateProps).toHaveBeenCalled();
      expect(project.props._id).toBe('testtest');
      expect(project.props.icon).toBe('icon-test');
      expect(project.db.searchKey).toBe('_id');
      return expect(project.db.searchValue).toBe('testtest');
    });
    describe("::set/::unset", function() {
      var project;
      project = null;
      beforeEach(function() {
        project = new Project();
        spyOn(project.db, 'add').andCallFake(function(props, callback) {
          var id;
          id = props.title.replace(/\s+/g, '').toLowerCase();
          return typeof callback === "function" ? callback(id) : void 0;
        });
        return spyOn(project.db, 'update').andCallFake(function(props, callback) {
          return typeof callback === "function" ? callback() : void 0;
        });
      });
      return it("sets and unsets the value", function() {
        expect(project.props.title).toBe('');
        project.set('title', 'test');
        expect(project.props.title).toBe('test');
        project.unset('title');
        return expect(project.props.title).toBe('');
      });
    });
    return describe("::save", function() {
      var project;
      project = null;
      beforeEach(function() {
        project = new Project();
        spyOn(project.db, 'add').andCallFake(function(props, callback) {
          var id;
          id = props.title.replace(/\s+/g, '').toLowerCase();
          return typeof callback === "function" ? callback(id) : void 0;
        });
        return spyOn(project.db, 'update').andCallFake(function(props, callback) {
          return typeof callback === "function" ? callback() : void 0;
        });
      });
      it("does not save if not valid", function() {
        return expect(project.save()).toBe(false);
      });
      it("only saves settings that isn't default", function() {
        var props;
        props = {
          title: 'Test',
          paths: ['/Users/test']
        };
        project = new Project(props);
        return expect(project.getPropsToSave()).toEqual(props);
      });
      it("saves project if _id isn't set", function() {
        project.set('title', 'Test');
        project.set('paths', ["/Users/"]);
        expect(project.save()).toBe(true);
        expect(project.db.add).toHaveBeenCalled();
        return expect(project.props._id).toBe('test');
      });
      return it("updates project if _id is set", function() {
        project.set('title', 'Test');
        project.set('paths', ["/Users/"]);
        project.props._id = 'test';
        expect(project.save()).toBe(true);
        return expect(project.db.update).toHaveBeenCalled();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2FuYXMvLmF0b20vcGFja2FnZXMvcHJvamVjdC1tYW5hZ2VyL3NwZWMvcHJvamVjdC1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxPQUFBOztBQUFBLEVBQUEsT0FBQSxHQUFVLE9BQUEsQ0FBUSxnQkFBUixDQUFWLENBQUE7O0FBQUEsRUFFQSxRQUFBLENBQVMsU0FBVCxFQUFvQixTQUFBLEdBQUE7QUFDbEIsSUFBQSxFQUFBLENBQUcsNkJBQUgsRUFBa0MsU0FBQSxHQUFBO0FBQ2hDLFVBQUEsbUJBQUE7QUFBQSxNQUFBLFVBQUEsR0FDRTtBQUFBLFFBQUEsS0FBQSxFQUFPLE1BQVA7QUFBQSxRQUNBLEtBQUEsRUFBTyxDQUFDLFNBQUQsQ0FEUDtPQURGLENBQUE7QUFBQSxNQUdBLE9BQUEsR0FBYyxJQUFBLE9BQUEsQ0FBUSxVQUFSLENBSGQsQ0FBQTthQUtBLE1BQUEsQ0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQXJCLENBQTBCLENBQUMsSUFBM0IsQ0FBZ0Msb0JBQWhDLEVBTmdDO0lBQUEsQ0FBbEMsQ0FBQSxDQUFBO0FBQUEsSUFRQSxFQUFBLENBQUcsNkNBQUgsRUFBa0QsU0FBQSxHQUFBO0FBQ2hELFVBQUEsbUJBQUE7QUFBQSxNQUFBLFVBQUEsR0FDRTtBQUFBLFFBQUEsS0FBQSxFQUFPLE1BQVA7T0FERixDQUFBO0FBQUEsTUFFQSxPQUFBLEdBQWMsSUFBQSxPQUFBLENBQVEsVUFBUixDQUZkLENBQUE7YUFHQSxNQUFBLENBQU8sT0FBTyxDQUFDLE9BQVIsQ0FBQSxDQUFQLENBQXlCLENBQUMsSUFBMUIsQ0FBK0IsS0FBL0IsRUFKZ0Q7SUFBQSxDQUFsRCxDQVJBLENBQUE7QUFBQSxJQWNBLEVBQUEsQ0FBRyx1Q0FBSCxFQUE0QyxTQUFBLEdBQUE7QUFDMUMsVUFBQSxjQUFB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

//# sourceURL=/Users/anas/.atom/packages/project-manager/spec/project-spec.coffee
