(function() {
  var path;

  path = require('path');

  describe("Aligner", function() {
    var activationPromise, editor, editorView, workspaceElement, _ref;
    _ref = [], editor = _ref[0], workspaceElement = _ref[1], editorView = _ref[2], activationPromise = _ref[3];
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      atom.project.setPaths([path.join(__dirname, 'fixtures')]);
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-coffee-script');
      });
      waitsForPromise(function() {
        return atom.workspace.open('aligner-sample.coffee');
      });
      return runs(function() {
        jasmine.attachToDOM(workspaceElement);
        editor = atom.workspace.getActiveTextEditor();
        editorView = atom.views.getView(editor);
        return activationPromise = atom.packages.activatePackage("aligner");
      });
    });
    afterEach(function() {
      return atom.config.unset('aligner');
    });
    it("should align two lines correctly", function() {
      editor.setCursorBufferPosition([0, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(1)).toBe('test    = "321"');
      });
    });
    it("should align correctly", function() {
      editor.setCursorBufferPosition([6, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(6)).toBe("  foo:        bar");
      });
    });
    it("should ailgn correctly with config update", function() {
      editor.setCursorBufferPosition([6, 1]);
      atom.config.set('aligner.:-alignment', 'left');
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(6)).toBe("  foo       : bar");
      });
    });
    it("should not align anything when cursor is not within string", function() {
      editor.setCursorBufferPosition([3, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(1)).toBe('test = "321"');
      });
    });
    it("should handle prefix block correctly", function() {
      editor.setCursorBufferPosition([10, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(10)).toBe('longPrefix  = "test"');
      });
    });
    it("should handle prefix correctly", function() {
      editor.setCursorBufferPosition([10, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(11)).toBe('prefix     += "hello"');
      });
    });
    it("should know how to align operator with no space", function() {
      editor.setCursorBufferPosition([13, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(13)).toBe('noSpace = "work"');
      });
    });
    it("should only align the first ':'", function() {
      editor.setCursorBufferPosition([16, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(16)).toBe('  hello:   {not: "world"}');
      });
    });
    it("should align multiple items correctly", function() {
      editor.setCursorBufferPosition([20, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(21)).toBe('  ["abc"  , 19293, 102304, "more"]');
      });
    });
    it("should align and keep the same indentation", function() {
      editor.setCursorBufferPosition([24, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(24)).toBe('    test    = "123"');
      });
    });
    it("should align and keep the same indentation", function() {
      atom.config.set('editor.softTabs', false);
      editor.setCursorBufferPosition([24, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(24)).toBe('    test    = "123"');
      });
    });
    it("should align multiple cursor correctly", function() {
      editor.setCursorBufferPosition([0, 1]);
      editor.addCursorAtBufferPosition([6, 1]);
      editor.addCursorAtBufferPosition([10, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        expect(editor.lineTextForBufferRow(1)).toBe('test    = "321"');
        expect(editor.lineTextForBufferRow(6)).toBe("  foo:        bar");
        return expect(editor.lineTextForBufferRow(10)).toBe('longPrefix  = "test"');
      });
    });
    it("should align multiple blocks across comments", function() {
      editor.setCursorBufferPosition([31, 0]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        expect(editor.lineTextForBufferRow(31)).toBe("  black:  '#000000'");
        expect(editor.lineTextForBufferRow(32)).toBe("  # block 2");
        return expect(editor.lineTextForBufferRow(38)).toBe("  yellow: '#F6FF00'");
      });
    });
    it("should align multiple blocks across comments when invisibes are on", function() {
      atom.config.set('editor.showInvisibles', true);
      atom.config.set('editor.softTabs', false);
      editor.setCursorBufferPosition([31, 0]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        expect(editor.lineTextForBufferRow(31)).toBe("  black:  '#000000'");
        expect(editor.lineTextForBufferRow(32)).toBe("  # block 2");
        return expect(editor.lineTextForBufferRow(38)).toBe("  yellow: '#F6FF00'");
      });
    });
    it("should align multiple selections", function() {
      editor.setSelectedBufferRanges([[[30, 0], [32, 0]], [[6, 0], [8, 0]]]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        expect(editor.lineTextForBufferRow(6)).toBe("  foo:        bar");
        expect(editor.lineTextForBufferRow(7)).toBe("  helloworld: test");
        expect(editor.lineTextForBufferRow(8)).toBe("  star:       war");
        expect(editor.lineTextForBufferRow(30)).toBe("  white:      '#FFFFFF'");
        expect(editor.lineTextForBufferRow(31)).toBe("  black:      '#000000'");
        return expect(editor.lineTextForBufferRow(32)).toBe("  # block 2");
      });
    });
    return it("should maintain the same indentations after aligning", function() {
      editor.setSelectedBufferRanges([[[6, 2], [7, 0]]]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        expect(editor.lineTextForBufferRow(6)).toBe("  foo:        bar");
        return expect(editor.lineTextForBufferRow(7)).toBe("  helloworld: test");
      });
    });
  });

  describe("Aligning javascript", function() {
    var activationPromise, editor, editorView, workspaceElement, _ref;
    _ref = [], editor = _ref[0], workspaceElement = _ref[1], editorView = _ref[2], activationPromise = _ref[3];
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      atom.project.setPaths([path.join(__dirname, 'fixtures')]);
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-javascript');
      });
      waitsForPromise(function() {
        return atom.workspace.open('aligner-sample.js');
      });
      return runs(function() {
        jasmine.attachToDOM(workspaceElement);
        editor = atom.workspace.getActiveTextEditor();
        editorView = atom.views.getView(editor);
        return activationPromise = atom.packages.activatePackage("aligner");
      });
    });
    it("should align two lines correctly", function() {
      editor.setCursorBufferPosition([0, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(0)).toBe('var test   = "hello";');
      });
    });
    it("should align ':' which isn't tokenized with scope", function() {
      editor.setCursorBufferPosition([5, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(5)).toBe('  "foo":   "bar"');
      });
    });
    return it("should align ',' correctly", function() {
      editor.setCursorBufferPosition([9, 1]);
      atom.commands.dispatch(editorView, 'aligner:align');
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(function() {
        return expect(editor.lineTextForBufferRow(10)).toBe('  ["3"    , 2, 4]');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/anas/.atom/packages/aligner/spec/aligner-spec.coffee
