(function() {
  var $, Project, ProjectsListView;

  ProjectsListView = require('../lib/projects-list-view');

  Project = require('../lib/project');

  $ = require('atom-space-pen-views').$;

  describe("List View", function() {
    var data, filterEditorView, list, listView, projects, workspaceElement, _ref;
    _ref = [], listView = _ref[0], workspaceElement = _ref[1], list = _ref[2], filterEditorView = _ref[3];
    data = {
      testproject1: {
        _id: 'testproject1',
        title: "Test project 1",
        paths: ["/Users/project-1"]
      },
      testproject2: {
        _id: 'testproject2',
        title: "Test project 2",
        paths: ["/Users/project-2"],
        template: "test-template",
        icon: "icon-bug",
        group: "Test"
      }
    };
    projects = function() {
      var array, key, project, setting;
      array = [];
      for (key in data) {
        setting = data[key];
        project = new Project(setting);
        array.push(project);
      }
      return array;
    };
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      listView = new ProjectsListView;
      return list = listView.list, filterEditorView = listView.filterEditorView, listView;
    });
    it("will list all projects", function() {
      listView.show(projects());
      return expect(list.find('li').length).toBe(2);
    });
    it("will add the correct icon to each project", function() {
      var icon1, icon2;
      listView.show(projects());
      icon1 = list.find('li[data-project-id="testproject1"]').find('.icon');
      icon2 = list.find('li[data-project-id="testproject2"]').find('.icon');
      expect(icon1.attr('class')).toContain('icon-chevron-right');
      return expect(icon2.attr('class')).toContain('icon-bug');
    });
    describe("When the text of the mini editor changes", function() {
      beforeEach(function() {
        listView.show(projects());
        return listView.isOnDom = function() {
          return true;
        };
      });
      it("will only list projects with the correct title", function() {
        filterEditorView.getModel().setText('title:1');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('title');
        expect(listView.getFilterQuery()).toBe('1');
        return expect(list.find('li').length).toBe(1);
      });
      it("will only list projects with the correct group", function() {
        filterEditorView.getModel().setText('group:test');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('group');
        expect(listView.getFilterQuery()).toBe('test');
        expect(list.find('li').length).toBe(1);
        return expect(list.find('li:eq(0)').find('.project-manager-list-group')).toHaveText('Test');
      });
      it("will only list projects with the correct template", function() {
        filterEditorView.getModel().setText('template:test');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe('template');
        expect(listView.getFilterQuery()).toBe('test');
        return expect(list.find('li').length).toBe(1);
      });
      return it("will fall back to default filter key if it's not valid", function() {
        filterEditorView.getModel().setText('test:1');
        window.advanceClock(listView.inputThrottle);
        expect(listView.getFilterKey()).toBe(listView.defaultFilterKey);
        expect(listView.getFilterQuery()).toBe('1');
        return expect(list.find('li').length).toBe(1);
      });
    });
    return describe("It sorts the projects in correct order", function() {
      it("sorts after title", function() {
        atom.config.set('project-manager.sortBy', 'title');
        listView.show(projects());
        return expect(list.find('li:eq(0)').data('projectId')).toBe("testproject1");
      });
      return it("sort after group", function() {
        atom.config.set('project-manager.sortBy', 'group');
        listView.show(projects());
        return expect(list.find('li:eq(0)').data('projectId')).toBe("testproject2");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2FuYXMvLmF0b20vcGFja2FnZXMvcHJvamVjdC1tYW5hZ2VyL3NwZWMvcHJvamVjdHMtbGlzdC12aWV3LXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDRCQUFBOztBQUFBLEVBQUEsZ0JBQUEsR0FBbUIsT0FBQSxDQUFRLDJCQUFSLENBQW5CLENBQUE7O0FBQUEsRUFDQSxPQUFBLEdBQVUsT0FBQSxDQUFRLGdCQUFSLENBRFYsQ0FBQTs7QUFBQSxFQUVDLElBQUssT0FBQSxDQUFRLHNCQUFSLEVBQUwsQ0FGRCxDQUFBOztBQUFBLEVBSUEsUUFBQSxDQUFTLFdBQVQsRUFBc0IsU0FBQSxHQUFBO0FBQ3BCLFFBQUEsd0VBQUE7QUFBQSxJQUFBLE9BQXVELEVBQXZELEVBQUMsa0JBQUQsRUFBVywwQkFBWCxFQUE2QixjQUE3QixFQUFtQywwQkFBbkMsQ0FBQTtBQUFBLElBRUEsSUFBQSxHQUNFO0FBQUEsTUFBQSxZQUFBLEVBQ0U7QUFBQSxRQUFBLEdBQUEsRUFBSyxjQUFMO0FBQUEsUUFDQSxLQUFBLEVBQU8sZ0JBRFA7QUFBQSxRQUVBLEtBQUEsRUFBTyxDQUFDLGtCQUFELENBRlA7T0FERjtBQUFBLE1BSUEsWUFBQSxFQUNFO0FBQUEsUUFBQSxHQUFBLEVBQUssY0FBTDtBQUFBLFFBQ0EsS0FBQSxFQUFPLGdCQURQO0FBQUEsUUFFQSxLQUFBLEVBQU8sQ0FBQyxrQkFBRCxDQUZQO0FBQUEsUUFHQSxRQUFBLEVBQVUsZUFIVjtBQUFBLFFBSUEsSUFBQSxFQUFNLFVBSk47QUFBQSxRQUtBLEtBQUEsRUFBTyxNQUxQO09BTEY7S0FIRixDQUFBO0FBQUEsSUFlQSxRQUFBLEdBQVcsU0FBQSxHQUFBO0FBQ1QsVUFBQSw0QkFBQTtBQUFBLE1BQUEsS0FBQSxHQUFRLEVBQVIsQ0FBQTtBQUNBLFdBQUEs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

//# sourceURL=/Users/anas/.atom/packages/project-manager/spec/projects-list-view-spec.coffee
