Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.guessName = guessName;
exports.installPackages = installPackages;
exports.packagesToInstall = packagesToInstall;

var _atom = require('atom');

'use babel';

var extractionRegex = /Installing (.*?) to .* (.*)/;
var nameRegexes = [/(\\|\/)packages(\\|\/)(.*?)(\\|\/)/, /(\\|\/)([\w-_]+)(\\|\/)(lib|src)(\\|\/)/i, /(\\|\/)([\w-_]+)(\\|\/)[\w-_]+\..+$/];

function guessName(filePath) {
  var matches = undefined;

  matches = nameRegexes[0].exec(filePath);
  if (matches) {
    return matches[3];
  }
  matches = nameRegexes[1].exec(filePath);
  if (matches) {
    return matches[2];
  }
  matches = nameRegexes[2].exec(filePath);
  if (matches) {
    return matches[2];
  }
  return null;
}

function installPackages(dependencies, progressCallback) {
  return new Promise(function (resolve, reject) {
    var errors = [];
    new _atom.BufferedProcess({
      command: atom.packages.getApmPath(),
      args: ['install'].concat(dependencies).concat(['--production', '--color', 'false']),
      options: {},
      stdout: function stdout(contents) {
        var matches = extractionRegex.exec(contents);
        atom.packages.activatePackage(matches[1]);
        if (matches[2] === 'âœ“' || matches[2] === 'done') {
          progressCallback(matches[1], true);
        } else {
          progressCallback(matches[1], false);
          errors.push(contents);
        }
      },
      stderr: function stderr(contents) {
        errors.push(contents);
      },
      exit: function exit() {
        if (errors.length) {
          var error = new Error('Error installing dependencies');
          error.stack = errors.join('');
          reject(error);
        } else resolve();
      }
    });
  });
}

function packagesToInstall(name) {
  var packageInfo = atom.packages.getLoadedPackage(name);

  var toInstall = [],
      toEnable = [];
  (packageInfo ? packageInfo.metadata['package-deps'] ? packageInfo.metadata['package-deps'] : [] : []).forEach(function (name) {
    if (!window.__steelbrain_package_deps.has(name)) {
      window.__steelbrain_package_deps.add(name);
      if (atom.packages.resolvePackagePath(name)) {
        toEnable.push(name);
      } else {
        toInstall.push(name);
      }
    }
  });

  return { toInstall: toInstall, toEnable: toEnable };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmFzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1weWxpbnQvbm9kZV9tb2R1bGVzL2F0b20tcGFja2FnZS1kZXBzL2xpYi9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7b0JBRThCLE1BQU07O0FBRnBDLFdBQVcsQ0FBQTs7QUFHWCxJQUFNLGVBQWUsR0FBRyw2QkFBNkIsQ0FBQTtBQUNyRCxJQUFNLFdBQVcsR0FBRyxDQUNsQixvQ0FBb0MsRUFDcEMsMENBQTBDLEVBQzFDLHFDQUFxQyxDQUN0QyxDQUFBOztBQUVNLFNBQVMsU0FBUyxDQUFDLFFBQVEsRUFBRTtBQUNsQyxNQUFJLE9BQU8sWUFBQSxDQUFBOztBQUVYLFNBQU8sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3ZDLE1BQUksT0FBTyxFQUFFO0FBQ1gsV0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDbEI7QUFDRCxTQUFPLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN2QyxNQUFJLE9BQU8sRUFBRTtBQUNYLFdBQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQ2xCO0FBQ0QsU0FBTyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDdkMsTUFBSSxPQUFPLEVBQUU7QUFDWCxXQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUNsQjtBQUNELFNBQU8sSUFBSSxDQUFBO0NBQ1o7O0FBRU0sU0FBUyxlQUFlLENBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFFO0FBQzlELFNBQU8sSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQzNDLFFBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQTtBQUNqQiw4QkFBb0I7QUFDbEIsYUFBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO0FBQ25DLFVBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ25GLGFBQU8sRUFBRSxFQUFFO0FBQ1gsWUFBTSxFQUFFLGdCQUFTLFFBQVEsRUFBRTtBQUN6QixZQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQzlDLFlBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3pDLFlBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxFQUFFO0FBQy9DLDBCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtTQUNuQyxNQUFNO0FBQ0wsMEJBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ25DLGdCQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQ3RCO09BQ0Y7QUFDRCxZQUFNLEVBQUUsZ0JBQVMsUUFBUSxFQUFFO0FBQ3pCLGNBQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7T0FDdEI7QUFDRCxVQUFJLEVBQUUsZ0JBQVc7QUFDZixZQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDakIsY0FBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQTtBQUN4RCxlQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDN0IsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNkLE1BQU0sT0FBTyxFQUFFLENBQUE7T0FDakI7S0FDRixDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7Q0FDSDs7QUFFTSxTQUFTLGlCQUFpQixDQUFDLElBQUksRUFBRTtBQUN0QyxNQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBOztBQUV0RCxNQUFNLFNBQVMsR0FBRyxFQUFFO01BQUUsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNwQyxHQUFDLFdBQVcsR0FBSSxXQUFXLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFJLEVBQUUsQ0FBQSxDQUNuRyxPQUFPLENBQUMsVUFBUyxJQUFJLEVBQUU7QUFDdEIsUUFBSSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDL0MsWUFBTSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMxQyxVQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDMUMsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7T0FDcEIsTUFBTTtBQUNMLGlCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO09BQ3JCO0tBQ0Y7R0FDRixDQUFDLENBQUE7O0FBRUosU0FBTyxFQUFDLFNBQVMsRUFBVCxTQUFTLEVBQUUsUUFBUSxFQUFSLFFBQVEsRUFBQyxDQUFBO0NBQzdCIiwiZmlsZSI6Ii9Vc2Vycy9hbmFzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1weWxpbnQvbm9kZV9tb2R1bGVzL2F0b20tcGFja2FnZS1kZXBzL2xpYi9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcclxuXHJcbmltcG9ydCB7QnVmZmVyZWRQcm9jZXNzfSBmcm9tICdhdG9tJ1xyXG5jb25zdCBleHRyYWN0aW9uUmVnZXggPSAvSW5zdGFsbGluZyAoLio/KSB0byAuKiAoLiopL1xyXG5jb25zdCBuYW1lUmVnZXhlcyA9IFtcclxuICAvKFxcXFx8XFwvKXBhY2thZ2VzKFxcXFx8XFwvKSguKj8pKFxcXFx8XFwvKS8sXHJcbiAgLyhcXFxcfFxcLykoW1xcdy1fXSspKFxcXFx8XFwvKShsaWJ8c3JjKShcXFxcfFxcLykvaSxcclxuICAvKFxcXFx8XFwvKShbXFx3LV9dKykoXFxcXHxcXC8pW1xcdy1fXStcXC4uKyQvXHJcbl1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBndWVzc05hbWUoZmlsZVBhdGgpIHtcclxuICBsZXQgbWF0Y2hlc1xyXG5cclxuICBtYXRjaGVzID0gbmFtZVJlZ2V4ZXNbMF0uZXhlYyhmaWxlUGF0aClcclxuICBpZiAobWF0Y2hlcykge1xyXG4gICAgcmV0dXJuIG1hdGNoZXNbM11cclxuICB9XHJcbiAgbWF0Y2hlcyA9IG5hbWVSZWdleGVzWzFdLmV4ZWMoZmlsZVBhdGgpXHJcbiAgaWYgKG1hdGNoZXMpIHtcclxuICAgIHJldHVybiBtYXRjaGVzWzJdXHJcbiAgfVxyXG4gIG1hdGNoZXMgPSBuYW1lUmVnZXhlc1syXS5leGVjKGZpbGVQYXRoKVxyXG4gIGlmIChtYXRjaGVzKSB7XHJcbiAgICByZXR1cm4gbWF0Y2hlc1syXVxyXG4gIH1cclxuICByZXR1cm4gbnVsbFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbFBhY2thZ2VzKGRlcGVuZGVuY2llcywgcHJvZ3Jlc3NDYWxsYmFjaykge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGNvbnN0IGVycm9ycyA9IFtdXHJcbiAgICBuZXcgQnVmZmVyZWRQcm9jZXNzKHtcclxuICAgICAgY29tbWFuZDogYXRvbS5wYWNrYWdlcy5nZXRBcG1QYXRoKCksXHJcbiAgICAgIGFyZ3M6IFsnaW5zdGFsbCddLmNvbmNhdChkZXBlbmRlbmNpZXMpLmNvbmNhdChbJy0tcHJvZHVjdGlvbicsICctLWNvbG9yJywgJ2ZhbHNlJ10pLFxyXG4gICAgICBvcHRpb25zOiB7fSxcclxuICAgICAgc3Rkb3V0OiBmdW5jdGlvbihjb250ZW50cykge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBleHRyYWN0aW9uUmVnZXguZXhlYyhjb250ZW50cylcclxuICAgICAgICBhdG9tLnBhY2thZ2VzLmFjdGl2YXRlUGFja2FnZShtYXRjaGVzWzFdKVxyXG4gICAgICAgIGlmIChtYXRjaGVzWzJdID09PSAn4pyTJyB8fCBtYXRjaGVzWzJdID09PSAnZG9uZScpIHtcclxuICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2sobWF0Y2hlc1sxXSwgdHJ1ZSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayhtYXRjaGVzWzFdLCBmYWxzZSlcclxuICAgICAgICAgIGVycm9ycy5wdXNoKGNvbnRlbnRzKVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgc3RkZXJyOiBmdW5jdGlvbihjb250ZW50cykge1xyXG4gICAgICAgIGVycm9ycy5wdXNoKGNvbnRlbnRzKVxyXG4gICAgICB9LFxyXG4gICAgICBleGl0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xyXG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0Vycm9yIGluc3RhbGxpbmcgZGVwZW5kZW5jaWVzJylcclxuICAgICAgICAgIGVycm9yLnN0YWNrID0gZXJyb3JzLmpvaW4oJycpXHJcbiAgICAgICAgICByZWplY3QoZXJyb3IpXHJcbiAgICAgICAgfSBlbHNlIHJlc29sdmUoKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYWNrYWdlc1RvSW5zdGFsbChuYW1lKSB7XHJcbiAgbGV0IHBhY2thZ2VJbmZvID0gYXRvbS5wYWNrYWdlcy5nZXRMb2FkZWRQYWNrYWdlKG5hbWUpXHJcblxyXG4gIGNvbnN0IHRvSW5zdGFsbCA9IFtdLCB0b0VuYWJsZSA9IFtdO1xyXG4gIChwYWNrYWdlSW5mbyA/IChwYWNrYWdlSW5mby5tZXRhZGF0YVsncGFja2FnZS1kZXBzJ10gPyBwYWNrYWdlSW5mby5tZXRhZGF0YVsncGFja2FnZS1kZXBzJ10gOiBbXSkgOiBbXSlcclxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgaWYgKCF3aW5kb3cuX19zdGVlbGJyYWluX3BhY2thZ2VfZGVwcy5oYXMobmFtZSkpIHtcclxuICAgICAgICB3aW5kb3cuX19zdGVlbGJyYWluX3BhY2thZ2VfZGVwcy5hZGQobmFtZSlcclxuICAgICAgICBpZiAoYXRvbS5wYWNrYWdlcy5yZXNvbHZlUGFja2FnZVBhdGgobmFtZSkpIHtcclxuICAgICAgICAgIHRvRW5hYmxlLnB1c2gobmFtZSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdG9JbnN0YWxsLnB1c2gobmFtZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gIHJldHVybiB7dG9JbnN0YWxsLCB0b0VuYWJsZX1cclxufVxyXG4iXX0=
//# sourceURL=/Users/anas/.atom/packages/linter-pylint/node_modules/atom-package-deps/lib/helpers.js
